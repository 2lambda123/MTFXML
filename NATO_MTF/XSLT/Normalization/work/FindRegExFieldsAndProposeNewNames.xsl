<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
				xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
				xmlns:fn="http://www.w3.org/2005/xpath-functions"
				xmlns:cust="http://anyref"
				exclude-result-prefixes="xsd" xml:lang="en-US" version="2.0">
	
	<xsl:output method="xml" indent="yes"/>
	<xsl:variable name="newline" select="'&#10;'"/>
	<xsl:variable name="blankspace" select="'&#xA;'"/>
	
	<!-- NOTE: Regular Expression Patterns containing " (e.g. quote) is replaced with '&#34;' in the actual regular expression test -->

	<!-- Helper Names -->
	<xsl:variable name="MTF_CHAR" select="'Char'"/>
	<xsl:variable name="MTF_TEXT" select="'Text'"/>
	<xsl:variable name="MTF_DIGIT" select="'Digit'"/>
	<xsl:variable name="MTF_ZERO" select="'Zero'"/>
	<xsl:variable name="MTF_ONE" select="'One'"/>
	<xsl:variable name="MTF_TWO" select="'Two'"/>
	<xsl:variable name="MTF_THREE" select="'Three'"/>
	<xsl:variable name="MTF_FOUR" select="'Four'"/>
	<xsl:variable name="MTF_FIVE" select="'Five'"/>
	<xsl:variable name="MTF_SIX" select="'Six'"/>
	<xsl:variable name="MTF_SEVEN" select="'Seven'"/>
	<xsl:variable name="MTF_EIGHT" select="'Eight'"/>
	<xsl:variable name="MTF_NINE" select="'Nine'"/>
	<xsl:variable name="MTF_TEN" select="'Ten'"/>
	<xsl:variable name="MTF_ELEVEN" select="'Eleven'"/>
	<xsl:variable name="MTF_TWELVE" select="'Twelve'"/>
	<xsl:variable name="MTF_DECIMAL" select="'Decimal'"/>
	<xsl:variable name="MTF_TENTHS" select="'Tenth'"/>
	<xsl:variable name="MTF_HUNDREDTHS" select="'Hundredth'"/>
	<xsl:variable name="MTF_THOUSANDTHS" select="'Thousandth'"/>
	<xsl:variable name="MTF_HUNDRED" select="'Hundred'"/>
	<xsl:variable name="MTF_THOUSAND" select="'Thousand'"/>
	<xsl:variable name="MTF_NEGATIVE" select="'Negative'"/>
	<xsl:variable name="MTF_PROPOSED_TYPE_NAME" select="'ProposedTypeName'"/>
	<xsl:variable name="MTF_PROPOSED_EXTENSION_TYPE_NAME" select="'ProposedExtensionTypeName'"/>
	<xsl:variable name="MTF_PROPOSED_REG_EX_PATTERN" select="''"/>
	
	<!-- Main MTF Types -->
	<xsl:variable name="MTF_ALPHA_TYPE" select="'Alpha'"/>
	<xsl:variable name="MTF_NATO_ANBS_TYPE" select="'NatoAnbs'"/>
	<xsl:variable name="MTF_NATO_ANS_TYPE" select="'NatoAns'"/>
	<xsl:variable name="MTF_NATO_ABS_TYPE" select="'NatoAbs'"/>
	<xsl:variable name="MTF_ALPHA_NUMERIC_TYPE" select="'AlphaNumeric'"/>
	<xsl:variable name="MTF_NUMERIC_TYPE" select="'Numeric'"/>
	<xsl:variable name="MTF_ALPHASPECIAL_TYPE" select="'AlphaSpecial'"/>
	<xsl:variable name="MTF_ALPHANUMERICSPECIAL_TYPE" select="'AlphaNumericSpecial'"/>
	<xsl:variable name="MTF_SIMPLE_TYPE" select="'SimpleType'"/>
	<xsl:variable name="MTF_ALPHA_LIMITED_TYPE" select="'AlphaLimited'"/>

	
	<!-- CUSTOM TYPES -->
	<xsl:variable name="MTF_QUANTITY_TYPE" select="'Quantity'"/>	
	<xsl:variable name="MTF_PERCENT_TYPE" select="'Percent'"/>																																												<!-- ^((100)|(\d{0,2}))$  (New Regex Type) -->
	<xsl:variable name="MTF_OCTAL_TYPE" select="'OctantNumeric'"/>			<!-- Ref: NIEM BIOM Domain -->
	<xsl:variable name="MTF_KILOMETER_MEASURE" select="'KilometerMeasure'"/>
	<xsl:variable name="MTF_NAUTICAL_MILE_MEASURE" select="'NauticalMileMeasure'"/>
	<xsl:variable name="MTF_FOOT_MEASURE" select="'FootMeasure'"/>
	<xsl:variable name="MTF_METER_MEASURE" select="'MeterMeasure'"/>
	<xsl:variable name="MTF_KNOT_MEASURE" select="'KnotMeasure'"/>
	<xsl:variable name="MTF_MINUTE_MEASURE" select="'MinuteMeasure'"/>
	<xsl:variable name="MTF_SECOND_MEASURE" select="'SecondMeasure'"/>
	<xsl:variable name="MTF_MILLISECOND_MEASURE" select="'MilliSecondMeasure'"/>
	<xsl:variable name="MTF_YARD_MEASURE" select="'YardMeasure'"/>
	<xsl:variable name="MTF_DECIBEL_MEASURE" select="'DecibelMeasure'"/>
	<xsl:variable name="MTF_HERTZ_MEASURE" select="'HertzMeasure'"/>
	<xsl:variable name="MTF_DAY_MEASURE" select="'DayMeasure'"/>
	<xsl:variable name="MTF_HOUR_MEASURE" select="'HourMeasure'"/>
	<xsl:variable name="MTF_TON_MEASURE" select="'TonMeasure'"/>
	<xsl:variable name="MTF_POUND_MEASURE" select="'PoundMeasure'"/>
	<xsl:variable name="MTF_KILOBITS_PER_SECOND_TYPE_PATTERN" select="'KilobitsPerSecondMeasure'"/>
	<xsl:variable name="MTF_CUBIC_FOOT_MEASURE" select="'CubicFootMeasure'"/>
	<xsl:variable name="MTF_CUBIC_METER_MEASURE" select="'CubicMeterMeasure'"/>
	<xsl:variable name="MTF_MBBLS_MEASURE" select="'MbbslMeasure'"/>
	<xsl:variable name="MTF_SQUARE_MILE_MEASURE" select="'SquareMileMeasure'"/>
	<xsl:variable name="MTF_GALLON_MEASURE" select="'GallonMeasure'"/>
	<xsl:variable name="MTF_DEGREE_MEASURE" select="'DegreeMeasure'"/>
	<xsl:variable name="MTF_MAGNETIC_DEGREE_MEASURE" select="'MagneticDegreeMeasure'"/>
	<xsl:variable name="MTF_JULIAN_DAY_MEASURE" select="'JulianDayMeasure'"/>
	<xsl:variable name="MTF_MILLIBAR_MEASURE" select="'MillibarMeasure'"/>
	<xsl:variable name="MTF_CENTISECOND_MEASURE" select="'CentiSecondMeasure'"/>
	<xsl:variable name="MTF_HORSEPOWER_MEASURE" select="'HorsepowerMeasure'"/>
	<xsl:variable name="MTF_CENTIMETER_MEASURE" select="'CentimeterMeasure'"/>
	<xsl:variable name="MTF_KILOGRAM_MEASURE" select="'KilogramMeasure'"/>
	<xsl:variable name="MTF_MIL_MEASURE" select="'MilMeasure'"/>
	<xsl:variable name="MTF_KELVIN_MEASURE" select="'KelvinMeasure'"/>
	<xsl:variable name="MTF_YEAR_MEASURE" select="'YearMeasure'"/>
	<xsl:variable name="MTF_METERS_PER_SECOND_MEASURE" select="'MetersPerSecondMeasure'"/>
	<xsl:variable name="MTF_WATT_MEASURE" select="'WattMeasure'"/>
	<xsl:variable name="MTF_METRIC_TON_MEASURE" select="'MetricTonMeasure'"/>
	<xsl:variable name="MTF_TENTH_SECOND_MEASURE" select="'TenthSecondMeasure'"/>
	<xsl:variable name="MTF_MEGAHERTZ_MEASURE" select="'MegahertzMeasure'"/>
	<xsl:variable name="MTF_KILOHERTZ_MEASURE" select="'KilohertzMeasure'"/>
	<xsl:variable name="MTF_FARENHEIT_MEASURE" select="'FarenheitMeasure'"/>
	<xsl:variable name="MTF_CELSIUS_MEASURE" select="'CelsiusMeasure'"/>
	<xsl:variable name="MTF_SQUARE_METER_MEASURE" select="'SquareMeterMeasure'"/>
	<xsl:variable name="MTF_STATUTE_MILE_MEASURE" select="'StatuteMileMeasure'"/>
	<xsl:variable name="MTF_MILLI_MHOS_MEASURE" select="'MilliMHosMeasure'"/>
	<xsl:variable name="MTF_MICRO_SECOND_MEASURE" select="'MicroSecondMeasure'"/>
	<xsl:variable name="MTF_INCH_MEASURE" select="'InchMeasure'"/>
	<xsl:variable name="MTF_UNSPECIFIED_MEASURE" select="'UnspecifiedMeasure'"/>
	<xsl:variable name="MTF_DESI_SECOND_MEASURE" select="'DesiSecondMeasure'"/>
	<xsl:variable name="MTF_KILOTON_TYPE_PATTERN" select="'KilotonMeasure'"/>
	<xsl:variable name="MTF_HECTO_PASCALS_MEASURE" select="'HectoPascalMeasure'"/>
	<xsl:variable name="MTF_LAT_LONG_MINUTE_MEASURE" select="'LatLongMinuteMeasure'"/>
	<xsl:variable name="MTF_ROENTGEN_MEASURE" select="'RoentgenMeasure'"/>
	<xsl:variable name="MTF_HEXADECIMAL_NUMBER" select="'HexiDecimalNumber'"/>
	<xsl:variable name="MTF_FEET_PER_SECOND_MEASURE" select="'FeetPerSecondMeasure'"/>
	
	<xsl:variable name="MTF_LAST_C_LEVEL_TYPE" select="'LastCLevelText'"/>																																									<!-- [0-9]{1,1} -->
	<xsl:variable name="MTF_STATUS_OF_AVIATOR_TRAINING_TYPE" select="'AviatorTrainingStatusText'"/>																																			<!-- [0-9]{1,1} -->
	<xsl:variable name="MTF_DISTANCE_TYPE" select="'DistanceMeasure'"/>																																										<!-- [0-9]{2,4} -->
	<xsl:variable name="MTF_LAT_LONG_TYPE" select="'LatLong'"/> 																																											<!-- [0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{2}\.[0-9]{4} -->
	<xsl:variable name="MTF_ALTITUDE_TYPE_PATTERN" select="'Altitude'"/>
	<xsl:variable name="MTF_NINE_UNIT_COMMENTS_TYPE_PATTERN" select="'NineUnitCommentText'"/>
	<xsl:variable name="MTF_FIVE_UNIT_COMMENTS_TYPE_PATTERN" select="'FiveUnitCommentText'"/>
	<xsl:variable name="MTF_ONE_THOUSAND_METER_SQUARE_TYPE_PATTERN" select="'OneThousandMeterSquareColumnID'"/>
	<xsl:variable name="MTF_APPROACH_SPEED_TYPE_PATTERN" select="'ApproachSpeedMeasure'"/>
	<xsl:variable name="MTF_TRANSIT_DISTANCE_TYPE_PATTERN" select="'TransitDistanceMeasure'"/>
	<xsl:variable name="MTF_DISTANCE_FROM_REFERENCE_TRACK_TYPE" select="'DistanceFromReferenceTrackMeasure'"/>
	<xsl:variable name="MTF_DISTANCE_TO_TARGET_TYPE_PATTERN" select="'DistanceToTargetMeasure'"/>
	<xsl:variable name="MTF_DUAL_OPERATIONALLY_READY_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN" select="'DualOperationallyReadyMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_DUAL_READY_PRIMARY_DUTY_CREWS_TYPE_PATTERN" select="'DualReadyPrimaryDutyCrewQuantity'"/>
	<xsl:variable name="MTF_EMITTER_TRACKS_TYPE_PATTERN" select="'EmitterTrackQuantity'"/>
	<xsl:variable name="MTF_EOB_TRACKS_TYPE_PATTERN" select="'EobTrackQuantity'"/>
	<xsl:variable name="MTF_EQUIPMENT_ITEM_COUNT_TYPE_PATTERN" select="'EquipmentItemQuantity'"/>
	<xsl:variable name="MTF_EQUIPMENT_ON_HAND_RESERVE_STOCKS_ABOVE_TOE_TYPE_PATTERN" select="'EquipmentOnHandReserveStockAboveToeQuantity'"/>
	<xsl:variable name="MTF_ESTIMATED_STRENGTH_TYPE_PATTERN" select="'EstimatedStrengthPercent'"/>
	<xsl:variable name="MTF_FACILITY_TRACK_TYPE_PATTERN" select="'FacilityTrackQuantity'"/>
	<xsl:variable name="MTF_FCS_TRACKS_TYPE_PATTERN" select="'FcsTrackQuantity'"/>
	<xsl:variable name="MTF_IDENTIFICATION_SAFETY_RANGE_TYPE_PATTERN" select="'IdentificationSafetyRangeMeasure'"/>
	<xsl:variable name="MTF_WIDE_FIELD_OF_VIEW_TYPE_PATTERN" select="'WideFieldOfViewMeasure'"/>
	<xsl:variable name="MTF_MEDIUM_FIELD_OF_VIEW_TYPE_PATTERN" select="'MediumFieldOfViewMeasure'"/>
	<xsl:variable name="MTF_NARROW_FIELD_OF_VIEW_TYPE_PATTERN" select="'NarrowFieldOfViewMeasure'"/>
	<xsl:variable name="MTF_COMBAT_AIR_PATROL_CAPS_STATION_LENGTH_TYPE_PATTERN" select="'CombatAirPatrolCapsStationLengthMeasure'"/>
	<xsl:variable name="MTF_STRAIGHT_LINE_DISTANCE_IN_KILOMETERS_TYPE_PATTERN" select="'StraightLineDistanceKMeasure'"/>
	<xsl:variable name="MTF_STRAIGHT_LINE_DISTANCE_IN_NAUTICAL_MILES_TYPE_PATTERN" select="'StraightLineDistanceNMMeasure'"/>
	<xsl:variable name="MTF_HELICOPTER_LANDING_AREA_LENGTH_IN_FEET_TYPE_PATTERN" select="'HelicopterLandingAreaLengthMeasure'"/>
	<xsl:variable name="MTF_ENTRANCE_LENGTH_IN_FEET_TYPE_PATTERN" select="'EntranceLength'"/>
	<xsl:variable name="MTF_ENTRANCE_LENGTH_IN_KILOMETERS_TYPE_PATTERN" select="'EntranceLengthKMeasure'"/>
	<xsl:variable name="MTF_ENTRANCE_LENGTH_IN_NAUTICAL_MILES_TYPE_PATTERN" select="'EntranceLengthNMMeasure'"/>
	<xsl:variable name="MTF_ENTRANCE_WIDTH_IN_FEET_TYPE_PATTERN" select="'EntranceWidth'"/>
	<xsl:variable name="MTF_ENTRANCE_WIDTH_IN_KILOMETERS_TYPE_PATTERN" select="'EntranceWidthKMeasure'"/>
	<xsl:variable name="MTF_ENTRANCE_WIDTH_IN_NAUTICAL_MILES_TYPE_PATTERN" select="'EntranceWidthNMMeasure'"/>
	<xsl:variable name="MTF_OBSTACLE_LENGTH_IN_KILOMETERS_TYPE_PATTERN" select="'ObstacleLengthKMeasure'"/>
	<xsl:variable name="MTF_OBSTACLE_LENGTH_IN_NAUTICAL_MILES_TYPE_PATTERN" select="'ObstacleWidthNMMeasure'"/>
	<xsl:variable name="MTF_OBSTACLE_WIDTH_IN_KILOMETERS_TYPE_PATTERN" select="'ObstacleWidthKMeasure'"/>
	<xsl:variable name="MTF_OBSTACLE_WIDTH_IN_NAUTICAL_MILES_TYPE_PATTERN" select="'ObstacleLengthNMMeasure'"/>
	<xsl:variable name="MTF_OBSTRUCTION_DISTANCE_IN_KILOMETERS_TYPE_PATTERN" select="'ObstructionDistanceKMeasure'"/>
	<xsl:variable name="MTF_OBSTRUCTION_DISTANCE_IN_NAUTICAL_MILES_TYPE_PATTERN" select="'ObstructionDistanceNMMeasure'"/>
	<xsl:variable name="MTF_TOTAL_LENGTH_TYPE_PATTERN" select="'TotalLengthMeasure'"/>
	<xsl:variable name="MTF_CLOSEST_APPROACH_POINT_TYPE_PATTERN" select="'ClosestApproachPointMeasure'"/>
	<xsl:variable name="MTF_SEARCH_TRACK_DISTANCE_TYPE_PATTERN" select="'SearchTrackDistanceMeasure'"/>
	<xsl:variable name="MTF_RANGE_FROM_NAVID_TYPE_PATTERN" select="'RangeFromNavIdMeasure'"/>
	<xsl:variable name="MTF_EVAPORATIVE_DUCT_HEIGHT_TYPE_PATTERN" select="'EvaporativeDuctHeightMeasure'"/>
	<xsl:variable name="MTF_ELEVATED_DUCT_ALTITUDE_TYPE_PATTERN" select="'ElevatedDuctAltitudeMeasure'"/>
	<xsl:variable name="MTF_ALTITUDE_THOUSAND_TYPE_PATTERN" select="'AltitudeThousandMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_PRESSURE_ALTITUDE_TYPE_PATTERN" select="'MaximumPressureAltitudeMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_DENSITY_ALTITUDE_TYPE_PATTERN" select="'MaximumDensityAltitudeMeasure'"/>
	<xsl:variable name="MTF_ALTITUDE_HUNDRED_TYPE_PATTERN" select="'AltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_DECONFLICTED_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'DeconflictedFlightLevelHundredMeasure'"/>
	<xsl:variable name="MTF_LOWER_FLIGHT_LEVEL_TYPE_PATTERN" select="'LowerFlightLevel'"/>
	<xsl:variable name="MTF_MINIMUM_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'MinimumFlightLevelHundredMeasure'"/>
	<xsl:variable name="MTF_LOWER_ALTITUDE_TYPE_PATTERN" select="'LowerAltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_CLOUD_TOP_ALTITUDE_TYPE_PATTERN" select="'CloudTopAltitudeMeasure'"/>
	<xsl:variable name="MTF_CLOUD_BASE_ALTITUDE_TYPE_PATTERN" select="'CloudBaseAltitudeMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_FREEZING_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'MinimumFreezingAltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_PARTS_SEQUENCE_NUMBER_TYPE_PATTERN" select="'PartSequenceNumber'"/>
	<xsl:variable name="MTF_RENDEZVOUS_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'RendezvousAltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_RENDEZVOUS_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'RendezvousFlightLevelHundredMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_ALTITUDE_TYPE_PATTERN" select="'MaximumAltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'MinimumAltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_BASE_REFUELING_ALTITUDE_TYPE_PATTERN" select="'BaseRefuelingAltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_POSSIBLE_ABOVE_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'PossibleAboveAltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_PROBABLE_ABOVE_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'ProbableAboveAltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_RUNWAY_WIDTH_TYPE_PATTERN" select="'RunwayWidthMeasure'"/>
	<xsl:variable name="MTF_DISTANCE_BETWEEN_REFERENCE_MARK_TYPE_PATTERN" select="'DistanceBetweenReferenceMark'"/>
	<xsl:variable name="MTF_HAZARD_DISTANCE_IN_FEET_TYPE_PATTERN" select="'HazardDistanceMeasure'"/>
	<xsl:variable name="MTF_EXIT_DISTANCE_TYPE_PATTERN" select="'ExitDistanceMeasure'"/>
	<xsl:variable name="MTF_LEXIT_DISTANCE_IN_FEET_TYPE_PATTERN" select="'LexitDistanceMeasure'"/>
	<xsl:variable name="MTF_OBSTRUCTION_DISTANCE_IN_FEET_TYPE_PATTERN" select="'ObstructionDistance'"/>
	<xsl:variable name="MTF_OBSTRUCTION_DISTANCE_IN_METERS_TYPE_PATTERN" select="'ObstructionDistanceMeasure'"/>
	<xsl:variable name="MTF_PORT_DISTANCE_IN_FEET_TYPE_PATTERN" select="'PortDistanceMeasure'"/>
	<xsl:variable name="MTF_USABLE_LENGTH_TYPE_PATTERN" select="'UsableLength'"/>
	<xsl:variable name="MTF_CONTINUOUS_USABLE_LENGTH_TYPE_PATTERN" select="'ContinuousUsableLengthMeasure'"/>
	<xsl:variable name="MTF_VISIBLE_FORESHORE_WIDTH_TYPE_PATTERN" select="'VisibleForeshoreWidth'"/>
	<xsl:variable name="MTF_AREA_IN_SQUARE_METERS_TYPE_PATTERN" select="'AreaMeasure'"/>
	<xsl:variable name="MTF_AVERAGE_BACKSHORE_WIDTH_TYPE_PATTERN" select="'AverageBackshoreWidthMeasure'"/>
	<xsl:variable name="MTF_EXIT_WIDTH_TYPE_PATTERN" select="'ExitWidthMeasure'"/>
	<xsl:variable name="MTF_TOTAL_AREA_IN_SQUARE_METERS_TYPE_PATTERN" select="'TotalAreaMeasure'"/>
	<xsl:variable name="MTF_HELICOPTER_LANDING_AREA_WIDTH_IN_FEET_TYPE_PATTERN" select="'HelicopterLandingAreaWidthMeasure'"/>
	<xsl:variable name="MTF_LEXIT_WIDTH_IN_FEET_TYPE_PATTERN" select="'LexitWidthMeasure'"/>
	<xsl:variable name="MTF_BERTH_LENGTH_IN_FEET_TYPE_PATTERN" select="'BerthLengthMeasure'"/>
	<xsl:variable name="MTF_OVERRUN_LENGTH_TYPE_PATTERN" select="'OverrunLength'"/>
	<xsl:variable name="MTF_PARKING_AREA_LENGTH_IN_FEET_TYPE_PATTERN" select="'ParkingAreaLengthMeasure'"/>
	<xsl:variable name="MTF_PARKING_AREA_WIDTH_IN_FEET_TYPE_PATTERN" select="'ParkingAreaWidthMeasure'"/>
	<xsl:variable name="MTF_RUNWAY_LENGTH_IN_FEET_TYPE_PATTERN" select="'RunwayLengthMeasure'"/>
	<xsl:variable name="MTF_TAXIWAY_LENGTH_IN_FEET_TYPE_PATTERN" select="'TaxiwayLengthMeasure'"/>
	<xsl:variable name="MTF_TAXIWAY_WIDTH_IN_FEET_TYPE_PATTERN" select="'TaxiwayWidthMeasure'"/>
	<xsl:variable name="MTF_OVERRUN_WIDTH_TYPE_PATTERN" select="'OverrunWidthMeasure'"/>
	<xsl:variable name="MTF_SURF_ZONE_WIDTH_TYPE_PATTERN" select="'SurfZoneWidthMeasure'"/>
	<xsl:variable name="MTF_CASE_DEPTH_TYPE_PATTERN" select="'CaseDepthMeasure'"/>
	<xsl:variable name="MTF_AVERAGE_WIDTH_TYPE_PATTERN" select="'AverageWidthMeasure'"/>
	<xsl:variable name="MTF_DISTANCE_FROM_ORIGIN_TYPE_PATTERN" select="'DistanceFromOriginMeasure'"/>
	<xsl:variable name="MTF_LENGTH_TYPE_PATTERN" select="'Length'"/>
	<xsl:variable name="MTF_WIDTH_TYPE_PATTERN" select="'Width'"/>
	<xsl:variable name="MTF_ELEVATION_TYPE_PATTERN" select="'ElevationMeasure'"/>
	<xsl:variable name="MTF_DROP_ZONE_ELEVATION_TYPE_PATTERN" select="'DropZoneElevationMeasure'"/>
	<xsl:variable name="MTF_BEACON_ELEVATION_TYPE_PATTERN" select="'BeaconElevation'"/>
	<xsl:variable name="MTF_HELICOPTER_LANDING_AREA_ELEVATION_IN_FEET_TYPE_PATTERN" select="'HelicopterLandingAreaElevationMeasure'"/>
	<xsl:variable name="MTF_AIRFIELD_ELEVATION_TYPE_PATTERN" select="'AirfieldElevationMeasure'"/>
	<xsl:variable name="MTF_TIDAL_AMOUNT_TYPE_PATTERN" select="'TitalAmountMeasure'"/>
	<xsl:variable name="MTF_HEIGHT_ABOVE_GROUND_IN_FEET_TYPE_PATTERN" select="'HeightAboveGroundMeasure'"/>
	<xsl:variable name="MTF_AREA_SQUARED_TYPE_PATTERN" select="'AreaSquaredMeasure'"/>
	<xsl:variable name="MTF_TOTAL_AREA_SQUARED_TYPE_PATTERN" select="'TotalAreaSquaredMeasure'"/>
	<xsl:variable name="MTF_DEPTH_TYPE_PATTERN" select="'DepthMeasure'"/>
	<xsl:variable name="MTF_LENGTH_IN_TENTHS_OF_METERS_TYPE_PATTERN" select="'LengthMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_REPORTED_ENTRANCE_DEPTH_TYPE_PATTERN" select="'MinimumReportedEntranceDepth'"/>
	<xsl:variable name="MTF_MINIMUM_WIDTH_IN_FEET_TO_THE_TENTH_TYPE_PATTERN" select="'MinimumWidthMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_CHARTED_ENTRANCE_DEPTH_TYPE_PATTERN" select="'MinimumChartedEntranceDepthMeasure'"/>
	<xsl:variable name="MTF_CHARTED_MINIMUM_BERTHING_DEPTH_TYPE_PATTERN" select="'ChartedMinimumBerthingDepthMeasure'"/>
	<xsl:variable name="MTF_REPORTED_MINIMUM_BERTHING_DEPTH_TYPE_PATTERN" select="'MinimumReportedBerthingDepthMeasure'"/>
	<xsl:variable name="MTF_TOTAL_LENGTH_IN_STATUTE_MILES_TYPE_PATTERN" select="'TotalLengthMeasure'"/>
	<xsl:variable name="MTF_WIDTH_IN_TENTHS_OF_METERS_TYPE_PATTERN" select="'WidthMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_BERTHING_DEPTH_TYPE_PATTERN" select="'MaximumBerthingDepthMeasure'"/>
	<xsl:variable name="MTF_TOTAL_VOLUME_TYPE_PATTERN" select="'TotalVolume'"/>
	<xsl:variable name="MTF_RUNWAY_LENGTH_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'RunwayLengthHundredMeasure'"/>
	<xsl:variable name="MTF_SONAR_DEPTH_OR_ALTITUDE_TYPE_PATTERN" select="'SonarDepthOrAltitudeMeasure'"/>
	<xsl:variable name="MTF_ACCURACY_OF_REPORTED_TARGET_LOCATION_TYPE_PATTERN" select="'AccuracyOfReportedTargetLocationMeasure'"/>
	<xsl:variable name="MTF_ACOUSTIC_TRACK_TYPE_PATTERN" select="'AcousticTrackQuantity'"/>
	<xsl:variable name="MTF_ACTIVE_GUARD_RESERVE_PERSONNEL_ASSIGNED_TYPE_PATTERN" select="'ActiveGuardReservePersonnelAssignedQuantity'"/>
	<xsl:variable name="MTF_ALLOCATED_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN" select="'AllocatedMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_ANGLE_EITHER_SIDE_OF_AXIS_TYPE_PATTERN" select="'AngleEitherSideOfAxisMeasure'"/>
	<xsl:variable name="MTF_AUTHORIZED_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN" select="'AuthorizedMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_AVERAGE_AMBIENT_NOISE_LEVEL_TYPE_PATTERN" select="'AverageAmbientNoiseLevelMeasure'"/>
	<xsl:variable name="MTF_AVERAGE_HANDLING_TIME_TYPE_PATTERN" select="'AverageHandlingTimeMeasure'"/>
	<xsl:variable name="MTF_BASIC_HELICOPTER_VEHICLE_AMMUNITION_LOAD_TYPE_PATTERN" select="'BasicHelicopterVehicleAmmunitionLoadQuantity'"/>
	<xsl:variable name="MTF_BRIDGE_MILITARY_LOAD_CLASSIFICATION_TYPE_PATTERN" select="'BridgeMilitaryLoadClassificationMeasure'"/>
	<xsl:variable name="MTF_BURN_BED_COUNT_TYPE_PATTERN" select="'BurnBedQuantity'"/>
	<xsl:variable name="MTF_BURN_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'AssignedPatientBurnBedQuantity'"/>
	<xsl:variable name="MTF_BURN_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'PatientBurnBedRequiredQuantity'"/>
	<xsl:variable name="MTF_CLOSE_TETHERED_TYPE_PATTERN" select="'CloseTetheredNumber'"/>
	<xsl:variable name="MTF_COHORT_E4S_COUNTED_AS_E5S_TYPE_PATTERN" select="'CohortE4CountedAsE5Quantity'"/>
	<xsl:variable name="MTF_COLD_MISSILE_INVENTORY_TYPE_PATTERN" select="'ColdMissileInventoryQuantity'"/>
	<xsl:variable name="MTF_COMBAT_EFFECTIVENESS_TYPE_PATTERN" select="'CombatEffectivenessPercent'"/>
	<xsl:variable name="MTF_CONVENTIONAL_OPERATIONAL_READY_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN" select="'ConventionalOperationallyReadyMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_CONVENTIONAL_READY_PRIMARY_DUTY_CREWS_TYPE_PATTERN" select="'ConventionalReadyPrimaryDutyCrewQuantity'"/>
	<xsl:variable name="MTF_CONVOY_GROUP_TIME_INTERVAL_TYPE_PATTERN" select="'ConvoyGroupTimeIntervalMeasure'"/>
	<xsl:variable name="MTF_CONVOY_PASS_TIME_TYPE_PATTERN" select="'ConvoyPassTimeMeasure'"/>
	<xsl:variable name="MTF_CONVOY_SERIAL_TIME_INTERVAL_TYPE_PATTERN" select="'ConvoySerialTimeIntervalMeasure'"/>
	<xsl:variable name="MTF_COUNT_OF_AIRCRAFT_ALLOTTED_TYPE_PATTERN" select="'AircraftAllottedQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_AIRCRAFT_TYPE_PATTERN" select="'AircraftQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_ASSESTS_TYPE_PATTERN" select="'AssetQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_CREWS_ASSIGNED_TYPE_PATTERN" select="'AssignedCrewQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_CREWS_AVAILABLE_TYPE_PATTERN" select="'AvailableCrewQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_EQUIPMENT_TYPE_PATTERN" select="'EquipmentTypeQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_NONREPORTABLE_LINE_ITEMS_TYPE_PATTERN" select="'NonReportableLineItemQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_PERSONNEL_BY_STATUS_TYPE_PATTERN" select="'PersonnelStatusQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_SORTIES_TYPE_PATTERN" select="'SortieQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_VEHICLES_TYPE_PATTERN" select="'VehicleQuantity'"/>
	<xsl:variable name="MTF_CRYSTAL_COUNTDOWN_TYPE_PATTERN" select="'CrystalCountdownValue'"/>
	<xsl:variable name="MTF_CURRENT_UNIT_STRENGTH_TYPE_PATTERN" select="'CurrentUnitStrengthPercent'"/>
	<xsl:variable name="MTF_CYCLE_RATE_TYPE_PATTERN" select="'CycleRateTimeMeasure'"/>
	<xsl:variable name="MTF_DAYS_OF_CLASS_VIII_SUPPLIES_ON_HAND_TYPE_PATTERN" select="'MedicalSupplyOnHandMeasure'"/>
	<xsl:variable name="MTF_DAYS_OF_COMBAT_SUPPORT_TYPE_PATTERN" select="'CombatSupportPetroleumSupplyOnHandMeasure'"/>
	<xsl:variable name="MTF_DAYS_OF_SUPPLY_ON_HAND_TYPE_PATTERN" select="'SupplyOnHandMeasure'"/>
	<xsl:variable name="MTF_DAYS_OF_SUPPLY_ON_HAND_DIRECT_SUPPORT_TYPE_PATTERN" select="'DirectSupportSupplyOnHandMeasure'"/>
	<xsl:variable name="MTF_DAYS_OF_SUPPLY_ON_HAND_GENERAL_SUPPORT_TYPE_PATTERN" select="'GeneralSupportSupplyOnHandMeasure'"/>
	<xsl:variable name="MTF_DAYS_OF_SUPPLY_OR_DAYS_OF_SUSTAINABILITY_TYPE_PATTERN" select="'SupplyOrSustainabilityMeasure'"/>
	<xsl:variable name="MTF_DEFENDED_ASSET_PRIORITY_TYPE_PATTERN" select="'DefendedAssetPriorityNumber'"/>
	<xsl:variable name="MTF_DISTANCE_BETWEEN_CONVOY_VEHICLES" select="'ConvoyVehicleDistanceMeasure'"/>
	<xsl:variable name="MTF_DIVER_MEASURED_PERCENT_OF_BURIAL_TYPE" select="'DiverMeasuredBurialPercent'"/>
	<xsl:variable name="MTF_DWELL_TIME_TYPE_PATTERN" select="'DwellTimeMeasure'"/>
	<xsl:variable name="MTF_EMERGENCY_STORE_ENDURANCE_TYPE_PATTERN" select="'EmergencyStoreEnduranceMeasure'"/>
	<xsl:variable name="MTF_FLASH_TO_BANG_TIME_TYPE_PATTERN" select="'FlashToBangDuration'"/>
	<xsl:variable name="MTF_EQUIPMENT_TEAR_DOWN_TIME_TYPE_PATTERN" select="'EquipmentTearDownDuration'"/>
	<xsl:variable name="MTF_FIRE_SUPPORT_UNIT_NUCLEAR_RESPONSE_TIME_TYPE_PATTERN" select="'FireSupportUnitNuclearResponseTime'"/>
	<xsl:variable name="MTF_GENERAL_SURGERY_BEDS_COUNT_TYPE_PATTERN" select="'GeneralSurgeryBedQuantity'"/>
	<xsl:variable name="MTF_GENERAL_SURGERY_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'GeneralSurgeryAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_GENERAL_SURGERY_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'GeneralSurgeryPatientBedRequiredQuantity'"/>
	<xsl:variable name="MTF_GENERAL_TRACKS_TYPE_PATTERN" select="'GeneralTrackQuantity'"/>
	<xsl:variable name="MTF_GRADING_OF_MESSAGE_REPORT_TYPE_PATTERN" select="'MessageReportGradeValue'"/>
	<xsl:variable name="MTF_HOT_MISSILE_INVENTORY_TYPE_PATTERN" select="'HotMissileInventoryQuantity'"/>
	<xsl:variable name="MTF_HOURS_IN_REPORTING_PERIOD_TYPE_PATTERN" select="'ReportPeriodDuration'"/>
	<xsl:variable name="MTF_HOURS_SCHEDULED_OFF_TASK_TYPE_PATTERN" select="'ScheduledOffTaskDuration'"/>
	<xsl:variable name="MTF_INTERNET_PROTOCOL_ADDRESS_OCTET_TYPE_PATTERN" select="'InternetProtocolAddressOctetNumber'"/>
	<xsl:variable name="MTF_LATERAL_DISPLACEMENT_FROM_AQ_ROUTE_TRACK_TYPE_PATTERN" select="'LateralDisplacementFromAQRouteTrackMeasure'"/>
	<xsl:variable name="MTF_LINK_22_TRANSMISSION_SLOTS_TYPE_PATTERN" select="'Link22TransmissionSlotQuantity'"/>
	<xsl:variable name="MTF_LINK_TRACKS_TYPE_PATTERN" select="'LinkTrackQuantity'"/>
	<xsl:variable name="MTF_MAINTENANCE_DOWNTIME_TYPE_PATTERN" select="'MaintenanceDownTimeDuration'"/>
	<xsl:variable name="MTF_MAJOR_EQUIPMENT_ACTUAL_COUNT_TYPE_PATTERN" select="'MajorEquipmentActualQuantity'"/>
	<xsl:variable name="MTF_MAJOR_EQUIPMENT_REQUIRED_COUNT_TYPE_PATTERN" select="'MajorEquipmentRequiredQuantity'"/>
	<xsl:variable name="MTF_MAXIMUM_AMBIENT_NOISE_LEVEL_TYPE_PATTERN" select="'MaximumAmbientNoiseLevelMeasure'"/>
	<xsl:variable name="MTF_MINEFIELD_LIFE_TYPE_PATTERN" select="'MinefieldLifeDuration'"/>
	<xsl:variable name="MTF_MINIMUM_ACCEPTABLE_PERCENTAGE_OF_REMAINING_FUEL_TYPE_PATTERN" select="'MinimumAcceptableFuelRemainPercent'"/>
	<xsl:variable name="MTF_MINIMUM_AMBIENT_NOISE_LEVEL_TYPE_PATTERN" select="'MinimumAmbientNoiseLevelMeasure'"/>
	<xsl:variable name="MTF_MISSILE_TRACK_TYPE_PATTERN" select="'MissileTrackQuantity'"/>
	<xsl:variable name="MTF_NEUROSURGERY_BED_COUNT_TYPE_PATTERN" select="'NeurosurgeryBedQuantity'"/>
	<xsl:variable name="MTF_NEUROSURGERY_BEDS_ASSIGNED_TYPE_PATTERN" select="'NeurosurgeryAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_NEUROSURGERY_PATIENT_REQUIRED_BEDS_TYPE_PATTERN" select="'NeurosurgeryPatientBedRequiredQuantity'"/>
	<xsl:variable name="MTF_NUCLEAR_MISSION_READY_PRIMARY_DUTY_CREWS_TYPE_PATTERN" select="'NuclearMissionReadyPrimaryDutyCrewQuantity'"/>
	<xsl:variable name="MTF_NUCLEAR_OPERATIONALLY_READY_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN" select="'NuclearOperationallyReadyMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_NUCLEAR_WEAPONS_QUANTITY_TYPE_PATTERN" select="'NuclearWeaponQuantity'"/>
	<xsl:variable name="MTF_NUMBER_EXPENDED_TYPE_PATTERN" select="'ExpendedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_NEEDED_TO_RAISE_C3_TYPE_PATTERN" select="'NeededToRaiseC3Quantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ADDITIONAL_VESSELS_IN_AREA_TYPE_PATTERN" select="'AreaAdditionalVesselQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AGENT_CONTAINERS_TYPE_PATTERN" select="'AgentContainerQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIR_FORCE_PATIENTS_TYPE_PATTERN" select="'AirForcePatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_OR_MISSILES_ASSIGNED_TYPE_PATTERN" select="'AssignedAircraftOrMissileQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_OR_MISSILES_AUTHORIZED_OR_REQUIRED_TYPE_PATTERN" select="'AircraftOrMissilesAuthorizedOrRequiredQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_OR_MISSILES_READY_AVAILABLE_TYPE_PATTERN" select="'AircraftOrMissilesReadyAvailableQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_OR_MISSILES_POSSESSED_TYPE_PATTERN" select="'AircraftOrMissilesPossessedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AMBULATORY_PATIENTS_TYPE_PATTERN" select="'AmbulatoryPatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ARMY_PATIENTS_TYPE_PATTERN" select="'ArmyPatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ATTENDANTS_TYPE_PATTERN" select="'AttendantQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_BATTLEFIELD_AIR_INTERDICTION_SORTIES_TYPE_PATTERN" select="'BattlefieldAirInterdictionSoritieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_BEDS_OCCUPIED_TYPE_PATTERN" select="'BedsOccupiedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_BEDS_OPERATING_TYPE_PATTERN" select="'BedsOperatingQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_BURSTS_IN_A_MULTIPLE_STRIKE_TYPE_PATTERN" select="'MultipleStrikeBurstQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CIVILIANS_ABOARD_TYPE_PATTERN" select="'CivilianAboardQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CIVILIANS_OFF_NEXT_STATION_TYPE_PATTERN" select="'CivilianOffNextStationQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CLOSE_AIR_SUPPORT_SORTIES_TYPE_PATTERN" select="'CloseAirSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CODE_A_ITEMS_AUTHORIZED_TYPE_PATTERN" select="'CodeAItemsAuthorizedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CODE_A_ITEMS_ON_HAND_TYPE_PATTERN" select="'CodeAItemsOnHandQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CODE_A_ITEMS_REQUIRED_TYPE_PATTERN" select="'CodeAItemsRequiredQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CREWS_AUTHROZIED_OR_REQUIRED_TYPE_PATTERN" select="'CrewAuthorizedOrRequiredQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DEFENSIVE_COUNTERAIR_SORTIES_TYPE_PATTERN" select="'DefensiveCounterAirSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DELIVERY_SYSTEMS_TYPE_PATTERN" select="'DeliverySystemQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DISTINGUISHED_VISITORS_ABOARD_TYPE_PATTERN" select="'DistinguishedVisitorAboardQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DISTINGUISHED_VISITORS_OFF_NEXT_STATION_TYPE_PATTERN" select="'DistinguishedVisitorOffNextStationQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DMPIS_PASSED_TYPE_PATTERN" select="'DmpisPassedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ELECTRONIC_WARFARE_SORTIES_TYPE_PATTERN" select="'ElectronicWarfareSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ENEMY_PRISONER_OF_WAR_PATIENTS_TYPE_PATTERN" select="'EnemyPrisonerOfWarPatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ENEMY_WEAPON_SYSTEMS_TYPE_PATTERN" select="'EnemyWeaponSystemsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_EXCESS_SORTIES_TYPE_PATTERN" select="'ExcessSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_FIRE_CONTROL_UNITS_TYPE_PATTERN" select="'FireControlUnitQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_FOREIGN_NATIONALS_ABOARD_TYPE_PATTERN" select="'ForeignNationalAboardQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_FOREIGN_NATIONALS_OFF_NEXT_STATION_TYPE_PATTERN" select="'ForeignNationalOffNextStationQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_INTERDICTION_SORTIES_TYPE_PATTERN" select="'InterdictionSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_LINES_AT_LEVEL_ONE_TYPE_PATTERN" select="'LevelOneLineQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_LINES_AT_LEVEL_TWO_TYPE_PATTERN" select="'LevelTwoLineQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_LINES_AT_LEVEL_THREE_TYPE_PATTERN" select="'LevelThreeLineQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_LINES_AT_LEVEL_FOUR_TYPE_PATTERN" select="'LevelFourLineQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_LITTER_PATIENTS_TYPE_PATTERN" select="'LitterPatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MAIL_UNITS_TYPE_PATTERN" select="'MailUnitQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MARINE_CORPS_PATIENTS_TYPE_PATTERN" select="'MarineCorpsPatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MINES_BY_TYPE_TYPE_PATTERN" select="'TypeOfMineQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MINES_DETECTED_TYPE_PATTERN" select="'MineDetectedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MINES_LAID_TYPE_PATTERN" select="'MineLaidQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MINES_TO_BE_LAID_TYPE_PATTERN" select="'MineToBeLaidQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MISSILES_TYPE_PATTERN" select="'MissileQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MISSING_MISSIONS_TYPE_PATTERN" select="'MissingMissionQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MUNITIONS_OR_AIRCRAFT_TYPE_PATTERN" select="'MunitionOrAircraftQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_NAVY_PATIENTS_TYPE_PATTERN" select="'NavyPatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_NETWORK_ENABLED_WEAPONS_ABOARD_PLATFORM_TYPE_PATTERN" select="'NetworkEnabledWeaponsAboardPlatformQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_OFFENSIVE_COUNTERAIR_SORTIES_TYPE_PATTERN" select="'OffensiveCounterAirSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_OTHER_CIVILIAN_PATIENTS_TYPE_PATTERN" select="'OtherCivilianPatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_OTHER_PATIENTS_TYPE_PATTERN" select="'OtherPatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_OTHER_SORTIES_TYPE_PATTERN" select="'OtherSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PASSENGERS_OFF_NEXT_STATION_TYPE_PATTERN" select="'PassengerOffNextStationQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PASSENGERS_ON_THIS_STATION_TYPE_PATTERN" select="'PassengerOnThisStationQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PROFESSIONAL_FILLERS_AVAILABLE_TYPE_PATTERN" select="'ProfessionalFillerAvailableQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PROFESSIONAL_FILLERS_REQUIRED_TYPE_PATTERN" select="'ProfessionalFillerRequiredQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_RECEIVING_AIRCRAFT_TYPE_PATTERN" select="'ReceivingAircraftQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_RECEIVING_CHANNELS_TYPE_PATTERN" select="'ReceivingChannelQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_RECONNAISSANCE_SORTIES_TYPE_PATTERN" select="'ReconnaissanceSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SEARCH_AND_RESCUE_SORTIES_TYPE_PATTERN" select="'SearchAndRescueSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SEATS_AVAILABLE_THIS_STATION_TYPE_PATTERN" select="'AvailableStationSeatQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SORTIES_AVAILABLE_TYPE_PATTERN" select="'AvailableSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SORTIES_FLOWN_TYPE_PATTERN" select="'SortieFlownQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SORTIES_SCHEDULED_TYPE_PATTERN" select="'SortieScheduledQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SORTIES_SUCCESSFUL_TYPE_PATTERN" select="'SuccessfulSortieQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPACE_AVAILABLE_PASSENGERS_ABOARD_TYPE_PATTERN" select="'PassengerAboardSpaceAvailableQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPACE_AVAILABLE_PASSENGERS_OFF_NEXT_STATION_TYPE_PATTERN" select="'PassengerOffNextStationSpaceAvailableQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPACE_REQUIRED_PASSENGERS_OFF_NEXT_STATION_TYPE_PATTERN" select="'PassengerOffNextStationSpaceRequiredQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPACE_REQUIRED_PASSENGERS_THIS_STATION_TYPE_PATTERN" select="'PassengerThisStationSpaceRequiredQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TARGETS_DESCRIBED_TYPE_PATTERN" select="'DescribeTargetQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TRANSMITTING_CHANNELS_TYPE_PATTERN" select="'TransmittingChannelQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_US_CIVILIAN_PATIENTS_TYPE_PATTERN" select="'USCivilianPatientQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_VEHICLES_TYPE_PATTERN" select="'VehicleQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_WEAPON_ROUNDS_TYPE_PATTERN" select="'WeaponRoundQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ORDERED_TYPE_PATTERN" select="'OrderedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_REMAINING_TYPE_PATTERN" select="'RemainingQuantity'"/>
	<xsl:variable name="MTF_NUMBER_TLAM_REMAINING_TYPE_PATTERN" select="'TlamRemainingQuantity'"/>
	<xsl:variable name="MTF_OBGYN_BED_COUNT_TYPE_PATTERN" select="'OBGYNBedQuantity'"/>
	<xsl:variable name="MTF_OBGYN_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'ObgynAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_OBGYN_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'ObgynRequiredPatientBedQuantity'"/>
	<xsl:variable name="MTF_OPERATING_FREQUENCY_MEASURED_IN_HERTZ_TYPE_PATTERN" select="'OperatingFrequencyMeasure'"/>
	<xsl:variable name="MTF_OPTHALMOLOGY_BED_COUNT_TYPE_PATTERN" select="'OphthalmologyBedQuantity'"/>
	<xsl:variable name="MTF_OPTHALMOLOGY_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'OphthalmologyAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_OPTHALMOLOGY_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'OphthalmologyRequiredPatientBedQuantity'"/>
	<xsl:variable name="MTF_ORAL_MAXILLOFACIAL_BED_COUNT_TYPE_PATTERN" select="'OralMaxillofacialBedQuantity'"/>
	<xsl:variable name="MTF_ORAL_MAXILLOFACIAL_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'OralMaxillofacialAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_ORAL_MAXILLOFACIAL_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'OralMaxillofacialRequiredPatientBedQuantity'"/>
	<xsl:variable name="MTF_ORDER_OF_EVENTS_TYPE_PATTERN" select="'OrderOfEventNumber'"/>
	<xsl:variable name="MTF_ORTHOPEDIC_BED_COUNT_TYPE_PATTERN" select="'OrthopedicBedQuantity'"/>
	<xsl:variable name="MTF_ORTHOPEDIC_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'OrthopedicAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_ORTHOPEDIC_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'OrthopedicRequiredPatientBedQuantity'"/>
	<xsl:variable name="MTF_OTHER_OPERATIONALLY_READY_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN" select="'OtherOperationallyReadyMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_OTHER_READY_PRIMARY_DUTY_CREWS_TYPE_PATTERN" select="'OtherReadyPrimaryDutyCrewQuantity'"/>
	<xsl:variable name="MTF_OVERRUN_WIDTH_IN_METERS_TYPE_PATTERN" select="'OverrunWidthMeasure'"/>
	<xsl:variable name="MTF_PASSENGER_COUNT_TYPE_PATTERN" select="'PassengerQuantity'"/>
	<xsl:variable name="MTF_PEDIATRIC_BED_COUNT_TYPE_PATTERN" select="'PediatricBedQuantity'"/>
	<xsl:variable name="MTF_PEDIATRIC_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'PediatricAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_PEDIATRIC_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'PediatricRequiredPatientsBedsQuantity'"/>
	<xsl:variable name="MTF_PERCENT_DAMAGED_TYPE_PATTERN" select="'DamagePercent'"/>
	<xsl:variable name="MTF_PERCENT_DESTROYED_TYPE_PATTERN" select="'DestroyedPercent'"/>
	<xsl:variable name="MTF_PERCENT_ILLUMINATION_TYPE_PATTERN" select="'IlluminationPercent'"/>
	<xsl:variable name="MTF_PERCENT_IN_REPAIR_POWER_TYPE_PATTERN" select="'RepairPowerPercent'"/>
	<xsl:variable name="MTF_PERCENT_NONOPERATIONAL_POWER_TYPE_PATTERN" select="'NonOperationalPowerPercent'"/>
	<xsl:variable name="MTF_PERCENT_OF_COVERAGE_TYPE_PATTERN" select="'CoveragePercent'"/>
	<xsl:variable name="MTF_PERCENT_OF_MINE_BURIED_TYPE_PATTERN" select="'MineBuriedPercent'"/>
	<xsl:variable name="MTF_PERCENT_OF_REQUIRED_BASE_WING_WRM_FUEL_ON_HAND_TYPE_PATTERN" select="'RequiredBaseWingWrmFuelOnHandPercent'"/>
	<xsl:variable name="MTF_PERCENT_OF_REQUIRED_CHAFF_AVAILABLE_TYPE_PATTERN" select="'RequiredChaffAvailablePercent'"/>
	<xsl:variable name="MTF_PERCENT_OF_REQUIRED_FLARES_AVAILABLE_TYPE_PATTERN" select="'RequiredFlaresAvailablePercent'"/>
	<xsl:variable name="MTF_PERCENT_OF_REQUIRED_LANTIRN_NAV_PODS_AVAILABLE_TYPE_PATTERN" select="'RequiredLantirnNavPodsAvailablePercent'"/>
	<xsl:variable name="MTF_PERCENT_OF_REQUIRED_LANTIRN_TARGET_PODS_AVAILABLE_TYPE_PATTERN" select="'RequiredLantirnTargetPodsAvailablePercent'"/>
	<xsl:variable name="MTF_PERCENT_OF_REQUIRED_LASER_PODS_AVAILABLE_TYPE_PATTERN" select="'RequiredLaserPodsAvailablePercent'"/>
	<xsl:variable name="MTF_PERCENT_OF_REQUIRED_MISSLES_AVAILABLE_TYPE_PATTERN" select="'RequiredMissileAvailablePercent'"/>
	<xsl:variable name="MTF_PERCENT_OPERATIONAL_POWER_TYPE_PATTERN" select="'OperationalPowerPercent'"/>
	<xsl:variable name="MTF_PERCENT_REPAIRABLE_POWER_TYPE_PATTERN" select="'RepairablePowerPercent'"/>
	<xsl:variable name="MTF_PERCENT_REQUIRED_TANK_RACKS_ADAPTERS_PYLONS_AVAILABLE_TYPE_PATTERN" select="'RequiredTankRackAdapterPylonAvailablePercent'"/>
	<xsl:variable name="MTF_AREA_SEARCHED_COVERED_TYPE_PATTERN" select="'SearchAreaCoveredPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_AUTHORIZED_NBC_EQUIPMENT_ON_HAND_TYPE_PATTERN" select="'AuthorizedNbcEquipmentOnHandPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_BREAKERS_TYPE_PATTERN" select="'BreakersPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_DATA_TYPE_PATTERN" select="'DataPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_JAMMING_EFFECTIVENESS_TYPE_PATTERN" select="'JammingEffectivenessPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_MINE_FIELD_COMPLETED_TYPE_PATTERN" select="'MineFieldCompletedPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_ON_HAND_EQUIPMENT_MISSION_CAPABLE_TYPE_PATTERN" select="'OnHandEquipmentMissionCapablePercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_ON_HAND_PACING_ITEMS_MISSION_CAPABLE_TYPE_PATTERN" select="'OnHandPacingItemsMissionCapablePercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_OPERATIONAL_BEDS_DEPLOYED_TYPE_PATTERN" select="'DeployedOperationalBedPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_REQUIRED_EQUIPMENT_MISSION_CAPABLE_TYPE_PATTERN" select="'RequiredEquipmentMissionCapablePercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_REQUIRED_PACING_ITEMS_MISSION_CAPABLE_TYPE_PATTERN" select="'RequiredPacingItemsMissionCapablePercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_TOTAL_CAPACITY_HELD_TYPE_PATTERN" select="'TotalCapacityHeldPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_WEAPONS_TYPE_PATTERN" select="'WeaponPercent'"/>
	<xsl:variable name="MTF_PERSONNEL_ONBOARD_TYPE_PATTERN" select="'PersonnelOnBoardQuantity'"/>
	<xsl:variable name="MTF_PERSONNEL_RECOVERED_TYPE_PATTERN" select="'PersonnelRecoveredQuantity'"/>
	<xsl:variable name="MTF_PERSONNEL_TURNOVER_PERCENTAGE_TYPE_PATTERN" select="'PersonnelTurnoverPercent'"/>
	<xsl:variable name="MTF_PLAN_NAVIGATION_ERROR_IN_YARDS_TYPE_PATTERN" select="'PlanNavigationErrorMeasure'"/>
	<xsl:variable name="MTF_PLANNED_SUSTAINED_THREAT_OF_MINE_FIELD_IN_DAYS_TYPE_PATTERN" select="'PlannedSustainedMineFieldThreatDuration'"/>
	<xsl:variable name="MTF_POSSESSED_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN" select="'MajorEquipmentPossessedQuantity'"/>
	<xsl:variable name="MTF_PRIMARY_DUTY_CREWS_ALLOCATED_TYPE_PATTERN" select="'PrimaryDutyCrewAllocatedQuantity'"/>
	<xsl:variable name="MTF_PRIMARY_DUTY_CREWS_AUTHORIZED_TYPE_PATTERN" select="'PrimaryDutyCrewAuthorizedQuantity'"/>
	<xsl:variable name="MTF_PRIMARY_DUTY_CREWS_FORMED_TYPE_PATTERN" select="'PrimaryDutyCrewFormedQuantity'"/>
	<xsl:variable name="MTF_PROBABILITY_OF_DETECTION_IN_PERCENT_TYPE_PATTERN" select="'DetectionProbabilityPercent'"/>
	<xsl:variable name="MTF_PSYCHIATRIC_BED_COUNT_TYPE_PATTERN" select="'PsychiatricBedQuantity'"/>
	<xsl:variable name="MTF_PSYCHIATRIC_BED_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'PsychiatricAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_PSYCHIATRIC_PATIENTS_REQUIRING_BED_TYPE_PATTERN" select="'PsychiatricRequiredPatientBedQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_ITEMS_AUTHORIZED_TYPE_PATTERN" select="'AuthorizedItemQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_ITEMS_ON_HAND_TYPE_PATTERN" select="'OnHandItemQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_ITEMS_REQUIRED_TYPE_PATTERN" select="'RequiredItemQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_NBC_SHORTFALL_EQUIPMENT_AUTHORIZED_TYPE_PATTERN" select="'AuthorizedNbcShortfallEquipmentQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_NBC_SHORTFALL_EQUIPMENT_ITEMS_ON_HAND_TYPE_PATTERN" select="'OnHandNbcShortfallEquipmentItemQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_NBC_SHORTFALL_EQUIPMENT_REQUIRED_TYPE_PATTERN" select="'RequiredNbcShortfallEquipmentQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_ORDNANCE_TYPE_PATTERN" select="'OrdnanceQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_PACING_ITEM_AUTHORIZED_TYPE_PATTERN" select="'AuthorizedItemPacingQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_PACING_ITEM_ON_HAND_TYPE_PATTERN" select="'OnHandItemPacingQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_PACING_ITEM_REQUIRED_TYPE_PATTERN" select="'RequiredItemPacingQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_REPORTED_UTILIZED_TYPE_PATTERN" select="'UtilizedReportQuantity'"/>
	<xsl:variable name="MTF_RANGE_PROBABLE_ERROR_IN_METERS_TYPE_PATTERN" select="'ProbableRangeErrorMeasure'"/>
	<xsl:variable name="MTF_RAY_CAS_VTRACKS_TYPE_PATTERN" select="'RayCasVTrackQuantity'"/>
	<xsl:variable name="MTF_MINE_DISPOSAL_WEAPONS_CHARGES_TYPE_PATTERN" select="'RemainingMineDisposalWeaponsChargesQuantity'"/>
	<xsl:variable name="MTF_REPETITION_NUMBER_TYPE_PATTERN" select="'RepetitionQuantity'"/>
	<xsl:variable name="MTF_RUNWAY_WEIGHT_BEARING_CAPACITY_IN_THOUANDS_OF_POUNDS_TYPE_PATTERN" select="'RunwayWeightBearingCapacityThousandMeasure'"/>
	<xsl:variable name="MTF_SERIAL_NUMBER_OF_QUALIFIER_TYPE_PATTERN" select="'SerialNumberMessageQualifier'"/>
	<xsl:variable name="MTF_SERIAL_NUMBER_OF_REQUEST_TYPE_PATTERN" select="'SerialNumberSupportRequest'"/>
	<xsl:variable name="MTF_SI_TRACKS_TYPE_PATTERN" select="'SITrackQuantity'"/>
	<xsl:variable name="MTF_SORTIE_GENERATION_CAPABILITY_PERCENTAGE_TYPE_PATTERN" select="'SortieGenerationCapabilityPercent'"/>
	<xsl:variable name="MTF_SORTIE_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'SortieID'"/>
	<xsl:variable name="MTF_SPA_TWENTY_FIVE_TRACKS_TYPE_PATTERN" select="'SpaTwentyFiveTrackQuantity'"/>
	<xsl:variable name="MTF_SPACE_TRACKS_TYPE_PATTERN" select="'SpaceTrackSID'"/>
	<xsl:variable name="MTF_SPINAL_CORD_INJURY_BED_COUNT_TYPE_PATTERN" select="'SpinalCordInjuryBedQuantity'"/>
	<xsl:variable name="MTF_SPINAL_CORD_INJURY_BED_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'SpinalCordInjuryAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_SPINAL_CORD_INJURY_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'SpinalCordInjuryRequiredPatientBedQuantity'"/>
	<xsl:variable name="MTF_STATION_NUMBER_TYPE_PATTERN" select="'StationNumber'"/>
	<xsl:variable name="MTF_STERILIZATION_TIME_TYPE_PATTERN" select="'SterilizationTimeMeasure'"/>
	<xsl:variable name="MTF_TABLE_POSITION_TYPE_PATTERN" select="'TablePositionValue'"/>
	<xsl:variable name="MTF_THORACIC_SURGERY_BED_COUNT_TYPE_PATTERN" select="'ThoracicSurgeryBedQuantity'"/>
	<xsl:variable name="MTF_THORACIC_SURGERY_BED_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'ThoracicSurgeryAssignedPatientBedQuantity'"/>
	<xsl:variable name="MTF_THORACIC_SURGERY_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'ThoracicSurgeryRequiredPatientBedQuantity'"/>
	<xsl:variable name="MTF_THREAT_ANGLE_TYPE_PATTERN" select="'ThreatAngleNumber'"/>
	<xsl:variable name="MTF_THREAT_PERCENT_TYPE_PATTERN" select="'ThreatPercent'"/>
	<xsl:variable name="MTF_THREAT_MUNITIONS_PERCENT_TYPE_PATTERN" select="'ThreatMunitionPercent'"/>
	<xsl:variable name="MTF_TIME_LATE_TYPE_PATTERN" select="'TimeLateMeasure'"/>
	<xsl:variable name="MTF_TOTAL_NUMBER_OF_SERIALS_TYPE_PATTERN" select="'TotalSerialsQuantity'"/>
	<xsl:variable name="MTF_TOTAL_NUMBER_OF_SLOTS_BOUYS_CARRIED_TYPE_PATTERN" select="'TotalCarriedSlotBouysQuantity'"/>
	<xsl:variable name="MTF_TOTAL_NUMBER_OF_TURNS_TYPE_PATTERN" select="'TotalTurnQuantity'"/>
	<xsl:variable name="MTF_TOTAL_PASSENGERS_ABOARD_TYPE_PATTERN" select="'TotalPassengerAboardQuantity'"/>
	<xsl:variable name="MTF_TOTAL_PERSONNEL_PERCENTAGE_TYPE_PATTERN" select="'TotalPersonnelPercent'"/>
	<xsl:variable name="MTF_TOTAL_REPORTABLE_EQUIPMENT_LINE_ITEMS_TYPE_PATTERN" select="'TotalReportableEquipmentLineItemQuantity'"/>
	<xsl:variable name="MTF_TOTAL_SEATS_ABOARD_TYPE_PATTERN" select="'TotalSeatsAboardQuantity'"/>
	<xsl:variable name="MTF_TOTAL_SPACE_REQUIRED_PASSENGERS_ABOARD_TYPE_PATTERN" select="'TotalPassengerSpaceRequiredAboardQuantity'"/>
	<xsl:variable name="MTF_TOTAL_TIME_TO_RECOVER_GEAR_TYPE_PATTERN" select="'TotalRecoverGearTimeMeasure'"/>
	<xsl:variable name="MTF_TOTAL_TIME_TO_STREAM_GEAR_TYPE_PATTERN" select="'TotalStreamGearTimeMeasure'"/>
	<xsl:variable name="MTF_TOTAL_TRANSIT_TIME_TO_AND_FROM_OPAREA_TYPE_PATTERN" select="'TotalOpareaTransitTimeMeasure'"/>
	<xsl:variable name="MTF_TOTAL_TURN_TIME_TYPE_PATTERN" select="'TotalTurnTimeMeasure'"/>
	<xsl:variable name="MTF_UNIQUE_COMMUNICATIONS_CHANNEL_NUMBER_TYPE_PATTERN" select="'UniqueCommunicationChannelQuantity'"/>
	<xsl:variable name="MTF_UNIT_TRACKS_TYPE_PATTERN" select="'UnitTrackQuantity'"/>
	<xsl:variable name="MTF_VICTUALLING_STORES_ENDURANCE_IN_DAYS_TYPE_PATTERN" select="'VictualStoreEnduranceMeasure'"/>
	<xsl:variable name="MTF_WATER_DEPTH_METERS_TYPE_PATTERN" select="'WaterDepthMeasure'"/>
	<xsl:variable name="MTF_WAYPOINT_TIME_ON_STATION_TYPE_PATTERN" select="'StationWayPointTimeMeasure'"/>
	<xsl:variable name="MTF_WEATHER_DOWN_TIME_TYPE_PATTERN" select="'WeatherDownTimeDuration'"/>
	<xsl:variable name="MTF_WRSK_BLSS_FILL_PERCENT_TYPE_PATTERN" select="'WrskBlssFillPercent'"/>
	<xsl:variable name="MTF_ABSOLUTE_HUMIDITY_TYPE_PATTERN" select="'AbsoluteHumidityMeasure'"/>
	<xsl:variable name="MTF_AEW_BARRIER_DESIGNATOR_TYPE_PATTERN" select="'AewBarrierDesignatorNumber'"/>
	<xsl:variable name="MTF_AIRCRAFT_ALLOCATED_TO_A_MISSION_TYPE_PATTERN" select="'MissionAllocatedAircraftQuantity'"/>
	<xsl:variable name="MTF_AVERAGE_NUMBER_OF_WORDS_PER_MESSAGE_TYPE_PATTERN" select="'AverageWordsPerMessageQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_DETECTING_SENSORS_TYPE_PATTERN" select="'DetectionSensorsQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_MAJOR_EQUIPMENT_ASSIGNED_TYPE_PATTERN" select="'AssignedMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_MAJOR_EQUIPMENT_DEPLOYABLE_TYPE_PATTERN" select="'DeployableMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_MAJOR_EQUIPMENT_DEPLOYED_TYPE_PATTERN" select="'DeployedMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_MAJOR_EQUIPMENT_OPERATIONAL_READY_AVAILABLE_TYPE_PATTERN" select="'OperationalReadyAvailableMajorEquipmentQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_MAJOR_MARCH_GROUPS_IN_A_CONVOY_TYPE_PATTERN" select="'MajorConvoyMarchGroupsQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_SERIALS_IN_A_CONVOY_TYPE_PATTERN" select="'ConvoySerialsQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_SHIPS_PASSED_TYPE_PATTERN" select="'ShipsPassedQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_SONOBOUY_ROWS_TYPE_PATTERN" select="'SonoBouyRowQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_SONOBOUYS_PER_ROW_TYPE_PATTERN" select="'SonoBouysPerRowQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_UNEXPLODED_ORDNANCE_TYPE_PATTERN" select="'UnExplodedOrdnanceQuantity'"/>
	<xsl:variable name="MTF_CROSSOVER_ZONE_WIDTH_IN_NM_TYPE_PATTERN" select="'CrossOverZoneWidthMeasure'"/>
	<xsl:variable name="MTF_DAYS_REQUIRED_TO_COMPLETE_TRAINING_TYPE_PATTERN" select="'DaysRequiredToCompleteTrainingDuration'"/>
	<xsl:variable name="MTF_DAYS_SUPPORTABLE_TYPE_PATTERN" select="'DaysSupportableDuration'"/>
	<xsl:variable name="MTF_DIVE_ANGLE_OF_ATTACK_TYPE_PATTERN" select="'DiveAttackAngleMeasure'"/>
	<xsl:variable name="MTF_DURATION_OF_FIRE_TYPE_PATTERN" select="'FireDuration'"/>
	<xsl:variable name="MTF_EFFECTS_PERCENT_DAMAGE_REQUIRED_TYPE_PATTERN" select="'EffectsDamageRequiredPercent'"/>
	<xsl:variable name="MTF_ELINT_NOTATION_CONFIDENCE_PRIMARY_TYPE_PATTERN" select="'PrimaryElintNotationConfidenceNumber'"/>
	<xsl:variable name="MTF_EQUIPMENT_OPERATION_PLANS_COUNT_TYPE_PATTERN" select="'TotalEquipmentOperationPlanQuantity'"/>
	<xsl:variable name="MTF_ESTIMATED_COUNT_OF_SHIP_FROM_TYPE_TYPE_PATTERN" select="'LowRangeEstimatedShipQuantity'"/>
	<xsl:variable name="MTF_ESTIMATED_COUNT_OF_SHIP_TO_TYPE_TYPE_PATTERN" select="'HighRangeEstimatedShipQuantity'"/>
	<xsl:variable name="MTF_ESTIMATED_NUMBER_NON_MINE_MINE_LIKE_OBJECTS_TYPE_PATTERN" select="'NonMineAndMineLikeObjectsEstimatedNumber'"/>
	<xsl:variable name="MTF_FIRE_PLAN_PHASE_LENGTH_IN_MINUTES_TYPE_PATTERN" select="'FirePlanPhaseLengthMeasure'"/>
	<xsl:variable name="MTF_FREQUENCY_SEPARATION_TYPE_PATTERN" select="'FrequencySeparationPercent'"/>
	<xsl:variable name="MTF_HELICOPTER_LANDING_AREA_SLOPE_TYPE_PATTERN" select="'HelicopterLandingAreaSlopePercent'"/>
	<xsl:variable name="MTF_LANGUAGE_INDICATOR_CODE_ASSIGNED_STRENGTH_TYPE_PATTERN" select="'AssignedStrengthLanguageIndicatorCode'"/>
	<xsl:variable name="MTF_LANGUAGE_INDICATOR_CODE_QUALIFIED_STRENGTH_TYPE_PATTERN" select="'QualifiedStrengthLanguageIndicatorCode'"/>
	<xsl:variable name="MTF_LANGUAGE_INDICATOR_CODE_REQUIRED_STRENGTH_TYPE_PATTERN" select="'RequiredStrengthLanguageIndicatorCode'"/>
	<xsl:variable name="MTF_LINK_22_MINI_SLOT_TYPE_PATTERN" select="'Link22MiniSlotQuantity'"/>
	<xsl:variable name="MTF_LOW_RATE_MULTIPLEXER_RATE_IN_KILOBITS_PER_SECOND_TYPE_PATTERN" select="'LowRateMultiplexerRate'"/>
	<xsl:variable name="MTF_MAD_SENSE_SETTING_TYPE_PATTERN" select="'MadSenseSettingValue'"/>
	<xsl:variable name="MTF_MASN_IDENTIFIER_TYPE_PATTERN" select="'MasnID'"/>
	<xsl:variable name="MTF_MARITIME_WEAPON_TYPE_SERIAL_NUMBER_TYPE_PATTERN" select="'MaritimeWeaponSerialNumber'"/>
	<xsl:variable name="MTF_MAXIMUM_ALLOWABLE_CHEMICAL_EFFECT_TYPE_PATTERN" select="'MaximumAllowableChemicalEffectValue'"/>
	<xsl:variable name="MTF_MAXIMUM_GEODETIC_POSITION_QUALITY_QPG_TYPE_PATTERN" select="'MaximumGeodeticPositionQualityQpgNumber'"/>
	<xsl:variable name="MTF_MAXIMUM_NUMBER_OF_DATA_LINK_TRACK_BLOCKS_TYPE_PATTERN" select="'MaximumDataLinkTrackBlockQuantity'"/>
	<xsl:variable name="MTF_MAXIMUM_OPERATIONAL_MISSILES_AVAILABLE_THIS_SALVO_TYPE_PATTERN" select="'MaximumOperationalMissilesAvailableThisSalvoQuantity'"/>
	<xsl:variable name="MTF_MAXIMUM_OPERATIONAL_MISSILES_BY_TYPE_THIS_SALVO_TYPE_PATTERN" select="'MaximumOperationalMissilesByTypeThisSalvoQuantity'"/>
	<xsl:variable name="MTF_MAXIMUM_TRACK_QUALITY_TQ_TYPE_PATTERN" select="'MaximumTrackQualityTQNumber'"/>
	<xsl:variable name="MTF_MEASURED_SIGNAL_STRENGTH_TYPE_PATTERN" select="'SignalStrengthMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_ALLOWABLE_CHECMICAL_EFFECTS_TYPE_PATTERN" select="'MinimumAllowableChemicalEffectValue'"/>
	<xsl:variable name="MTF_NEAR_SURFACE_TYPE_PATTERN" select="'NearSurfaceMeasure'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_AVAILABLE_FOR_SPECIAL_MISSION_TYPE_PATTERN" select="'AvailableSpecialMissionAircraftQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_EMBARKED_TYPE_PATTERN" select="'EmbarkedAircraftQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_IN_CELL_TYPE_PATTERN" select="'AircraftInCellQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_REPORTED_TYPE_PATTERN" select="'AircraftReportedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_REQUIRED_FOR_SPECIAL_MISSION_TYPE_PATTERN" select="'RequiredSpecialMissionAircraftQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_TYPE_PATTERN" select="'AircraftQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_BREAKERS_TYPE_PATTERN" select="'BreakerQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_BRIDGES_TYPE_PATTERN" select="'BridgeQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CONTACTS_TYPE_PATTERN" select="'ContactsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_COOPERATING_FORCES_TYPE_PATTERN" select="'CooperatingForcesQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CREWS_DEPLOYED_TYPE_PATTERN" select="'CrewsDeployedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CRYPTOGRAPHIC_EQUIPMENT_ITEMS_TYPE_PATTERN" select="'CryptographicEquipmentItemQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CULVERTS_TYPE_PATTERN" select="'CulvertQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_CYLINDERS_TYPE_PATTERN" select="'CylinderQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DANBUOYS_TYPE_PATTERN" select="'DanbuoysQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DEVICES_TYPE_PATTERN" select="'DeviceQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DUAL_PURPOSE_ICM_WARHEADS_TYPE_PATTERN" select="'DualPurposeICMWarheadQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_EWO_WSOS_ASSIGNED_TYPE_PATTERN" select="'AssignedEwoWsosQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_FAILURES_TYPE_PATTERN" select="'FailureQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_FERRIES_TYPE_PATTERN" select="'FerryQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_FIRE_UNITS_IN_EFFECT_TYPE_PATTERN" select="'FireUnitsInEffectQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_GRADUATED_COMBAT_CAPABILITY_LEVEL_A_CREWS_TYPE_PATTERN" select="'GraduatedCombatCapabilityLevelACrewQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_GRADUATED_COMBAT_CAPABILITY_LEVEL_B_CREWS_TYPE_PATTERN" select="'GraduatedCombatCapabilityLevelBCrewQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_GRADUATED_COMBAT_CAPABILITY_LEVEL_C_CREWS_TYPE_PATTERN" select="'GraduatedCombatCapabilityLevelCCrewQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_HELOS_IN_OPERATION_TYPE_PATTERN" select="'HelosInOperationQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_HIGH_EXPLOSIVE_WARHEADS_TYPE_PATTERN" select="'HighExplosiveWarheadQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_HIGH_INTEREST_CONTACTS_DETECTED_TYPE_PATTERN" select="'HighInterestContactsDetectedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_INITIAL_SALVOS_VOLLEYS_TYPE_PATTERN" select="'InitialSalvosVolleysQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MAIN_MISSILE_ASSEMBLIES_TYPE_PATTERN" select="'MainMissileAssembliesQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MESSAGES_RECEIVED_BY_GROUND_STATION_TYPE_PATTERN" select="'GroundStationMessageReceivedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MESSAGES_RECEIVED_BY_UNIT_TYPE_PATTERN" select="'UnitMessageReceivedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MESSAGES_SENT_TO_GROUND_STATION_TYPE_PATTERN" select="'GroundStationMessageSentQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MESSAGES_SENT_TO_UNIT_TYPE_PATTERN" select="'UnitMessageSentQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MINE_LAYING_UNITS_AVAILABLE_TYPE_PATTERN" select="'AvailableMineLayingUnitQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MISSING_UPDATE_SEQUENCE_NUMBERS_TYPE_PATTERN" select="'MissingUpdateSequenceNumbersQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MISSION_READY_CREWS_AVAILABLE_TYPE_PATTERN" select="'AvailableMissionReadyCrewQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_NONAIRCRAFT_WEAPON_LAUNCH_PLATFORMS_TYPE_PATTERN" select="'NonAircraftWeaponLaunchPlatformQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_NUCLEAR_WARHEADS_TYPE_PATTERN" select="'NuclearWarheadQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ORBITS_TYPE_PATTERN" select="'OrbitQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_OVERHEAD_MISSION_CREWS_TYPE_PATTERN" select="'OverheadMissionCrewQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PALLET_POSITIONS_AVAILABLE_NEXT_STATION_TYPE_PATTERN" select="'PalletPositionsAvailableNextStationQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PALLET_POSITIONS_USED_THIS_STATION_TYPE_PATTERN" select="'PalletPositionsUsedThisStationQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PIECES_TYPE_PATTERN" select="'PiecesQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PILOTS_ASSIGNED_TYPE_PATTERN" select="'AssignedPilotQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PRODUCTS_TYPE_PATTERN" select="'ProductQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_RADIO_EQUIPMENT_ITEMS_TYPE_PATTERN" select="'RadioEquipmentItemQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_RETASKED_INFLIGHT_TARGETS_IMAGED_TYPE_PATTERN" select="'RetaskedInFlightTargetsImagedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_RUNS_ALONG_TRACK_TYPE_PATTERN" select="'RunsAlongTrackQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SATELLITE_EQUIPMENT_ITEMS_TYPE_PATTERN" select="'SatelliteEquipmentItemQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SECURE_VOICE_EQUIPMENT_ITEMS_TYPE_PATTERN" select="'SecureVoiceEquipmentItemQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SHIP_TYPE_TYPE_PATTERN" select="'ShipTypeQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SHIPS_IN_GROUP_TYPE_PATTERN" select="'ShipsInGroupQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SHIPS_TYPE_PATTERN" select="'ShipQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPARE_ENGINES_AUTHORIZED_TYPE_PATTERN" select="'AuthorizedSpareEnginesQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPARE_ENGINES_ON_HAND_TO_THE_UNIT_TYPE_PATTERN" select="'UnitOnHandSpareEngineQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPARE_ENGINES_REQUIRED_BY_UTC_TYPE_PATTERN" select="'UtcRequiredSpareEngineQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPARE_ENGINES_SERVICEABLE_TO_THE_UNIT_TYPE_PATTERN" select="'UnitServiceableSpareEngineQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPECIAL_AIRCRAFT_FLIGHT_CREWS_ASSIGNED_TYPE_PATTERN" select="'AssignedSpecialAircraftFlightCrewsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPECIAL_AIRCRAFT_MISSION_CREWS_ASSIGNED_TYPE_PATTERN" select="'AssignedSpecialAircraftMissionCrewsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPECIAL_MISSION_CREWS_AVAILABLE_TYPE_PATTERN" select="'AvailableSpecialMissionCrewsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SPECIAL_MISSION_CREWS_REQUIRED_TYPE_PATTERN" select="'RequiredSpecialMissionCrewsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SUBORDINATE_UNITS_ATC5_TYPE_PATTERN" select="'C5SubordinateUnitQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SUBSEQUENT_SALVOS_VOLLEYS_TYPE_PATTERN" select="'SubsequentSalvosVolleysQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TANKERS_REQUESTED_TYPE_PATTERN" select="'RequestedTankerQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TARGETS_IMAGED_TYPE_PATTERN" select="'TargetImagedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TARGETS_OF_OPPORTUNITY_IMAGED_TYPE_PATTERN" select="'TargetsOfOpportunityImagedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TARGETS_OF_OPPORTUNITY_TYPE_PATTERN" select="'TargetsOfOpportunityQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TARGETS_RETASKED_IN_FLIGHT_TYPE_PATTERN" select="'TargetsRetaskedInFlightQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TARGETS_TASKED_TYPE_PATTERN" select="'TargetsTaskedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TUNNELS_TYPE_PATTERN" select="'TunnelQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_VULNERABLE_POINTS_TYPE_PATTERN" select="'VulnerablePointsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_WEAPONS_PER_WEAPONS_YSTEM_OR_PLATFORM_TYPE_PATTERN" select="'WeaponsPerWeaponSystemOrPlatformQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_WEAPONS_TYPE_PATTERN" select="'WeaponQuantity'"/>
	<xsl:variable name="MTF_OPERATING_SUITES_TYPE_PATTERN" select="'MedicalOperatingSuiteQuantity'"/>
	<xsl:variable name="MTF_PERCENT_EFFECTIVE_TYPE_PATTERN" select="'EffectivePercent'"/>
	<xsl:variable name="MTF_PERCENT_CONSUMED_DAILY_TYPE_PATTERN" select="'DailyConsumptionPercent'"/>
	<xsl:variable name="MTF_PLATFORM_TURN_TIME_IN_MINUTES_TYPE_PATTERN" select="'PlatformTurnTimeDuration'"/>
	<xsl:variable name="MTF_RECCE_DAYS_PRIOR_OK_TYPE_PATTERN" select="'ReconPriorOkDuration'"/>
	<xsl:variable name="MTF_REQUEST_NUMBER_TARGET_CRITERIA_TYPE_PATTERN" select="'TargetCriteriaRequestNumber'"/>
	<xsl:variable name="MTF_REQUISITION_PRIORITY_TYPE_PATTERN" select="'RequisitionPriorityNumber'"/>
	<xsl:variable name="MTF_SADLAIRKEYZEROTOEIGHTYNINE_TYPE_PATTERN" select="'SadlAirKeyZeroToEightyNineImage'"/>
	<xsl:variable name="MTF_SALVO_INTERVAL_IN_MINUTES_TYPE_PATTERN" select="'SalvoIntervalDuration'"/>
	<xsl:variable name="MTF_SHIP_COUNT_OF_MINE_TYPE_PATTERN" select="'ShipMineQuantity'"/>
	<xsl:variable name="MTF_SQUARE_SEGMENT_SIZE_IN_NM_TYPE_PATTERN" select="'SquareSegmentMeasure'"/>
	<xsl:variable name="MTF_SUBAREA_NUMERICAL_IDENTIFIER_TYPE_PATTERN" select="'SubAreaNumberID'"/>
	<xsl:variable name="MTF_SURGICAL_BACKLOG_TYPE_PATTERN" select="'SurgicalBacklogMeasure'"/>
	<xsl:variable name="MTF_TARGET_BDAREP_COUNTER_TYPE_PATTERN" select="'TargetBdarepQuantity'"/>
	<xsl:variable name="MTF_TASK_HOURS_LOST_DURING_SORTIE_TYPE_PATTERN" select="'TaskHoursLostDuringSortieDuration'"/>
	<xsl:variable name="MTF_TONE_KEY_IDENTIFIER_TYPE_PATTERN" select="'ToneKeyID'"/>
	<xsl:variable name="MTF_TOTAL_NUMBER_OF_CONTACTS_DETECTED_TYPE_PATTERN" select="'TotalContactDetectedQuantity'"/>
	<xsl:variable name="MTF_TOTAL_NUMBER_OF_SORTIES_TYPE_PATTERN" select="'TotalSortiesQuantity'"/>
	<xsl:variable name="MTF_TOTAL_PALLET_POSITIONS_AVAILABLE_TYPE_PATTERN" select="'TotalPalletPositionsAvailableQuantity'"/>
	<xsl:variable name="MTF_TOTAL_PALLETS_ABOARD_TYPE_PATTERN" select="'TotalPalletAboardQuantity'"/>
	<xsl:variable name="MTF_TOTAL_SONOBUOYS_IN_PATTERN_TYPE_PATTERN" select="'TotalSonobuoysInPatternQuantity'"/>
	<xsl:variable name="MTF_TOTAL_TURN_TIME_ONE_TO_THIRTY_MIN_TYPE_PATTERN" select="'TotalTurnTimeDuration'"/>
	<xsl:variable name="MTF_TRACK_QUALITY_DELTA_TIME_IN_SECONDS_TYPE_PATTERN" select="'TrackQualityDeltaTimeDuration'"/>
	<xsl:variable name="MTF_WAVE_PERIOD_IN_SECONDS_TYPE_PATTERN" select="'WavePeriodDuration'"/>
	<xsl:variable name="MTF_ABSENT_WITHOUT_LEAVE_TYPE_PATTERN" select="'AbsentWithoutLeaveIndicator'"/>
	<xsl:variable name="MTF_ACTUAL_KIA_TYPE_PATTERN" select="'ActualKiaQuantity'"/>
	<xsl:variable name="MTF_ACTUAL_MIA_TYPE_PATTERN" select="'ActualMiaQuantity'"/>
	<xsl:variable name="MTF_ACTUAL_WIA_TYPE_PATTERN" select="'ActualWiaQuantity'"/>
	<xsl:variable name="MTF_AMMUNITION_EXPENDED_TYPE_PATTERN" select="'AmmunitionExpendedQuantity'"/>
	<xsl:variable name="MTF_ARMING_DELAY_IN_HOURS_TYPE_PATTERN" select="'ArmingDelayDuration'"/>
	<xsl:variable name="MTF_ARRESTING_GEAR_POSITION_TYPE_PATTERN" select="'ArrestingGearPositionMeasure'"/>
	<xsl:variable name="MTF_ASSIGNED_NUMBER_OF_PERSONNEL_TYPE_PATTERN" select="'AssignedPersonnelQuantity'"/>
	<xsl:variable name="MTF_AUTHORIZED_TABLE_OF_EQUIPMENT_A_UNITS_TYPE_PATTERN" select="'AuthorizedTableOfEquipmentAUnitQuantity'"/>
	<xsl:variable name="MTF_AUTHORIZED_TABLE_OF_EQUIPMENT_B_UNITS_TYPE_PATTERN" select="'AuthorizedTableOfEquipmentBUnitQuantity'"/>
	<xsl:variable name="MTF_AUTHORIZED_TABLE_OF_EQUIPMENT_C_UNITS_TYPE_PATTERN" select="'AuthorizedTableOfEquipmentCUnitQuantity'"/>
	<xsl:variable name="MTF_ASSIGNED_STRENGTH_ADDITIONAL_SKILL_IDENTIFIER_TYPE_PATTERN" select="'AssignedStrengthAdditionalSkillID'"/>
	<xsl:variable name="MTF_AUTHORIZED_PERSONNEL_TYPE_PATTERN" select="'AuthorizedPersonnelQuantity'"/>
	<xsl:variable name="MTF_AUTHORIZED_STRENGTH_ADDITIONAL_SKILL_IDENTIFIER_TYPE_PATTERN" select="'AuthorizedStrengthAdditionalSkillID'"/>
	<xsl:variable name="MTF_AVAILABLE_NUMBER_OF_PERSONNEL_TYPE_PATTERN" select="'AvailablePersonnelQuantity'"/>
	<xsl:variable name="MTF_CAPTURED_TYPE_PATTERN" select="'CapturedQuantity'"/>
	<xsl:variable name="MTF_CASE_DEPTH_IN_FEET_TYPE_PATTERN" select="'CaseDepthMeasure'"/>
	<xsl:variable name="MTF_COLUMN_LENGTH_IN_METERS_TYPE_PATTERN" select="'ColumnLengthMeasure'"/>
	<xsl:variable name="MTF_COUNT_OF_CARGO_ITEMS_TYPE_PATTERN" select="'CargoItemQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_COMMUNICATIONS_ELECTRONICS_EQUIPMENT_TYPE_PATTERN" select="'CommunicationElectronicEquipmentQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_ENEMY_AIRCRAFT_TYPE_PATTERN" select="'EnemyAircraftQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_ENEMY_EQUIPMENT_TYPE_PATTERN" select="'EnemyEquipmentQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_ENEMY_TARGETS_TYPE_PATTERN" select="'EnemyTargetQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_EQUIPMENT_REPORTED_TYPE_PATTERN" select="'ReportedEquipmentQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_EQUIPMENT_REQUIRED_TYPE_PATTERN" select="'RequiredEquipmentQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_ITEMS_IN_A_DESIGNATED_STATUS_TYPE_PATTERN" select="'DesignatedStatusItemQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_NONCOMBATANT_EPW_DETAINED_TYPE_PATTERN" select="'NonCombatantEpwDetainedQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_PERSONNEL_IN_A_SHIP_S_COMPANY_TYPE_PATTERN" select="'ShipSCompanyPersonnelQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_PERSONNEL_TYPE_PATTERN" select="'PersonnelQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_SHIPS_TYPE_PATTERN" select="'ShipQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_SORTIES_FLOWN_TYPE_PATTERN" select="'SortiesFlownQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_TARGETS_TYPE_PATTERN" select="'TargetQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_UNITS_OR_FACILITIES_TYPE_PATTERN" select="'UnitOrFacilityQuantity'"/>
	<xsl:variable name="MTF_CUBIC_FEET_OF_MAIL_AND_OR_CARGO_ABOARD_TYPE_PATTERN" select="'MailOrCargoAboardMeasure'"/>
	<xsl:variable name="MTF_DESERTERS_TYPE_PATTERN" select="'DeserterQuantity'"/>
	<xsl:variable name="MTF_DISEASE_NONBATTLE_INJURY_LOSS_TYPE_PATTERN" select="'DiseaseNonbattleInjuryLossQuantity'"/>
	<xsl:variable name="MTF_DISTANCE_BETWEEN_REFERENCE_MARKS_TYPE_PATTERN" select="'DistanceBetweenReferenceMarksMeasure'"/>
	<xsl:variable name="MTF_DROP_ZONE_LENGTH_IN_METERS_TYPE_PATTERN" select="'DropZoneLengthMeasure'"/>
	<xsl:variable name="MTF_DROP_ZONE_WIDTH_IN_METERS_TYPE_PATTERN" select="'DropZoneWidthMeasure'"/>
	<xsl:variable name="MTF_EPW_GAINS_TYPE_PATTERN" select="'EpwGainsQuantity'"/>
	<xsl:variable name="MTF_EPW_LOSSES_TYPE_PATTERN" select="'EpwLossesQuantity'"/>
	<xsl:variable name="MTF_EPW_PREVIOUSLY_ON_HAND_TYPE_PATTERN" select="'EpwPreviouslyOnHandQuantity'"/>
	<xsl:variable name="MTF_EQUIPMENT_ON_HAND_A_UNITS_TYPE_PATTERN" select="'EquipmentOnHandAUnitQuantity'"/>
	<xsl:variable name="MTF_EQUIPMENT_ON_HAND_B_UNITS_TYPE_PATTERN" select="'EquipmentOnHandBUnitQuantity'"/>
	<xsl:variable name="MTF_EQUIPMENT_ON_HAND_C_UNITS_TYPE_PATTERN" select="'EquipmentOnHandCUnitQuantity'"/>
	<xsl:variable name="MTF_ESCAPE_BUOY_DESIGNATOR_TYPE_PATTERN" select="'EscapeBuoyDesignatorID'"/>
	<xsl:variable name="MTF_ESTIMATED_KIA_TYPE_PATTERN" select="'EstimatedKiaQuantity'"/>
	<xsl:variable name="MTF_ESTIMATED_WIA_TYPE_PATTERN" select="'EstimatedWiaQuantity'"/>
	<xsl:variable name="MTF_EXPECTED_NUMBER_OF_TRANSITORS_TYPE_PATTERN" select="'ExpectedTransitorQuantity'"/>
	<xsl:variable name="MTF_FEMALES_ASSIGNED_TYPE_PATTERN" select="'AssignedFemaleQuantity'"/>
	<xsl:variable name="MTF_FEMALES_PREGNANT_TYPE_PATTERN" select="'PregnantFemaleQuantity'"/>
	<xsl:variable name="MTF_JTIDS_NETWORK_LIBRARY_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'JtidsNetworkLibraryID'"/>
	<xsl:variable name="MTF_LANDING_SITE_LENGTH_IN_METERS_TYPE_PATTERN" select="'LandingSiteLengthMeasure'"/>
	<xsl:variable name="MTF_LANDING_SITE_WIDTH_IN_METERS_TYPE_PATTERN" select="'LandingSiteWidthMeasure'"/>
	<xsl:variable name="MTF_LEG_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'LegID'"/>
	<xsl:variable name="MTF_LOWER_LENGTH_LIMIT_IN_METERS_TYPE_PATTERN" select="'LowerLengthLimitMeasure'"/>
	<xsl:variable name="MTF_LOWER_STRENGTH_LIMIT_TYPE_PATTERN" select="'LowerStrengthLimitQuantity'"/>
	<xsl:variable name="MTF_LOWER_WIDTH_LIMIT_IN_METERS_TYPE_PATTERN" select="'LowerWidthLimitMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_STORAGE_CAPACITY_TYPE_PATTERN" select="'MaximumStorageCapacityMeasure'"/>
	<xsl:variable name="MTF_MEDICAL_BED_COUNT_TYPE_PATTERN" select="'MedicalBedQuantity'"/>
	<xsl:variable name="MTF_MEDICAL_BED_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'PatientAssignedMedicalBedQuantity'"/>
	<xsl:variable name="MTF_MEDICAL_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'PatientRequiredMedicalBedQuantity'"/>
	<xsl:variable name="MTF_MOORED_TYPE_PATTERN" select="'MooredMineDepthOrAltitudeMeasure'"/>
	<xsl:variable name="MTF_NONCOMBATANT_KILLED_TYPE_PATTERN" select="'NonCombatantKilledQuantity'"/>
	<xsl:variable name="MTF_NONCOMBATANT_MISSING_TYPE_PATTERN" select="'NonCombatantMissingQuantity'"/>
	<xsl:variable name="MTF_NONCOMBATANT_WOUNDED_TYPE_PATTERN" select="'NonCombatantWoundedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_IN_CONTROLLED_MOVEMENT_TYPE_PATTERN" select="'ControlledMovementQuantity'"/>
	<xsl:variable name="MTF_NUMBER_IN_UNCONTROLLED_MOVEMENT_TYPE_PATTERN" select="'UnControlledMovementQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DISLOCATED_FEMALES_OVER_60_YRS_TYPE_PATTERN" select="'DislocatedFemaleOverSixtyYearsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DISLOCATED_FEMALES_TYPE_PATTERN" select="'DislocatedFemaleQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DISLOCATED_FEMALES_UNDER_16_YRS_TYPE_PATTERN" select="'DislocatedFemaleUnderSixteenYearsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DISLOCATED_MALES_OVER_60_YRS_TYPE_PATTERN" select="'DislocatedMaleOverSixtyYearsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DISLOCATED_MALES_TYPE_PATTERN" select="'DislocatedMaleQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DISLOCATED_MALES_UNDER_16_YRS_TYPE_PATTERN" select="'DislocatedMaleUnderSixteenYearsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_UNACCOMPANIED_FEMALES_UNDER_16_YRS_TYPE_PATTERN" select="'DislocatedUnaccompaniedFemaleUnderSixteenYearsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_UNACCOMPANIED_MALES_UNDER_16_YRS_TYPE_PATTERN" select="'DislocatedUnaccompaniedMaleUnderSixteenYearsQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_EPW_AWAITING_EVACUATION_TYPE_PATTERN" select="'EpwAwaitingEvacuationQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_EPW_EVACUATED_TYPE_PATTERN" select="'EpwEvacuatedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_EPW_IN_INTELLIGENCE_CHANNELS_TYPE_PATTERN" select="'EpwEvacuatedIntelligenceChannelQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_EPW_IN_MEDICAL_CHANNELS_TYPE_PATTERN" select="'EpwEvacuatedMedicalChannelQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_HOST_COUNTRY_CIVILIANS_TYPE_PATTERN" select="'HostCountryCivilianQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ITEMS_OF_EQUIPMENT_TYPE_PATTERN" select="'EquipmentItemQuantity'"/>
	<xsl:variable name="MTF_NUMBER_MARRIED_FEMALES_TYPE_PATTERN" select="'MarriedFemaleQuantity'"/>
	<xsl:variable name="MTF_NUMBER_MARRIED_MALES_TYPE_PATTERN" select="'MarriedMaleQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MESSAGES_TYPE_PATTERN" select="'MessageQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_METERS_SHIFTED_TYPE_PATTERN" select="'ShiftedMeasure'"/>
	<xsl:variable name="MTF_NUMBER_OF_MINES_TYPE_PATTERN" select="'MineQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PARTS_REQUIRED_TYPE_PATTERN" select="'RequiredPartQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PERSONNEL_AFFECTED_TYPE_PATTERN" select="'AffectedPersonnelQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PERSONS_ON_BOARD_TYPE_PATTERN" select="'OnBoardPersonQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_REPLACEMENTS_TYPE_PATTERN" select="'ReplacementQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SINGLE_FEMALES_TYPE_PATTERN" select="'SingleFemaleQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SINGLE_MALES_TYPE_PATTERN" select="'SingleMaleQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SONOBUOY_IN_THE_PATTERN_GAINING_CONTACT_TYPE_PATTERN" select="'SonobuoyInThePatternGainingContactQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TARGET_ELEMENT_CASUALTIES_TYPE_PATTERN" select="'TargetElementCasualtyQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TARGET_ELEMENTS_TYPE_PATTERN" select="'TargetElementQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_TDLJ_ELEMENTS_TYPE_PATTERN" select="'TdlJElementQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_THIRD_COUNTRY_CIVILIANS_TYPE_PATTERN" select="'ThirdCountryCivilianQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_US_CIVILIANS_TYPE_PATTERN" select="'USCivilianQuantity'"/>
	<xsl:variable name="MTF_NUMBER_REQUESTED_TYPE_PATTERN" select="'RequestQuantity'"/>
	<xsl:variable name="MTF_NUMBER_RETURNED_TO_DUTY_TYPE_PATTERN" select="'ReturnedToDutyQuantity'"/>
	<xsl:variable name="MTF_OBSTACLE_DISTANCE_TYPE_PATTERN" select="'ObstacleDistanceMeasure'"/>
	<xsl:variable name="MTF_OFFLOAD_FUEL_IN_HUNDREDS_OF_POUNDS_TYPE_PATTERN" select="'OffloadFuelHundredMeasure'"/>
	<xsl:variable name="MTF_OFFLOAD_SUPPORT_EQUIPMENT_COUNT_TYPE_PATTERN" select="'OffloadSupportEquipmentQuantity'"/>
	<xsl:variable name="MTF_ON_HAND_INVENTORY_IN_MBBLS_TYPE_PATTERN" select="'OnHandInventoryMeasure'"/>
	<xsl:variable name="MTF_ON_HAND_NUMBER_OF_PERSONNEL_TYPE_PATTERN" select="'OnHandPersonnelQuantity'"/>
	<xsl:variable name="MTF_ONLOAD_SUPPORT_EQUIPMENT_COUNT_TYPE_PATTERN" select="'OnloadSupportEquipmentQuantity'"/>
	<xsl:variable name="MTF_OTHER_PERSONNEL_TYPE_PATTERN" select="'OtherPersonnelQuantity'"/>
	<xsl:variable name="MTF_OVERRUN_LENGTH_IN_METERS_TYPE_PATTERN" select="'OverrunLengthMeasure'"/>
	<xsl:variable name="MTF_PASSENGERS_TYPE_PATTERN" select="'PassengerQuantity'"/>
	<xsl:variable name="MTF_PERSONNEL_DEPLOYED_TYPE_PATTERN" select="'PersonnelDeployedQuantity'"/>
	<xsl:variable name="MTF_PERSONNEL_GAINS_TYPE_PATTERN" select="'PersonnelGainQuantity'"/>
	<xsl:variable name="MTF_PROSECUTION_TYPE_PATTERN" select="'ProsecutionQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_ALLOCATED_TYPE_PATTERN" select="'AllocatedQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_AUTHORIZED_TYPE_PATTERN" select="'AuthorizedQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_AVAILABLE_TYPE_PATTERN" select="'AvailableQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_BY_LOAD_TYPE_TYPE_PATTERN" select="'LoadByTypeQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_CAPTURED_TYPE_TYPE_PATTERN" select="'CapturedTypeQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_DAMAGED_TYPE_PATTERN" select="'DamagedQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_DESTROYED_TYPE_PATTERN" select="'DestroyedQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_DUE_IN_TYPE_PATTERN" select="'DueQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_NON_OPERATIONAL_TYPE_PATTERN" select="'NonOperationalQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_LOAD_TYPE_TYPE_PATTERN" select="'LoadTypeQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_ORDNANCE_WEAPONS_TYPE_PATTERN" select="'OrdnanceWeaponQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_PARTS_SHIPPED_TYPE_PATTERN" select="'PartsShippedQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_OF_PETROLEUM_PRODUCTS_IN_MBBLS_TYPE_PATTERN" select="'PetroleumProductsMeasure'"/>
	<xsl:variable name="MTF_QUANTITY_OF_PRODUCTS_TYPE_PATTERN" select="'ProductQuantity'"/>
	<xsl:variable name="MTF_OPERATIONAL_QUANTITY_TYPE_PATTERN" select="'QuantityOperationalNumber'"/>
	<xsl:variable name="MTF_QUANTITY_RECEIVED_TYPE_PATTERN" select="'ReceivedQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_REQUIRED_TYPE_PATTERN" select="'RequiredQuantity'"/>
	<xsl:variable name="MTF_REMAINS_AWAITING_BURIAL_TYPE_PATTERN" select="'RemainsAwaitingBurialQuantity'"/>
	<xsl:variable name="MTF_REMAINS_AWAITING_TRANSFER_TYPE_PATTERN" select="'RemainsAwaitingTransferQuantity'"/>
	<xsl:variable name="MTF_REMAINS_BURIED_TYPE_PATTERN" select="'RemainsBuriedQuantity'"/>
	<xsl:variable name="MTF_REMAINS_ON_HAND_TYPE_PATTERN" select="'RemainsOnHanddQuantity'"/>
	<xsl:variable name="MTF_REMAINS_RECEIVED_TYPE_PATTERN" select="'RemainsReceivedQuantity'"/>
	<xsl:variable name="MTF_REMAINS_TRANSFERRED_TYPE_PATTERN" select="'RemainsTransferredQuantity'"/>
	<xsl:variable name="MTF_REQUIRED_STRENGTH_ADDITIONAL_SKILL_IDENTIFIER_TYPE_PATTERN" select="'RequiredStrengthAdditionalSkillID'"/>
	<xsl:variable name="MTF_SEARCH_WIDTH_YARDS_TYPE_PATTERN" select="'SearchWidthMeasure'"/>
	<xsl:variable name="MTF_SEARCH_ZONE_WIDTH_IN_METERS_TYPE_PATTERN" select="'SearchZoneWidthMeasure'"/>
	<xsl:variable name="MTF_SITE_CAPACITY_REMAINING_TYPE_PATTERN" select="'SiteCapacityRemainingQuantity'"/>
	<xsl:variable name="MTF_SITE_CAPACITY_TYPE_PATTERN" select="'SiteCapacityQuantity'"/>
	<xsl:variable name="MTF_SUMMARY_TOTAL_OF_INTERNED_CIVILIANS_TYPE_PATTERN" select="'SummaryTotalInternedCivilianQuantity'"/>
	<xsl:variable name="MTF_SURFACE_DUCT_HEIGHT_TYPE_PATTERN" select="'SurfaceDuctHeightMeasure'"/>
	<xsl:variable name="MTF_SYSTEM_KILL_REQUIREMENT_TYPE_PATTERN" select="'SystemKillRequirementQuantity'"/>
	<xsl:variable name="MTF_TARGET_OR_FRIENDLY_UNIT_LENGTH_IN_METERS_TYPE_PATTERN" select="'TargetOrFriendlyUnitLengthQuantity'"/>
	<xsl:variable name="MTF_TARGET_OR_FRIENDLY_UNIT_WIDTH_IN_METERS_TYPE_PATTERN" select="'TargetOrFriendlyUnitWidthMeasure'"/>
	<xsl:variable name="MTF_TOTAL_BED_COUNT_TYPE_PATTERN" select="'TotalBedQuantity'"/>
	<xsl:variable name="MTF_TOTAL_BEGINNING_BALANCE_ON_HAND_TYPE_PATTERN" select="'TotalBeginningBalanceOnHandQuantity'"/>
	<xsl:variable name="MTF_TOTAL_COUNT_OF_BLOOD_PRODUCT_UNITS_TYPE_PATTERN" select="'TotalBloodProductUnitQuantity'"/>
	<xsl:variable name="MTF_TOTAL_DISLOCATED_PERSONS_TYPE_PATTERN" select="'TotalDislocatedPersonQuantity'"/>
	<xsl:variable name="MTF_TOTAL_ENDING_BALANCE_ON_HAND_TYPE_PATTERN" select="'TotalEndingBalanceOnHandQuantity'"/>
	<xsl:variable name="MTF_TOTAL_EPW_ON_HAND_TYPE_PATTERN" select="'TotalEpwOnHandQuantity'"/>
	<xsl:variable name="MTF_TOTAL_EPW_RECAPTURED_TYPE_PATTERN" select="'TotalEpwRecapturedQuantity'"/>
	<xsl:variable name="MTF_TOTAL_EXPENDITURE_LOSS_TYPE_PATTERN" select="'TotalExpenditureLossQuantity'"/>
	<xsl:variable name="MTF_TOTAL_EXPENDITURES_CONSUMED_TYPE_PATTERN" select="'TotalExpenditureConsumedQuantity'"/>
	<xsl:variable name="MTF_TOTAL_EXPENDITURES_FROM_OTHER_ISSUES_TYPE_PATTERN" select="'TotalExpenditureOtherIssueQuantity'"/>
	<xsl:variable name="MTF_TOTAL_FUEL_REQUIRED_IN_HUNDREDS_OF_POUNDS_TYPE_PATTERN" select="'TotalFuelRequiredHundredMeasure'"/>
	<xsl:variable name="MTF_TOTAL_LOSSES_TYPE_PATTERN" select="'TotalLossQuantity'"/>
	<xsl:variable name="MTF_TOTAL_NUMBER_OF_CIVILIANS_TYPE_PATTERN" select="'TotalCivilianQuantity'"/>
	<xsl:variable name="MTF_TOTAL_NUMBER_OF_PATIENTS_TYPE_PATTERN" select="'TotalPatientQuantity'"/>
	<xsl:variable name="MTF_TOTAL_QUANTITY_ON_HAND_TYPE_PATTERN" select="'TotalOnHandQuantity'"/>
	<xsl:variable name="MTF_TOTAL_QUANTITY_REQUIRED_TYPE_PATTERN" select="'TotalRequiredQuantity'"/>
	<xsl:variable name="MTF_TOTAL_REPAIRED_RECEIPTS_TYPE_PATTERN" select="'TotalRepairReceiptQuantity'"/>
	<xsl:variable name="MTF_TOTAL_RESUPPLY_FROM_CONUS_TYPE_PATTERN" select="'TotalConusResupplyQuantity'"/>
	<xsl:variable name="MTF_TOTAL_TRANSFER_FROM_UNITS_TYPE_PATTERN" select="'TotalUnitTransferQuantity'"/>
	<xsl:variable name="MTF_TOTAL_UNITS_TYPE_PATTERN" select="'TotalUnitQuantity'"/>
	<xsl:variable name="MTF_TOTAL_VOLUME_IN_CUBIC_FEET_TYPE_PATTERN" select="'TotalVolumeMeasure'"/>
	<xsl:variable name="MTF_TRUE_AIRSPEED_IN_KNOTS_TYPE_PATTERN" select="'TrueAirspeedMeasure'"/>
	<xsl:variable name="MTF_UPPER_LENGTH_LIMIT_IN_METERS_TYPE_PATTERN" select="'UpperLengthLimitMeasure'"/>
	<xsl:variable name="MTF_UPPER_STRENGTH_LIMIT_IN_METERS_TYPE_PATTERN" select="'UpperStrengthLimitMeasure'"/>
	<xsl:variable name="MTF_UPPER_WIDTH_LIMIT_IN_METERS_TYPE_PATTERN" select="'UpperWidthLimitMeasure'"/>
	<xsl:variable name="MTF_USABLE_STORAGE_CAPACITY_IN_MBBLS_TYPE_PATTERN" select="'UsableStorageCapacityMeasure'"/>
	<xsl:variable name="MTF_WATER_DEPTH_FEET_TYPE_PATTERN" select="'WaterDepthMeasure'"/>
	<xsl:variable name="MTF_WORKSHEET_SEARCH_OR_SWEEP_WIDTH_IN_YARDS_A_TYPE_PATTERN" select="'WorksheetSearchOrSweepWidth'"/>
	<xsl:variable name="MTF_ACTION_UNIT_ADDRESSEES_TYPE_PATTERN" select="'ActionUnitAddresseesText'"/>
	<xsl:variable name="MTF_ADDITIONAL_GROUP_INSTRUCTIONS_TYPE_PATTERN" select="'AdditionalGroupInstructionText'"/>
	<xsl:variable name="MTF_ADDITIONAL_SYMBOL_INFORMATION_TYPE_PATTERN" select="'AdditionalSymbolInformationText'"/>
	<xsl:variable name="MTF_AIR_TO_AIR_REFUELING_AAR_TRACK_AREA_TYPE_PATTERN" select="'AirToAirRefuelingAarTrackAreaText'"/>
	<xsl:variable name="MTF_AIRCRAFT_COMMANDERS_NAME_TYPE_PATTERN" select="'AircraftCommanderName'"/>
	<xsl:variable name="MTF_BRAND_TYPE_PATTERN" select="'BrandText'"/>
	<xsl:variable name="MTF_CALLSIGN_LINE_NUMBER_DOCUMENT_TYPE_PATTERN" select="'CallSignLineNumberDocumentText'"/>
	<xsl:variable name="MTF_CALLSIGN_TYPE_PATTERN" select="'CallSignText'"/>
	<xsl:variable name="MTF_CHAT_MODERATOR_TYPE_PATTERN" select="'ChatModeratorName'"/>
	<xsl:variable name="MTF_CIRCUIT_CALL_SIGN_USE_TYPE_PATTERN" select="'CircuitCallSignUseText'"/>
	<xsl:variable name="MTF_CODE_NAME_OF_START_POSITION_TYPE_PATTERN" select="'StartPositionCodeName'"/>
	<xsl:variable name="MTF_CODE_NAME_OF_STOP_POSITION_TYPE_PATTERN" select="'StopPositionCodeName'"/>
	<xsl:variable name="MTF_CONTACT_CALLSIGN_TYPE_PATTERN" select="'ContactCallSignName'"/>
	<xsl:variable name="MTF_CONVOY_TITLE_TYPE_PATTERN" select="'ConvoyTitleText'"/>
	<xsl:variable name="MTF_CULVERT_TYPE_TYPE_PATTERN" select="'CulvertTypeText'"/>
	<xsl:variable name="MTF_EMBARKATION_HARBOR_TYPE_PATTERN" select="'EmbarkationHarborText'"/>
	<xsl:variable name="MTF_EXPANDED_PLATFORM_TYPE_DESCRIPTION_TYPE_PATTERN" select="'ExpandedPlatformTypeDescriptionText'"/>
	<xsl:variable name="MTF_FUEL_STORES_PODS_JETTISONED_TYPE_PATTERN" select="'FuelStoresPodsJettisonedText'"/>
	<xsl:variable name="MTF_GROUND_SITE_NAME_TYPE_PATTERN" select="'GroundSiteName'"/>
	<xsl:variable name="MTF_HIMEZ_DESIGNATOR_TYPE_PATTERN" select="'HimezDesignatorText'"/>
	<xsl:variable name="MTF_HOLDING_POINT_IDENTIFIER_TYPE_PATTERN" select="'HoldingPointID'"/>
	<xsl:variable name="MTF_ID_NUMBER_TYPE_PATTERN" select="'GovernmentIssuedIDNumber'"/>
	<xsl:variable name="MTF_IDENTIFICATION_GATE_NAME_TYPE_PATTERN" select="'AircraftIdentificationGateName'"/>
	<xsl:variable name="MTF_IMAGERY_RECEIVER_CALL_SIGN_TYPE_PATTERN" select="'ImageryReceiverCallSignName'"/>
	<xsl:variable name="MTF_INFO_UNIT_ADDRESSEES_TYPE_PATTERN" select="'InfoUnitAddresseesText'"/>
	<xsl:variable name="MTF_LAST_NAME_OF_CREW_COMMANDER_OR_MISSION_CREW_DIRECTOR_TYPE_PATTERN" select="'CrewCommanderOrMissionCrewDirectorLastName'"/>
	<xsl:variable name="MTF_LOCATION_OF_EVENT_PLACE_NAME_TYPE_PATTERN" select="'EventLocationPlaceName'"/>
	<xsl:variable name="MTF_MARITIME_EQUIPMENT_DESIGNATOR_TYPE_PATTERN" select="'MaritimeEquipmentDesignatorText'"/>
	<xsl:variable name="MTF_MARITIME_RADIATION_HAZARD_EQUIPMENT_DESIGNATOR_TYPE_PATTERN" select="'MaritimeRadiationHazardEquipmentDesignatorText'"/>
	<xsl:variable name="MTF_MARITIME_SENSOR_OTHER_THAN_RADAR_SONAR_AND_ESM_TYPE_PATTERN" select="'MaritimeSensorOtherThanRadarSonarAndEsmText'"/>
	<xsl:variable name="MTF_MARITIME_TACTICAL_DATA_SYSTEM_DESIGNATOR_TYPE_PATTERN" select="'MaritimeTacticalDataSystemDesignatorText'"/>
	<xsl:variable name="MTF_MARITIME_WEAPONS_EQUIPMENT_TYPE_PATTERN" select="'MaritimeWeaponsEquipmentText'"/>
	<xsl:variable name="MTF_MESSAGE_TYPE_TYPE_PATTERN" select="'MessageTypeText'"/>
	<xsl:variable name="MTF_MINE_COUNTER_MEASURE_UNIT_IDENTIFICATION_TYPE_PATTERN" select="'MineCountermeasureUnitID'"/>
	<xsl:variable name="MTF_MINE_COUNTER_MEASURE_UNIT_NAME_TYPE_PATTERN" select="'MineCountermeasureUnitName'"/>
	<xsl:variable name="MTF_MINE_FIELD_DESIGNATION_TYPE_PATTERN" select="'MinefieldDesignationText'"/>
	<xsl:variable name="MTF_MINE_FIELD_IDENTIFIER_TYPE_PATTERN" select="'MinefieldID'"/>
	<xsl:variable name="MTF_NAME_OF_AIR_REFUELING_TRACK_TYPE_PATTERN" select="'AirRefuelingTrackName'"/>
	<xsl:variable name="MTF_NAME_OF_DECEASED_TYPE_PATTERN" select="'DeceasedName'"/>
	<xsl:variable name="MTF_NAME_OF_ESCORTING_PERSONNEL_TYPE_PATTERN" select="'EscortingPersonnelName'"/>
	<xsl:variable name="MTF_NAME_OF_NAVIGATION_LIGHT_TYPE_PATTERN" select="'NavigationLightName'"/>
	<xsl:variable name="MTF_NEXT_OF_KIN_BOOK_HOLDER_TYPE_PATTERN" select="'NextOfKinBookHolderDesignatorText'"/>
	<xsl:variable name="MTF_NOTIFY_WHO_TYPE_PATTERN" select="'NotifyWhoName'"/>
	<xsl:variable name="MTF_NUCLEAR_WEAPON_TYPE_TYPE_PATTERN" select="'NuclearWeaponTypeText'"/>
	<xsl:variable name="MTF_OCCUPATION_TYPE_PATTERN" select="'OccupationText'"/>
	<xsl:variable name="MTF_OPERATIONAL_COMMAND_TYPE_PATTERN" select="'OperationalCommandName'"/>
	<xsl:variable name="MTF_OPERATIONAL_CONTROL_AUTHORITY_TYPE_PATTERN" select="'ControlAuthorityName'"/>
	<xsl:variable name="MTF_OPERATOR_POSITION_EQUIPMENT_AFFECTED_TYPE_PATTERN" select="'OperatorPositionEquipmentAffectedName'"/>
	<xsl:variable name="MTF_OTHER_CHAT_ROOMS_TYPE_PATTERN" select="'OtherChatRoomName'"/>
	<xsl:variable name="MTF_OTHER_SOURCES_OF_GAIN_TYPE_PATTERN" select="'OtherWarGainSourceText'"/>
	<xsl:variable name="MTF_PART_NUMBER_SUB_ASSEMBLY_TYPE_PATTERN" select="'SubAssemblyPartNumberText'"/>
	<xsl:variable name="MTF_PERSONAL_TITLE_TYPE_PATTERN" select="'PersonalTitleText'"/>
	<xsl:variable name="MTF_POINT_OF_CONTACT_CALL_SIGN_TYPE_PATTERN" select="'PointOfContactCallSignName'"/>
	<xsl:variable name="MTF_PORT_OF_DESTINATION_TYPE_PATTERN" select="'PortOfDestinationName'"/>
	<xsl:variable name="MTF_PROTECTED_INDIVIDUALS_NAME_TYPE_PATTERN" select="'ProtectedIndividualsName'"/>
	<xsl:variable name="MTF_RECEIVER_AIRCRAFT_CALL_SIGN_TYPE_PATTERN" select="'ReceiverAircraftCallSignName'"/>
	<xsl:variable name="MTF_RECEIVING_CALL_SIGN_TYPE_PATTERN" select="'ReceivingCallSignName'"/>
	<xsl:variable name="MTF_REGIONAL_SPACE_SUPPORT_CENTER_POINT_OF_CONTACT_TYPE_PATTERN" select="'RegionalSpaceSupportCenterPointOfContactName'"/>
	<xsl:variable name="MTF_RENDEZVOUS_CONTACT_CALL_SIGN_TYPE_PATTERN" select="'RendezvousContactCallSignName'"/>
	<xsl:variable name="MTF_REQUESTING_AUTHORITY_TYPE_PATTERN" select="'RequestingAuthorityName'"/>
	<xsl:variable name="MTF_REQUISITION_STATUS_TYPE_PATTERN" select="'RequisitionStatusText'"/>
	<xsl:variable name="MTF_RESPONSIBLE_COMMAND_TYPE_PATTERN" select="'ResponsibleCommandName'"/>
	<xsl:variable name="MTF_SAVOW_CALL_SIGN_TYPE_PATTERN" select="'SavowCallSignName'"/>
	<xsl:variable name="MTF_SCRAMBLE_AGENCY_CALL_SIGN_TYPE_PATTERN" select="'ScrambleAgencyCallSignName'"/>
	<xsl:variable name="MTF_SECTOR_ANTIAIR_WARFARE_COORDINATOR_SAAWC_TYPE_PATTERN" select="'SectorAntiAirWarfareCoordinatorSaawcName'"/>
	<xsl:variable name="MTF_SHIP_CALL_SIGN_TYPE_PATTERN" select="'ShipCallSignName'"/>
	<xsl:variable name="MTF_SOURCE_ID_TYPE_PATTERN" select="'SourceID'"/>
	<xsl:variable name="MTF_SPECIFIC_EQUIPMENT_TYPE_TYPE_PATTERN" select="'SpecificEquipmentTypeName'"/>
	<xsl:variable name="MTF_STAFF_COMMENTS_TYPE_PATTERN" select="'StaffCommentText'"/>
	<xsl:variable name="MTF_STOCK_NUMBER_OF_PART_TYPE_PATTERN" select="'PartStockNumber'"/>
	<xsl:variable name="MTF_STOCK_NUMBER_OF_SUB_ASSEMBLY_TYPE_PATTERN" select="'SubAssemblyStockNumber'"/>
	<xsl:variable name="MTF_STORES_TYPE_TYPE_PATTERN" select="'StoreCargoTypeText'"/>
	<xsl:variable name="MTF_SUBMARINE_RANGE_AREA_TYPE_PATTERN" select="'SubmarineRangeAreaName'"/>
	<xsl:variable name="MTF_SUBMARINE_TRANSIT_LANE_TYPE_PATTERN" select="'SubmarineTransitLaneName'"/>
	<xsl:variable name="MTF_SUPPORT_EQUIPMENT_REQUIRED_TYPE_PATTERN" select="'SupportEquipmentRequiredText'"/>
	<xsl:variable name="MTF_SURFACE_ACTION_PLAN_TYPE_PATTERN" select="'SurfaceActionPlanText'"/>
	<xsl:variable name="MTF_SURFACE_SHIP_GUNNERY_SYSTEM_TYPE_PATTERN" select="'SurfaceShipGunnerySystemText'"/>
	<xsl:variable name="MTF_SURFACE_SHIP_SUBMARINE_SONAR_DESIGNATOR_TYPE_PATTERN" select="'SurfaceShipSubmarineSonarDesignatorName'"/>
	<xsl:variable name="MTF_SURFACE_TO_AIR_MISSILE_TYPE_TYPE_PATTERN" select="'SurfaceToAirMissileTypeName'"/>
	<xsl:variable name="MTF_SURFACE_TO_AIR_WEAPON_SYSTEM_TYPE_OTHER_TYPE_PATTERN" select="'SurfaceToAirWeaponSystemTypeOtherName'"/>
	<xsl:variable name="MTF_TACTICAL_COMMAND_AUTHORITY_TYPE_PATTERN" select="'TacticalCommandAuthorityID'"/>
	<xsl:variable name="MTF_TACTICAL_CONTROL_AUTHORITY_TYPE_PATTERN" select="'TacticalControlAuthorityID'"/>
	<xsl:variable name="MTF_TARGET_IDENTIFIER_TYPE_PATTERN" select="'TargetID'"/>
	<xsl:variable name="MTF_TARGET_THEATER_IDENTIFIER_TYPE_PATTERN" select="'TargetTheaterID'"/>
	<xsl:variable name="MTF_TASK_PLATFORM_TYPE_PATTERN" select="'TaskPlatformTypeText'"/>
	<xsl:variable name="MTF_TASKED_UNIT_TYPE_PATTERN" select="'TaskedUnitName'"/>
	<xsl:variable name="MTF_TIME_SEPARATION_OPERATING_AREA_OFFSET_PARAMETER_TYPE_PATTERN" select="'TimeSeparationOperatingAreaOffsetParameterText'"/>
	<xsl:variable name="MTF_TOWLINE_IDENTIFIER_TYPE_PATTERN" select="'TowlineID'"/>
	<xsl:variable name="MTF_TRANSMIT_CALL_SIGN_TYPE_PATTERN" select="'TransmitCallSignName'"/>
	<xsl:variable name="MTF_TUNNEL_TYPE_TYPE_PATTERN" select="'TunnelTypeName'"/>
	<xsl:variable name="MTF_TYPE_OF_COMMAND_AND_CONTROL_AGENCY_OTHER_TYPE_PATTERN" select="'CommandAndControlAgencyOtherTypeText'"/>
	<xsl:variable name="MTF_TYPE_OF_MINE_ZONE_TYPE_PATTERN" select="'MineZoneTypeName'"/>
	<xsl:variable name="MTF_TYPE_OF_NETWORK_ENABLED_WEAPON_OTHER_TYPE_PATTERN" select="'NetworkEnabledWeaponOtherTypeName'"/>
	<xsl:variable name="MTF_UNIT_LINE_NUMBER_DOCUMENT_TYPE_PATTERN" select="'UnitLineNumberDocumentName'"/>
	<xsl:variable name="MTF_UNIT_SUPPORTED_TYPE_PATTERN" select="'UnitSupportedID'"/>
	<xsl:variable name="MTF_USER_CALL_SIGN_TYPE_PATTERN" select="'UserCallSignName'"/>
	<xsl:variable name="MTF_VULNERABLE_POINT_TYPE_TYPE_PATTERN" select="'VulnerablePointTypeList'"/>
	<xsl:variable name="MTF_ZONE_IDENTIFICATION_TYPE_PATTERN" select="'ZoneID'"/>
	<xsl:variable name="MTF_ACUTE_BREAKER_ANGLE_IN_DEGREES_RELATIVE_TYPE_PATTERN" select="'AcuteBreakerAngleRelativeMeasure'"/>
	<xsl:variable name="MTF_AIRCRAFT_DATA_LINK_ADDRESS_TYPE_PATTERN" select="'AircraftDataLinkAddressNumber'"/>
	<xsl:variable name="MTF_AIRCRAFT_SEARCH_ALTITUDE_TYPE_PATTERN" select="'AircraftSearchAltitudeHundredMeasure'"/>
	<xsl:variable name="MTF_ALTITUDE_IN_HUNDREDS_OF_FEET_OBSERVED_TYPE_PATTERN" select="'AltitudeObservedHundredMeasure'"/>
	<xsl:variable name="MTF_ANTENNA_AZIMUTH_TYPE_PATTERN" select="'AntennaAzimuthNumber'"/>
	<xsl:variable name="MTF_ANTI_AIR_WARFARE_AXIS_IN_DEGREES_TYPE_PATTERN" select="'AntiAirWarfareAxisMeasure'"/>
	<xsl:variable name="MTF_APN_RADAR_BEACON_CODE_SETTING_TYPE_PATTERN" select="'ApnRadarBeaconCode'"/>
	<xsl:variable name="MTF_BEARING_FROM_AIRCRAFT_IN_DEGREES_MAGNETIC_TYPE_PATTERN" select="'AircrafBearingMeasure'"/>
	<xsl:variable name="MTF_BEARING_FROM_BULLSEYE_IN_DEGREES_MAGNETIC_TYPE_PATTERN" select="'BullseyeBearingMeasure'"/>
	<xsl:variable name="MTF_BEARING_IN_DEGREES_TYPE_PATTERN" select="'BearingMeasure'"/>
	<xsl:variable name="MTF_CENTER_BEARING_IN_DEGREES_TYPE_PATTERN" select="'CenterBearingMeasure'"/>
	<xsl:variable name="MTF_CLOUD_BASE_HEIGHT_001_TO_160_TYPE_PATTERN" select="'CloudBaseHeight001To160Measure'"/>
	<xsl:variable name="MTF_CLOUD_BASE_HEIGHT_301_TO_460_TYPE_PATTERN" select="'CloudBaseHeight301To460Measure'"/>
	<xsl:variable name="MTF_CLOUD_BASE_HEIGHT_501_TO_660_TYPE_PATTERN" select="'CloudBaseHeight501To660Measure'"/>
	<xsl:variable name="MTF_COUNT_OF_ASSETS_TYPE_PATTERN" select="'AssetQuantity'"/>
	<xsl:variable name="MTF_COURSE_DEGREES_MAGNETIC_TYPE_PATTERN" select="'CourseMeasure'"/>
	<xsl:variable name="MTF_COURSE_DEGREEE_TRUE_TYPE_PATTERN" select="'CourseTrueMeasure'"/>
	<xsl:variable name="MTF_DIRECTION_IN_DEGREES_IN_TRUE_TYPE_PATTERN" select="'DirectionTrueNorthMeasure'"/>
	<xsl:variable name="MTF_DIRECTION_OF_MOVEMENT_IN_DEGREES_TYPE_PATTERN" select="'MovementDirectionMeasure'"/>
	<xsl:variable name="MTF_DIRECTION_OF_WEATHER_EVENT_MOVEMENT_TYPE_PATTERN" select="'WeatherEventDirectionTrueNorthMeasure'"/>
	<xsl:variable name="MTF_DOWNWIND_DIRECTION_IN_DEGREES_TYPE_PATTERN" select="'DownwindDirectionMeasure'"/>
	<xsl:variable name="MTF_DUE_HOME_JULIAN_DAY_TYPE_PATTERN" select="'DueHomeMeasure'"/>
	<xsl:variable name="MTF_ECM_RESISTANT_VOICE_ERV_NET_NUMBER_TYPE_PATTERN" select="'EcmResistantVoiceErvNetNumber'"/>
	<xsl:variable name="MTF_EVENT_NUMBER_TYPE_PATTERN" select="'EventNumber'"/>
	<xsl:variable name="MTF_FIRST_SERIAL_NUMBER_COPIED_TYPE_PATTERN" select="'FirstSerialNumberCopiedValue'"/>
	<xsl:variable name="MTF_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'FlightLevelHundredMeasure'"/>
	<xsl:variable name="MTF_FORWARD_AIR_CONTROLLER_DATA_LINK_ADDRESS_TYPE_PATTERN" select="'ForwardAirControllerDataLinkAddress'"/>
	<xsl:variable name="MTF_HEIGHT_OF_STATION_IN_TENS_OF_METERS_TYPE_PATTERN" select="'StationHeigthtMeasure'"/>
	<xsl:variable name="MTF_HIGHEST_RUNWAY_BEARING_IN_DEGREES_TYPE_PATTERN" select="'HighestRunwayBearingMeasure'"/>
	<xsl:variable name="MTF_INTERCEPT_SERIAL_NUMBER_TYPE_PATTERN" select="'InterceptSerialNumber'"/>
	<xsl:variable name="MTF_ITEM_NUMBER_TYPE_PATTERN" select="'ItemNumber'"/>
	<xsl:variable name="MTF_JULIAN_DAY_TYPE_PATTERN" select="'JulianMeasure'"/>
	<xsl:variable name="MTF_LAST_SERIAL_NUMBER_COPIED_DAY_TYPE_PATTERN" select="'LastSerialNumberCopiedValue'"/>
	<xsl:variable name="MTF_LEFT_RADIAL_LINE_ORIENTATION_IN_DEGREES_TYPE_PATTERN" select="'LeftRadialLineOrientationMeasure'"/>
	<xsl:variable name="MTF_LONGITUDE_DEGREES_DEGREES_TYPE_PATTERN" select="'LongitudeMeasure'"/>
	<xsl:variable name="MTF_LOWEST_RUNWAY_BEARING_TYPE_PATTERN" select="'LowestRunwayBearingMeasure'"/>
	<xsl:variable name="MTF_MAGNETIC_BEARING_IN_DEGREES_FROM_NAVAID_TYPE_PATTERN" select="'NavidMagneticBearingMeasure'"/>
	<xsl:variable name="MTF_MAGNETIC_BEARING_IN_DEGREES_TYPE_PATTERN" select="'MagneticBearingMeasure'"/>
	<xsl:variable name="MTF_MAGNETIC_HEADING_IN_DEGREES_TYPE_PATTERN" select="'MagneticHeadingMeasure'"/>
	<xsl:variable name="MTF_MAIN_IJMS_NET_NUMBER_TYPE_PATTERN" select="'MainIjmsNetNumber'"/>
	<xsl:variable name="MTF_MEAN_REFRACTIVE_INDEX_TYPE_PATTERN" select="'MeanRefractiveIndex'"/>
	<xsl:variable name="MTF_MESSAGE_NUMBER_TYPE_PATTERN" select="'MessageNumber'"/>
	<xsl:variable name="MTF_MET_LATITUDE_IN_TENTHS_OF_DEGREES_TYPE_PATTERN" select="'MetLatitudeTenthMeasure'"/>
	<xsl:variable name="MTF_MET_LONGITUDE_IN_TENTHS_OF_DEGREES_TYPE_PATTERN" select="'MetLongitudeTenthMeasure'"/>
	<xsl:variable name="MTF_MET_STATION_PRESSURE_IN_MILLIBARS_TYPE_PATTERN" select="'MetStationPressureMeasure'"/>
	<xsl:variable name="MTF_MET_WIND_DIRECTION_TENS_OF_MILS_TYPE_PATTERN" select="'MetWindDirectionMeasure'"/>
	<xsl:variable name="MTF_MGRS_UTM_100_METER_EASTING_TYPE_PATTERN" select="'MgrsUtmEastingCoordinateValue'"/>
	<xsl:variable name="MTF_MGRS_UTM_100_METER_NORTHING_TYPE_PATTERN" select="'MgrsUtmNorthingCoordinateValue'"/>
	<xsl:variable name="MTF_CEILING_TYPE_PATTERN" select="'MinimumCeilingMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_SAFE_DISTANCE_1_IN_HUNDREDS_OF_METERS_TYPE_PATTERN" select="'FirstMinimumSafeDistanceHundredMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_SAFE_DISTANCE_2_IN_HUNDREDS_OF_METERS_TYPE_PATTERN" select="'SecondMinimumSafeDistanceHundredMeasure'"/>
	<xsl:variable name="MTF_MISSION_IDENTIFICATION_NUMBER_PART_2_TYPE_PATTERN" select="'MissionIDPartTwoValue'"/>
	<xsl:variable name="MTF_MISSION_IDENTIFICATION_NUMBER_PART_1_TYPE_PATTERN" select="'MissionIDPartOneValue'"/>
	<xsl:variable name="MTF_MVI_SERIAL_NUMBER_PART_2_TYPE_PATTERN" select="'MviSerialNumberPartTwoValue'"/>
	<xsl:variable name="MTF_MVI_NATIONAL_NETWORK_IDENTIFIER_2_TYPE_PATTERN" select="'NationalNetworkIDValue'"/>
	<xsl:variable name="MTF_NAVAL_AMPHIBIOUS_COMMUNICATIONS_NET_LINE_NUMBER_TYPE_PATTERN" select="'NavalAmphibiousCommunicationNetLineNumber'"/>
	<xsl:variable name="MTF_NET_NUMBER_TYPE_PATTERN" select="'NetNumber'"/>
	<xsl:variable name="MTF_NPG_STACK_NET_NUMBER_TYPE_PATTERN" select="'NpgStackNetNumber'"/>
	<xsl:variable name="MTF_NUMBER_OF_INCIDENTS_TYPE_PATTERN" select="'IncidentQuantity'"/>
	<xsl:variable name="MTF_ORIENTATION_OF_EQUIPMENT_IN_DEGREES_TYPE_PATTERN" select="'EquipmentOrientationMeasure'"/>
	<xsl:variable name="MTF_POSTURE_ATTAINMENT_TIME_IN_DAYS_TYPE_PATTERN" select="'PostureAttainmentTimeMeasure'"/>
	<xsl:variable name="MTF_RADIUS_OF_ZONE_1_TYPE_PATTERN" select="'ZoneOneRadiusMeasure'"/>
	<xsl:variable name="MTF_REACTION_TIME_IN_HOURS_TYPE_PATTERN" select="'ReactionTimeMeasure'"/>
	<xsl:variable name="MTF_REASON_FOR_AIRLIFT_MISSION_DELAY_TYPE_PATTERN" select="'AirliftMissionDelayReasonCode'"/>
	<xsl:variable name="MTF_RECEIVER_DATA_LINK_ADDRESS_TYPE_PATTERN" select="'ReceiverDataLinkAddressValue'"/>
	<xsl:variable name="MTF_RELATIVE_BEARING_IN_DEGREES_TYPE_PATTERN" select="'RelativeBearingMeasure'"/>
	<xsl:variable name="MTF_RIGHT_RADIAL_LINE_ORIENTATION_IN_DEGREES_TYPE_PATTERN" select="'RightRadialLineOrientationMeasure'"/>
	<xsl:variable name="MTF_ROE_NUMERIC_INDICATOR_THREE_DIGITS_TYPE_PATTERN" select="'RoeThreeDigitNumericIndicator'"/>
	<xsl:variable name="MTF_RUN_IN_HEADING_IN_DEGREES_TYPE_PATTERN" select="'RunInHeadingMeasure'"/>
	<xsl:variable name="MTF_SECTOR_LIMIT_START_TYPE_PATTERN" select="'SectorLimitStartMeasure'"/>
	<xsl:variable name="MTF_SECTOR_LIMIT_STOP_TYPE_PATTERN" select="'SectorLimitStopMeasure'"/>
	<xsl:variable name="MTF_SECTOR_WIDTH_IN_DEGREES_TYPE_PATTERN" select="'SectorWidthMeasure'"/>
	<xsl:variable name="MTF_SUBMARINE_DEPLOYMENT_DESIGNATOR_TYPE_PATTERN" select="'SubmarineDeploymentDesignatorCode'"/>
	<xsl:variable name="MTF_TARGET_ORIENTATION_TYPE_PATTERN" select="'TargetOrientationValue'"/>
	<xsl:variable name="MTF_THOUSANDTH_OF_MINUTE_OF_LATITUDE_TYPE_PATTERN" select="'LatitudeThousandthsMeasure'"/>
	<xsl:variable name="MTF_THOUSANDTH_OF_MINUTE_OF_LONGITUDE_TYPE_PATTERN" select="'LongitudeThousandthsMeasure'"/>
	<xsl:variable name="MTF_TIME_TO_CONTROL_POINT_TYPE_PATTERN" select="'TimeToControlPointMeasure'"/>
	<xsl:variable name="MTF_TLAM_DATA_IDENTIFICATION_NUMBER_PART_1_TYPE_PATTERN" select="'TlamPartOneDataIdentificationNumber'"/>
	<xsl:variable name="MTF_TLAM_DATA_IDENTIFICATION_NUMBER_PART_2_TYPE_PATTERN" select="'TlamPartTwoDataIdentificationNumber'"/>
	<xsl:variable name="MTF_TRUE_BEARING_IN_DEGREES_TYPE_PATTERN" select="'TrueBearingMeasure'"/>
	<xsl:variable name="MTF_UPPER_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'UpperAltitudeMeasure'"/>
	<xsl:variable name="MTF_UPPER_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'UpperFlightLevelMeasure'"/>
	<xsl:variable name="MTF_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN" select="'AltitudeMeasure'"/>
	<xsl:variable name="MTF_WIND_DIRECTION_IN_DEGREES_RELATIVE_TO_TRUE_NORTH_TYPE_PATTERN" select="'WindDirectionRelativeTrueNorthMeasure'"/>
	<xsl:variable name="MTF_WIND_SPEED_UNSPECIFIED_TYPE_PATTERN" select="'WindSpeedUnspecifiedMeasure'"/>
	<xsl:variable name="MTF_ZONE_ANGLE_IN_DEGREES_TYPE_PATTERN" select="'ZoneAngleMeasure'"/>
	<xsl:variable name="MTF_AGENCY_DESIGNATOR_TYPE_PATTERN" select="'AgencyDesignatorText'"/>
	<xsl:variable name="MTF_AGENCY_TYPE_PATTERN" select="'AgencyText'"/>
	<xsl:variable name="MTF_AIR_COMMAND_AND_CONTROL_SYSTEM_ACCS_DESIGNATION_TYPE_PATTERN" select="'AirCommandAndControlSystemAccsDesignationText'"/>
	<xsl:variable name="MTF_AIRDROP_TYPE_OTHER_TYPE_PATTERN" select="'AirDropTypeOtherText'"/>
	<xsl:variable name="MTF_AREA_OF_VALIDITY_TYPE_PATTERN" select="'AreaOfValidityName'"/>
	<xsl:variable name="MTF_AUTHORIZATION_UNIT_TYPE_PATTERN" select="'AuthorizationUnitText'"/>
	<xsl:variable name="MTF_AVAILABLE_UNITS_TYPE_PATTERN" select="'AvailableUnitsText'"/>
	<xsl:variable name="MTF_CAPTURING_UNIT_TYPE_PATTERN" select="'CapturingUnitText'"/>
	<xsl:variable name="MTF_CHAT_ROOM_TYPE_PATTERN" select="'ChatRoomName'"/>
	<xsl:variable name="MTF_CHILD_NODE_TYPE_PATTERN" select="'ChildNodeName'"/>
	<xsl:variable name="MTF_COLLECTION_UNIT_DESIGNATOR_TYPE_PATTERN" select="'CollectionUnitDesignatorName'"/>
	<xsl:variable name="MTF_COMMERCIAL_OWNER_TYPE_PATTERN" select="'CommercialOwnerName'"/>
	<xsl:variable name="MTF_CONTROL_POSITION_READINESS_STATUS_TYPE_PATTERN" select="'ControlPositionReadinessStatusText'"/>
	<xsl:variable name="MTF_COORDINATING_UNIT_TYPE_PATTERN" select="'CoordinatingUnitName'"/>
	<xsl:variable name="MTF_DESIRED_MEAN_POINT_OF_IMPACT_DMPI_IDENTIFIER_TYPE_PATTERN" select="'DesiredMeanPointOfImpactDmpiID'"/>
	<xsl:variable name="MTF_DESIRED_MEAN_POINT_OF_IMPACT_TYPE_PATTERN" select="'DesiredMeanPointOfImpactCode'"/>
	<xsl:variable name="MTF_DESTINATION_TYPE_PATTERN" select="'DestinationName'"/>
	<xsl:variable name="MTF_DIRECTION_FINDING_FACILITY_DESIGNATOR_TYPE_PATTERN" select="'DirectionFindingFacilityDesignatorName'"/>
	<xsl:variable name="MTF_EMERGENCY_DISABLEMENT_EVACUATION_UNIT_TYPE_PATTERN" select="'EmergencyDisablementEvacuationUnitName'"/>
	<xsl:variable name="MTF_EVENT_TYPE_PATTERN" select="'EventText'"/>
	<xsl:variable name="MTF_FORCE_OR_UNIT_REQUIRED_TO_ACKNOWLEDGE_TYPE_PATTERN" select="'ForceOrUnitRequiredToAcknowledgeName'"/>
	<xsl:variable name="MTF_FOT_CCT_COMMAND_TYPE_PATTERN" select="'FotcCtCommandName'"/>
	<xsl:variable name="MTF_FRIENDLY_UNIT_DESIGNATOR_TYPE_PATTERN" select="'FriendlyUnitDesignatorName'"/>
	<xsl:variable name="MTF_INFORMATION_SOURCE_TYPE_PATTERN" select="'InformationSourceText'"/>
	<xsl:variable name="MTF_INTELLIGENCE_PRODUCT_TYPE_TYPE_PATTERN" select="'IntelligenceProductTypeText'"/>
	<xsl:variable name="MTF_JOINT_DESIRED_POINT_OF_IMPACT_JDPI_TYPE_PATTERN" select="'JointDesiredPointOfImpactJdpiCode'"/>
	<xsl:variable name="MTF_KILL_BOX_TYPE_PATTERN" select="'KillBoxName'"/>
	<xsl:variable name="MTF_LAUNCH_MODE_TYPE_PATTERN" select="'LaunchModeText'"/>
	<xsl:variable name="MTF_MASTER_MODE_TYPE_PATTERN" select="'MasterNodeName'"/>
	<xsl:variable name="MTF_MINE_COUNTER_MEASURE_EQUIPMENT_MODE_CONFIGURATION_TYPE_PATTERN" select="'MineCountermeasureEquipmentModeConfigurationText'"/>
	<xsl:variable name="MTF_MINE_COUNTER_MEASURE_EQUIPMENT_TYPE_PATTERN" select="'MineCountermeasureEquipmentName'"/>
	<xsl:variable name="MTF_MINE_COUNTER_MEASURE_UNIT_TYPE_PATTERN" select="'MineCountermeasureUnitName'"/>
	<xsl:variable name="MTF_MINEFIELD_MAINTENANCE_UNIT_TYPE_PATTERN" select="'MinefieldMaintenanceUnitName'"/>
	<xsl:variable name="MTF_MINE_LAYING_UNIT_TYPE_PATTERN" select="'MinelayingUnitName'"/>
	<xsl:variable name="MTF_MISSILE_ORDER_TYPE_PATTERN" select="'MissileOrderText'"/>
	<xsl:variable name="MTF_MISSION_LAUNCH_REGION_TYPE_PATTERN" select="'MissionLaunchRegionName'"/>
	<xsl:variable name="MTF_MISSION_PAYLOAD_TYPE_PATTERN" select="'MissionPayloadText'"/>
	<xsl:variable name="MTF_MISSION_VERIFICATION_INDEX_ORIGINATOR_TYPE_PATTERN" select="'MissionVerificationIndexOriginatorName'"/>
	<xsl:variable name="MTF_MIX_OF_WEAPONS_TYPE_PATTERN" select="'WeaponMixText'"/>
	<xsl:variable name="MTF_MODEL_TYPE_PATTERN" select="'ModelNumber'"/>
	<xsl:variable name="MTF_MOVING_UNIT_IDENTIFIER_TYPE_PATTERN" select="'MovingUnitIdentifierName'"/>
	<xsl:variable name="MTF_NAME_OF_AREA_OF_VALIDITY_TYPE_PATTERN" select="'ValidityAreaName'"/>
	<xsl:variable name="MTF_NAME_OF_FIRST_LAST_NUMBER_COORDINATOR_TYPE_PATTERN" select="'FirstLastNumberCoordinatorName'"/>
	<xsl:variable name="MTF_NAME_OF_LEAD_SHIP_IN_GROUP_TYPE_PATTERN" select="'GroupLeadShipName'"/>
	<xsl:variable name="MTF_NAME_OF_MISSING_NUMBER_COORDINATOR_TYPE_PATTERN" select="'MissingNumberCoordinatorName'"/>
	<xsl:variable name="MTF_NAME_OF_SHIP_CLASS_TYPE_PATTERN" select="'ShipClassName'"/>
	<xsl:variable name="MTF_NAVIGATION_HAZARD_WARNING_TYPE_PATTERN" select="'NavigationHazardWarningNumber'"/>
	<xsl:variable name="MTF_NET_USAGE_FUNCTION_TYPE_PATTERN" select="'NetUsageFunctionText'"/>
	<xsl:variable name="MTF_NEUTRALIZING_UNIT_NAME_TYPE_PATTERN" select="'NeutralizingUnitName'"/>
	<xsl:variable name="MTF_OBSERVERS_LOCATION_NAME_TYPE_PATTERN" select="'ObserverLocationName'"/>
	<xsl:variable name="MTF_ORIGINAL_REPORTING_COMMAND_TYPE_PATTERN" select="'OriginalReportingCommandName'"/>
	<xsl:variable name="MTF_ORIGINATOR_OF_DIPLOMATIC_MISSION_TYPE_PATTERN" select="'DiplomaticMissionOriginatorName'"/>
	<xsl:variable name="MTF_ORIGINATOR_TYPE_PATTERN" select="'OriginatorName'"/>
	<xsl:variable name="MTF_PLATFORM_IDENTIFIER_TYPE_PATTERN" select="'PlatformID'"/>
	<xsl:variable name="MTF_RADAR_ANTENNA_MODEL_TYPE_PATTERN" select="'RadarAntennaModelNumber'"/>
	<xsl:variable name="MTF_REASON_FOR_CANCELLATION_OF_SATELLITE_ACCESS_TYPE_PATTERN" select="'SatelliteAccessCancelReasonText'"/>
	<xsl:variable name="MTF_REASON_FOR_CHANGE_OF_SATELLITE_ACCESS_TYPE_PATTERN" select="'SatelliteAccessChangeReasonText'"/>
	<xsl:variable name="MTF_REASON_FOR_TERMINATION_OF_SATELLITE_ACCESS_TYPE_PATTERN" select="'SatelliteAccessTerminateReasonText'"/>
	<xsl:variable name="MTF_REPORTING_UNIT_NAME_TYPE_PATTERN" select="'BloodProgramManagementReportingUnitName'"/>
	<xsl:variable name="MTF_REPORTING_UNIT_TYPE_PATTERN" select="'ReportingUnitName'"/>
	<xsl:variable name="MTF_REQUESTING_AGENCY_DESIGNATOR_TYPE_PATTERN" select="'RequestingAgencyDesignatorName'"/>
	<xsl:variable name="MTF_SEARCH_ATTACK_UNIT_OR_SURFACE_ACTION_GROUP_COMMANDER_TYPE_PATTERN" select="'SearchAttackUnitOrSurfaceActionGroupCommanderName'"/>
	<xsl:variable name="MTF_SECURITY_CLEARANCE_COMMENT_TYPE_PATTERN" select="'SecurityClearanceCommentText'"/>
	<xsl:variable name="MTF_SEEKER_PATTERN_TYPE_PATTERN" select="'SeekerPatternText'"/>
	<xsl:variable name="MTF_SENSOR_ASSET_TYPE_PATTERN" select="'SensorAssetID'"/>
	<xsl:variable name="MTF_SHIP_NAME_OF_AGENCY_ASSUMING_CONTROL_TYPE_PATTERN" select="'AgencyAssumingControlShipName'"/>
	<xsl:variable name="MTF_SHIP_NAME_TO_PROVIDE_HELOS_FUELING_CAPACITY_TYPE_PATTERN" select="'HeloFuelingCapacityProviderShipName'"/>
	<xsl:variable name="MTF_SHIP_NAME_TO_PROVIDE_HELOS_TYPE_PATTERN" select="'HeloProviderShipName'"/>
	<xsl:variable name="MTF_SOLID_CARGO_AMMUNITION_TYPE_TYPE_PATTERN" select="'SolidCargoAmmunitionSpecificTypeName'"/>
	<xsl:variable name="MTF_SPACE_MISSION_TASKING_TYPE_PATTERN" select="'SpaceMissionTaskText'"/>
	<xsl:variable name="MTF_SUB_ORGANIZATION_IDENTIFIER_TYPE_PATTERN" select="'SubOrganizationID'"/>
	<xsl:variable name="MTF_TACTICAL_BATTLE_MANAGEMENT_FUNCTION_TBMF_AREA_DESIGNATOR_TYPE_PATTERN" select="'TacticalBattleManagementFunctionTbmfAreaDesignatorName'"/>
	<xsl:variable name="MTF_TACTICAL_UNIT_TYPE_TYPE_PATTERN" select="'TacticalUnitTypeName'"/>
	<xsl:variable name="MTF_TASKED_UNIT_DESIGNATOR_TYPE_PATTERN" select="'TaskedUnitDesignatorName'"/>
	<xsl:variable name="MTF_TECHNICAL_PUB_ID_TYPE_PATTERN" select="'TechnicalPubID'"/>
	<xsl:variable name="MTF_TLAM_MISSION_DATA_UPDATE_ORIGINATOR_TYPE_PATTERN" select="'TlamMissionDataUpdateOriginatorID'"/>
	<xsl:variable name="MTF_TUM_ORIGINATOR_TYPE_PATTERN" select="'TumOriginatorID'"/>
	<xsl:variable name="MTF_TYPE_VESSEL_TYPE_PATTERN" select="'VesselTypeText'"/>
	<xsl:variable name="MTF_UNIT_AFFECTED_TYPE_PATTERN" select="'UnitAffectedName'"/>
	<xsl:variable name="MTF_UNIT_DESIGNATION_TYPE_PATTERN" select="'UnitDesignationText'"/>
	<xsl:variable name="MTF_UNIT_ID_TYPE_PATTERN" select="'UnitID'"/>
	<xsl:variable name="MTF_UNIT_TYPE_PATTERN" select="'UnitTypeText'"/>
	<xsl:variable name="MTF_VICE_COMMODORES_SHIP_NAME_TYPE_PATTERN" select="'ViceCommodoreShipName'"/>
	<xsl:variable name="MTF_WEAPON_INITIALIZATION_KEY_SPLIT_WIKS_SHORT_TITLE_TYPE_PATTERN" select="'WeaponInitializationKeySplitWiksShortTitleText'"/>
	<xsl:variable name="MTF_WEAPON_TYPE_GENERIC_TYPE_PATTERN" select="'GenericWeaponTypeText'"/>
	<xsl:variable name="MTF_ANTENNA_ELEVATION_TYPE_PATTERN" select="'AntennaElevationMeasure'"/>
	<xsl:variable name="MTF_AUTO_READY_SPARE_MISSILE_TYPE_PATTERN" select="'AutoReadySpareMissileQuantity'"/>
	<xsl:variable name="MTF_BACKUP_MISSILE_TYPE_PATTERN" select="'BackupMissileTotalQuantity'"/>
	<xsl:variable name="MTF_BASIC_ENCYCLOPEDIA_SUFFIX_TYPE_PATTERN" select="'BasicEncyclopediaSuffixNumber'"/>
	<xsl:variable name="MTF_CENTIMINUTE_ANGULAR_TYPE_PATTERN" select="'CentiMinuteAngularMeasure'"/>
	<xsl:variable name="MTF_CHANNEL_CONNECTOR_TYPE_PATTERN" select="'ChannelConnectorNumber'"/>
	<xsl:variable name="MTF_DATA_ENTRY_TYPE_PATTERN" select="'DataEntryNumber'"/>
	<xsl:variable name="MTF_DAY_TYPE_PATTERN" select="'DayMeasure'"/>
	<xsl:variable name="MTF_DURATION_IN_HOURS_TYPE_PATTERN" select="'HourDuration'"/>
	<xsl:variable name="MTF_DURATION_IN_MINUTES_TYPE_PATTERN" select="'MinuteDuration'"/>
	<xsl:variable name="MTF_ESSENTIAL_ELEMENTS_OF_INFORMATION_CATEGORY_INDICATOR_TYPE_PATTERN" select="'EssentialInformationElementCategoryIndicator'"/>
	<xsl:variable name="MTF_HOUR_TIME_TYPE_PATTERN" select="'HourTimeMeasure'"/>
	<xsl:variable name="MTF_IMAGE_TYPE_01_TO_99_TYPE_PATTERN" select="'Image01To99Code'"/>
	<xsl:variable name="MTF_INNER_RANGE_IN_THOUSANDS_OF_YARDS_TYPE_PATTERN" select="'InnerRangeThousandMeasure'"/>
	<xsl:variable name="MTF_LATITUDE_CENTISECOND_ANGULAR_TYPE_PATTERN" select="'LatitudeAngularMeasure'"/>
	<xsl:variable name="MTF_LATITUDE_DEGREES_TYPE_PATTERN" select="'LatitudeMeasure'"/>
	<xsl:variable name="MTF_LATITUDE_MINUTE_ANGULAR_TYPE_PATTERN" select="'LatitudeAngularMeasure'"/>
	<xsl:variable name="MTF_LATITUDE_SECOND_ANGULAR_TYPE_PATTERN" select="'LatitudeAngularMeasure'"/>
	<xsl:variable name="MTF_LEFT_AREA_BOUNDARY_IN_TENS_OF_DEGREES_TYPE_PATTERN" select="'LeftAreaBoundaryMeasure'"/>
	<xsl:variable name="MTF_LEVEL_OF_ASSURANCE_TYPE_PATTERN" select="'AssuranceLevelPercent'"/>
	<xsl:variable name="MTF_LONGITUDE_CENTISECOND_ANGULAR_TYPE_PATTERN" select="'LongitudeAngularMeasure'"/>
	<xsl:variable name="MTF_LONGITUDE_MINUTE_ANGULAR_TYPE_PATTERN" select="'LongitudeAngularMeasure'"/>
	<xsl:variable name="MTF_LONGITUDE_SECOND_ANGULAR_TYPE_PATTERN" select="'LongitudeAngularMeasure'"/>
	<xsl:variable name="MTF_MAINTENANCE_PRIORITY_TYPE_PATTERN" select="'MaintenancePriorityCode'"/>
	<xsl:variable name="MTF_MAJOR_EQUIPMENT_BLOCK_NUMBER_FIELD_ONE_TYPE_PATTERN" select="'MajorEquipmentFieldOneBlockNumber'"/>
	<xsl:variable name="MTF_MAJOR_EQUIPMENT_BLOCK_NUMBER_FIELD_TWO_TYPE_PATTERN" select="'MajorEquipmentFieldTwoBlockNumber'"/>
	<xsl:variable name="MTF_MET_RELATIVE_HUMIDITY_TYPE_PATTERN" select="'MetRelativeHumidityPercent'"/>
	<xsl:variable name="MTF_MGRS_UTM_1000_METER_EASTING_TYPE_PATTERN" select="'MgrsUtmThousandEastingNumber'"/>
	<xsl:variable name="MTF_MGRS_UTM_1000_METER_NORTHING_TYPE_PATTERN" select="'MgrsUtmThousandNorthingNumber'"/>
	<xsl:variable name="MTF_MGRS_UTM_GRID_ZONE_COLUMN_TYPE_PATTERN" select="'MgrsUtmGridZoneColumnNumber'"/>
	<xsl:variable name="MTF_MINUTE_EASTING_GEOREF_TYPE_PATTERN" select="'EastingGeorefMeasure'"/>
	<xsl:variable name="MTF_MINUTE_NORTHING_GEOREF_TYPE_PATTERN" select="'NorthingGeorefMeasure'"/>
	<xsl:variable name="MTF_MINUTE_TIME_TYPE_PATTERN" select="'MinuteTimeMeasure'"/>
	<xsl:variable name="MTF_MISSILE_ALIGNED_TYPE_PATTERN" select="'AlignedMissileQuantity'"/>
	<xsl:variable name="MTF_MISSION_ASSIGNED_TYPE_PATTERN" select="'AssignedMissionQauntity'"/>
	<xsl:variable name="MTF_MVI_SERIAL_NUMBER_PART_1_TYPE_PATTERN" select="'MviPartOneSerialNumber'"/>
	<xsl:variable name="MTF_NATIONAL_IMAGERY_INTERPRETATION_RATING_SCALE_NIIRS_TYPE_PATTERN" select="'NationalImageryInterpretationRatingScaleNiirsNumber'"/>
	<xsl:variable name="MTF_NUMBER_ESCORTED_TYPE_PATTERN" select="'EscortedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_00_TO_99_TYPE_PATTERN" select="'Aircraft00To99Number'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_CONTROLLERS_TYPE_PATTERN" select="'AircraftControllerQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_INVOLVED_TYPE_PATTERN" select="'AircraftInvolvedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_DAYS_FROM_REQUISITION_DATE_TYPE_PATTERN" select="'DaysFromRequisitionDateQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_FEMALE_ENLISTED_TYPE_PATTERN" select="'FemaleEnlistedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_FEMALE_OFFICERS_TYPE_PATTERN" select="'FemaleOfficerQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MALE_ENLISTED_TYPE_PATTERN" select="'MaleEnlistedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MALE_OFFICERS_TYPE_PATTERN" select="'MaleOfficerQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_OBJECTS_IN_A_TRACK_NUMBER_TYPE_PATTERN" select="'ObjectTrackNumberValue'"/>
	<xsl:variable name="MTF_NUMBER_OF_RUNS_TYPE_PATTERN" select="'RunQuantity'"/>
	<xsl:variable name="MTF_OUTER_RANGE_IN_THOUSANDS_OF_YARDS_TYPE_PATTERN" select="'OuterRangeMeasure'"/>
	<xsl:variable name="MTF_PERCENT_OF_MINE_FIELD_MIX_TYPE_PATTERN" select="'MinefieldMixPercent'"/>
	<xsl:variable name="MTF_PERCENT_PARTIAL_COVERAGE_TYPE_PATTERN" select="'PartialCoveragePercent'"/>
	<xsl:variable name="MTF_PERCENT_PROBABILITY_OF_DETECTION_TYPE_PATTERN" select="'DetectionProbabilityPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_DEMINERALIZED_WATER_REMAINING_TYPE_PATTERN" select="'DemineralizedWaterRemainPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_DIESEL_FUEL_REMAINING_TYPE_PATTERN" select="'DieselFuelRemainPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_FRESH_WATER_REMAINING_TYPE_PATTERN" select="'FreshWaterRemainPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_HYDRAULIC_OIL_REMAINING_TYPE_PATTERN" select="'HydraulicOilRemainPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_TASK_COMPLETED_TYPE_PATTERN" select="'TaskCompletePercent'"/>
	<xsl:variable name="MTF_POSTURE_ATTAINMENT_TIME_IN_HOURS_TYPE_PATTERN" select="'PostureAttainmentTimeMeasure'"/>
	<xsl:variable name="MTF_PRIMARY_MISSILE_TYPE_PATTERN" select="'PrimaryMissileQuantity'"/>
	<xsl:variable name="MTF_REACTION_TIME_IN_MINUTES_TYPE_PATTERN" select="'ReactionTimeMeasure'"/>
	<xsl:variable name="MTF_READY_SPARE_MISSILE_TYPE_PATTERN" select="'ReadySpareMissileQuantity'"/>
	<xsl:variable name="MTF_RECOVERY_TIME_IN_MINUTES_TYPE_PATTERN" select="'RecoveryTimeMeasure'"/>
	<xsl:variable name="MTF_REMAINING_AMMUNITION_IN_PERCENT_TYPE_PATTERN" select="'AmmunitionRemainPercent'"/>
	<xsl:variable name="MTF_REMAINING_FUEL_OIL_IN_PERCENT_TYPE_PATTERN" select="'FuelOilRemainPercent'"/>
	<xsl:variable name="MTF_REMAINING_LUBE_OIL_IN_PERCENT_TYPE_PATTERN" select="'LubeOilRemainPercent'"/>
	<xsl:variable name="MTF_REMAINING_PROVISIONS_IN_PERCENT_TYPE_PATTERN" select="'ProvisionRemainPercent'"/>
	<xsl:variable name="MTF_REMAINING_WATER_IN_PERCENT_TYPE_PATTERN" select="'WaterRemainPercent'"/>
	<xsl:variable name="MTF_RIGHT_AREA_BOUNDARY_IN_TENS_OF_DEGREES_TYPE_PATTERN" select="'RightAreaBoundaryTenMeasure'"/>
	<xsl:variable name="MTF_ROE_NUMERIC_INDICATOR_TWO_DIGITS_TYPE_PATTERN" select="'TwoDigitRoeNumber'"/>
	<xsl:variable name="MTF_SALVO_SIZE_TYPE_PATTERN" select="'SalvoQuantity'"/>
	<xsl:variable name="MTF_SECOND_TIME_TYPE_PATTERN" select="'SecondTimeMeasure'"/>
	<xsl:variable name="MTF_STAGGER_LEGS_TYPE_PATTERN" select="'StaggerLegsQuantity'"/>
	<xsl:variable name="MTF_STREAM_TIME_IN_MINUTES_TYPE_PATTERN" select="'StreamTimeMeasure'"/>
	<xsl:variable name="MTF_TIME_IN_MINUTES_TYPE_PATTERN" select="'TimeMinuteMeasure'"/>
	<xsl:variable name="MTF_TIME_IN_SECONDS_TYPE_PATTERN" select="'TimeSecondMeasure'"/>
	<xsl:variable name="MTF_TRACK_LEG_TYPE_PATTERN" select="'SequentialTrackLegNumber'"/>
	<xsl:variable name="MTF_TYPE_OF_CONTOUR_TYPE_PATTERN" select="'TypeOfContourPercent'"/>
	<xsl:variable name="MTF_UNIT_SPEED_IN_KNOTS_TYPE_PATTERN" select="'UnitSpeedMeasure'"/>
	<xsl:variable name="MTF_UTM_FALSE_NORTHING_TYPE_PATTERN" select="'UtmFalseNorthingList'"/>
	<xsl:variable name="MTF_UTM_GRID_ZONE_COLUMN_TYPE_PATTERN" select="'UtmGridZoneColumnNumber'"/>
	<xsl:variable name="MTF_AIR_TEMPERATURE_MEASUREMENT_TYPE_PATTERN" select="'AirTemperatureMeasurementNumber'"/>
	<xsl:variable name="MTF_AREA_NAME_ESTIMATED_TYPE_PATTERN" select="'AreaEstimatedName'"/>
	<xsl:variable name="MTF_ARRIVAL_PLACE_NAME_TYPE_PATTERN" select="'DesignatedArrivalPlaceName'"/>
	<xsl:variable name="MTF_ARRIVAL_PLACE_TYPE_PATTERN" select="'ArrivalPlaceName'"/>
	<xsl:variable name="MTF_BASE_OF_DEPLOYMENT_TYPE_PATTERN" select="'DeploymentBaseName'"/>
	<xsl:variable name="MTF_CALL_SIGN_BOOK_TYPE_PATTERN" select="'CallSignBookText'"/>
	<xsl:variable name="MTF_CITY_OF_OWNER_REGISTRATION_TYPE_PATTERN" select="'OwnerRegistrationCityName'"/>
	<xsl:variable name="MTF_CITY_TYPE_PATTERN" select="'CityName'"/>
	<xsl:variable name="MTF_CONTACT_SHIP_TASKED_TYPE_PATTERN" select="'TaskedContactShipName'"/>
	<xsl:variable name="MTF_DEPARTURE_PLACE_NAME_TYPE_PATTERN" select="'DesignatedDeparturePlaceName'"/>
	<xsl:variable name="MTF_DEPARTURE_PLACE_TYPE_PATTERN" select="'DeparturePlaceName'"/>
	<xsl:variable name="MTF_DEPARTURE_POINT_TYPE_PATTERN" select="'DeparturePointName'"/>
	<xsl:variable name="MTF_EW_CALL_SIGN_TYPE_PATTERN" select="'EwCallSignID'"/>
	<xsl:variable name="MTF_GEOGRAPHIC_AREA_TYPE_PATTERN" select="'GeographicAreaText'"/>
	<xsl:variable name="MTF_GROUND_SITE_CALL_SIGN_TYPE_PATTERN" select="'GroundSiteCallSignName'"/>
	<xsl:variable name="MTF_HOME_PORT_TYPE_PATTERN" select="'HomePortName'"/>
	<xsl:variable name="MTF_INPORT_PLACE_TYPE_PATTERN" select="'InportPlaceName'"/>
	<xsl:variable name="MTF_LOCALITY_OF_BIRTH_TYPE_PATTERN" select="'BirthLocationName'"/>
	<xsl:variable name="MTF_NADGE_STATION_CALL_SIGN_TYPE_PATTERN" select="'NadgeStationCallSignName'"/>
	<xsl:variable name="MTF_NAME_OF_JOINING_SHIP_TYPE_PATTERN" select="'JoiningShipName'"/>
	<xsl:variable name="MTF_NAME_OF_SHIPBEING_JOINED_TYPE_PATTERN" select="'ShipBeingJoinedName'"/>
	<xsl:variable name="MTF_NAME_OF_UNIT_IN_COMMAND_TYPE_PATTERN" select="'UnitInCommandName'"/>
	<xsl:variable name="MTF_ORGANIZATION_TITLE_TYPE_PATTERN" select="'OrganizationTitleText'"/>
	<xsl:variable name="MTF_OTHER_PLATFORM_CALL_SIGN_TYPE_PATTERN" select="'OtherPlatformCallSignName'"/>
	<xsl:variable name="MTF_PARENT_UNIT_IDENTIFICATION_TYPE_PATTERN" select="'ParentUnitID'"/>
	<xsl:variable name="MTF_POC_LINK_FUNCTION_TYPE_PATTERN" select="'PocLinkFunctionText'"/>
	<xsl:variable name="MTF_PORT_OF_REGISTRATION_TYPE_PATTERN" select="'RegistrationPortName'"/>
	<xsl:variable name="MTF_REFERENCE_POINT_NAME_EXPANDED_TYPE_PATTERN" select="'ReferencePointExpandedName'"/>
	<xsl:variable name="MTF_SEARCH_ATTACK_UNIT_COMMANDER_TYPE_PATTERN" select="'SearchAttackUnitCommanderName'"/>
	<xsl:variable name="MTF_SECONDARY_GUARD_SHIP_TYPE_PATTERN" select="'SecondaryGuardShipName'"/>
	<xsl:variable name="MTF_SENSOR_DISCRIMINATION_TYPE_PATTERN" select="'SensorDiscriminationText'"/>
	<xsl:variable name="MTF_SHIP_NAME_OR_AGENCY_ASSUMING_CONTROL_TYPE_PATTERN" select="'ShipNameOrAgencyAssumingControlText'"/>
	<xsl:variable name="MTF_SHIP_NAME_SPECIFIC_TYPE_PATTERN" select="'SpecificShipName'"/>
	<xsl:variable name="MTF_SPECIFIC_AIRCRAFT_CALL_SIGN_TYPE_PATTERN" select="'SpecificAircraftCallSignName'"/>
	<xsl:variable name="MTF_SPECIFIC_CALL_SIGN_TYPE_PATTERN" select="'SpecificCallSignName'"/>
	<xsl:variable name="MTF_STANDBY_UNIT_TYPE_PATTERN" select="'StandbyUnitName'"/>
	<xsl:variable name="MTF_STAY_BACK_UNIT_TYPE_PATTERN" select="'StayBackUnitName'"/>
	<xsl:variable name="MTF_STRIKE_LOCATION_NAME_DESIGNATOR_TYPE_PATTERN" select="'StrikeLocationDesignatorName'"/>
	<xsl:variable name="MTF_SUBJECT_IDENTIFIER_TYPE_PATTERN" select="'SubjectID'"/>
	<xsl:variable name="MTF_UNIQUE_NAME_OF_SHIP_TYPE_PATTERN" select="'UniqueShipName'"/>
	<xsl:variable name="MTF_UNIT_BEING_JOINED_OR_DETACHED_FROM_TYPE_PATTERN" select="'UnitBeingJoinedOrDetachedFromName'"/>
	<xsl:variable name="MTF_UNIT_CALL_SIGN_TYPE_PATTERN" select="'UnitCallSignName'"/>
	<xsl:variable name="MTF_UNIT_COMMANDER_EMBARKED_TYPE_PATTERN" select="'UnitCommanderEmbarkedName'"/>
	<xsl:variable name="MTF_USAGE_TYPE_PATTERN" select="'UsageText'"/>
	<xsl:variable name="MTF_WEATHER_AREA_TYPE_PATTERN" select="'WeatherAreaName'"/>
	<xsl:variable name="MTF_ADJUSTED_TRACK_SPACING_TYPE_PATTERN" select="'AdjustedTrackSpaceMeasure'"/>
	<xsl:variable name="MTF_ALTITUDE_IN_FEET_ABOVE_GROUND_LEVEL_AGL_TYPE_PATTERN" select="'AltitudeAboveGroundLevelAglMeasure'"/>
	<xsl:variable name="MTF_ASSIGNED_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN" select="'AssignedStrengthPersonnelQuantity'"/>
	<xsl:variable name="MTF_ASSIGNED_STRENGTH_TYPE_PATTERN" select="'OrganizationAssignedStrengthNumber'"/>
	<xsl:variable name="MTF_AUTHORIZED_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN" select="'AuthorizedStrengthPersonnelQuantity'"/>
	<xsl:variable name="MTF_AUTHORIZED_STRENGTH_TYPE_PATTERN" select="'OrganizationAuthorizedStrengthNumber'"/>
	<xsl:variable name="MTF_AVAILABLE_STRENGTH_TYPE_PATTERN" select="'OrganizationAvailableStrengthNumber'"/>
	<xsl:variable name="MTF_BERTH_LENGTH_IN_METERS_TYPE_PATTERN" select="'BerthLengthMeasure'"/>
	<xsl:variable name="MTF_COORDINATION_LEVEL_IN_FEET_BEYOND_THE_IFF_OFF_LINE_TYPE_PATTERN" select="'CoordinationLevelBeyondIffOffLineMeasure'"/>
	<xsl:variable name="MTF_COORDINATION_LEVEL_IN_FEET_UP_TO_THE_IFF_OFF_LINE_TYPE_PATTERN" select="'CoordinationLevelInFeetUpToIffOffLineMeasure'"/>
	<xsl:variable name="MTF_COUNT_OF_BLOOD_PRODUCT_UNITS_TYPE_PATTERN" select="'BloodProductUnitQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_CRITICAL_PERSONNEL_ASSIGNED_TYPE_PATTERN" select="'CriticalPersonnelAssignedQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_CRITICAL_PERSONNEL_AVAILABLE_TYPE_PATTERN" select="'CriticalPersonnelAvailableQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_TOTAL_PERSONNEL_ASSIGNED_TYPE_PATTERN" select="'TotalPersonnellAssignedQuantity'"/>
	<xsl:variable name="MTF_COUNT_OF_TOTAL_PERSONNEL_AVAILABLE_TYPE_PATTERN" select="'TotalPersonnellAvailableQuantity'"/>
	<xsl:variable name="MTF_CRITICAL_PERSONNEL_AUTHORIZED_OR_REQUIRED_TYPE_PATTERN" select="'CriticalPersonnelAuthorizedOrRequiredQuantity'"/>
	<xsl:variable name="MTF_DEPLOYABLE_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN" select="'TotalStrengthPersonnelDeployableQuantity'"/>
	<xsl:variable name="MTF_DISTANCE_BETWEEN_LEADING_EDGE_IMPACT_POINT_TYPE_PATTERN" select="'LeadingEdgeImpactPointDistanceMeasure'"/>
	<xsl:variable name="MTF_ENGINE_HORSE_POWER_TYPE_PATTERN" select="'EnginePowerMeasure'"/>
	<xsl:variable name="MTF_ENTRANCE_LENGTH_IN_METERS_TYPE_PATTERN" select="'EntranceLengthMeasure'"/>
	<xsl:variable name="MTF_ENTRANCE_WIDTH_IN_METERS_TYPE_PATTERN" select="'EntranceWidthMeasure'"/>
	<xsl:variable name="MTF_HAZARD_DISTANCE_IN_METERS_TYPE_PATTERN" select="'HazardDistanceMeasure'"/>
	<xsl:variable name="MTF_HEIGHT_ABOVE_THE_GROUND_IN_METERS_TYPE_PATTERN" select="'HeightAboveGroundMeasure'"/>
	<xsl:variable name="MTF_OBSTACLE_LENGTH_IN_FEET_TYPE_PATTERN" select="'ObstacleLength'"/>
	<xsl:variable name="MTF_OBSTACLE_WIDTH_IN_FEET_TYPE_PATTERN" select="'ObstacleWidthMeasure'"/>
	<xsl:variable name="MTF_HEIGHT_IN_CENTIMETERS_TYPE_PATTERN" select="'HeightMeasure'"/>
	<xsl:variable name="MTF_HELICOPTER_LANDING_AREA_ELEVATION_IN_METERS_TYPE_PATTERN" select="'HelicopterLandingAreaElevationMeasure'"/>
	<xsl:variable name="MTF_HELICOPTER_LANDING_AREA_LENGTH_IN_METERS_TYPE_PATTERN" select="'HelicopterLandingAreaLengthMeasure'"/>
	<xsl:variable name="MTF_HELICOPTER_LANDING_AREA_WIDTH_IN_METERS_TYPE_PATTERN" select="'HelicopterLandingAreaWidthMeasure'"/>
	<xsl:variable name="MTF_HOURS_AWAITING_PARTS_TYPE_PATTERN" select="'AwaitingPartMeasure'"/>
	<xsl:variable name="MTF_HOURS_BETWEEN_FAILURES_TYPE_PATTERN" select="'BetweenFailureMeasure'"/>
	<xsl:variable name="MTF_HOURS_TO_REPAIR_TYPE_PATTERN" select="'RepairMeasure'"/>
	<xsl:variable name="MTF_INTERIM_SUPPLY_ALLOWANCE_TYPE_PATTERN" select="'InterimSupplyAllowanceQuantity'"/>
	<xsl:variable name="MTF_LENGTH_IN_CENTIMETERS_TYPE_PATTERN" select="'LengthMeasure'"/>
	<xsl:variable name="MTF_LEXIT_DISTANCE_IN_METERS_TYPE_PATTERN" select="'LexitDistanceMeasure'"/>
	<xsl:variable name="MTF_LEXIT_WIDTH_IN_METERS_TYPE_PATTERN" select="'LexitWidthMeasure'"/>
	<xsl:variable name="MTF_MAD_OPERATIONAL_EFFECTIVENESS_AREA_IDENTIFIER_TYPE_PATTERN" select="'MadOperationalEffectivenessAreaID'"/>
	<xsl:variable name="MTF_MAD_MAXIMUM_DECK_LOAD_CAPACITY_IN_KILOGRAMS_TYPE_PATTERN" select="'MaximumDeckLoadCapacityMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_DISTANCE_TYPE_PATTERN" select="'MaximumDistanceMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_HANDLING_CAPACITY_IN_TONS_TYPE_PATTERN" select="'MaximumHandlingCapacityMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_RANGE_IN_TENS_OF_METERS_TYPE_PATTERN" select="'MaximumRangeTenMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_DISTANCE_TYPE_PATTERN" select="'MinimumDistanceMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_RANGE_IN_TENS_OF_METERS_TYPE_PATTERN" select="'MinimumRangeTenMeasure'"/>
	<xsl:variable name="MTF_NUMBER_OF_PARTS_RECEIVED_TYPE_PATTERN" select="'PartsReceivedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_PATIENTS_TYPE_PATTERN" select="'PatientQuantity'"/>
	<xsl:variable name="MTF_OBSTACLE_LENGTH_IN_METERS_TYPE_PATTERN" select="'ObstacleLengthMeasure'"/>
	<xsl:variable name="MTF_OBSTACLE_WIDTH_IN_METERS_TYPE_PATTERN" select="'ObstacleWidthMeasure'"/>
	<xsl:variable name="MTF_ONBOARD_QUANTITY_TYPE_PATTERN" select="'OnboardQuantity'"/>
	<xsl:variable name="MTF_OVERFLOW_HOLDING_BEDS_TYPE_PATTERN" select="'OverflowHoldingBedQuantity'"/>
	<xsl:variable name="MTF_OVERRUN_LENGTH_IN_FEET_TYPE_PATTERN" select="'OverrunLengthMeasure'"/>
	<xsl:variable name="MTF_PARKING_AREA_LENGTH_IN_METERS_TYPE_PATTERN" select="'ParkingAreaLengthMeasure'"/>
	<xsl:variable name="MTF_PARKING_AREA_WIDTH_IN_METERS_TYPE_PATTERN" select="'ParkingAreaWidthMeasure'"/>
	<xsl:variable name="MTF_PLATFORM_TRACKS_TYPE_PATTERN" select="'PlatformTrackQuantity'"/>
	<xsl:variable name="MTF_PORT_DISTANCE_IN_METERS_TYPE_PATTERN" select="'PortDistanceMeasure'"/>
	<xsl:variable name="MTF_POSSESSED_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN" select="'PossessedStrengthPersonnelQuantity'"/>
	<xsl:variable name="MTF_PRECISION_LOCATION_STRIKE_SYSTEM_NUMBER_TYPE_PATTERN" select="'PrecisionLocationStrikeSystemID'"/>
	<xsl:variable name="MTF_QUANTITY_OF_ORDNANCE_EXPENDED_TYPE_PATTERN" select="'OrdnanceExpendedQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_ORDERED_TYPE_PATTERN" select="'OrderedQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_REQUIRED_FOR_CASUALTY_TYPE_PATTERN" select="'RequiredForCasualtyQuantity'"/>
	<xsl:variable name="MTF_RANGE_IN_METERS_TYPE_PATTERN" select="'RangeMeasure'"/>
	<xsl:variable name="MTF_REQUIRED_STRENGTH_TYPE_PATTERN" select="'RequiredStrengthNumber'"/>
	<xsl:variable name="MTF_RUNWAY_LENGTH_IN_METERS_TYPE_PATTERN" select="'RunwayLengthMeasure'"/>
	<xsl:variable name="MTF_RUNWAY_WIDTH_IN_METERS_TYPE_PATTERN" select="'RunwayWidthMeasure'"/>
	<xsl:variable name="MTF_SHAFT_HORSEPOWER_TYPE_PATTERN" select="'ShaftPowerMeasure'"/>
	<xsl:variable name="MTF_SOURCE_LINK_DESIGNATOR_TYPE_PATTERN" select="'SourceLinkDesignatorNumber'"/>
	<xsl:variable name="MTF_STRUCTURED_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN" select="'StructuredStrengthPersonnelQuantity'"/>
	<xsl:variable name="MTF_SURF_ZONE_WIDTH_IN_METERS_TYPE_PATTERN" select="'SurfZoneWidthMeasure'"/>
	<xsl:variable name="MTF_TASKED_DEPLOYABLE_PERSONNEL_COUNT_TYPE_PATTERN" select="'TaskedDeployablePersonnelQuantity'"/>
	<xsl:variable name="MTF_TAXIWAY_LENGTH_IN_METERS_TYPE_PATTERN" select="'TaxiwayLengthMeasure'"/>
	<xsl:variable name="MTF_TAXIWAY_WIDTH_IN_METERS_TYPE_PATTERN" select="'TaxiwayWidthMeasure'"/>
	<xsl:variable name="MTF_TOTAL_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN" select="'PatientAssignedBedQuantity'"/>
	<xsl:variable name="MTF_TOTAL_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN" select="'PatientsRequiredBedQuantity'"/>
	<xsl:variable name="MTF_TOTAL_PERSONNEL_AUTHORIZED_OR_REQUIRED_TYPE_PATTERN" select="'TotalPersonnelAuthorizedOrRequiredQuantity'"/>
	<xsl:variable name="MTF_TOTAL_TRACKS_TYPE_PATTERN" select="'TotalTrackQuantity'"/>
	<xsl:variable name="MTF_WIDTH_IN_CENTIMETERS_TYPE_PATTERN" select="'WidthMeasure'"/>
	<xsl:variable name="MTF_ANGLE_T_IN_MILS_TYPE_PATTERN" select="'AngleTMeasure'"/>
	<xsl:variable name="MTF_ATTITUDE_IN_MILS_TYPE_PATTERN" select="'AttitudeMeasure'"/>
	<xsl:variable name="MTF_AZIMUTH_OF_FIRE_IN_MILS_TYPE_PATTERN" select="'FireAzimuthMeasure'"/>
	<xsl:variable name="MTF_AZIMUTH_OF_LEFT_TRAVERSE_LIMIT_IN_MILS_TYPE_PATTERN" select="'LeftTraverseLimitAzimuthMeasure'"/>
	<xsl:variable name="MTF_AZIMUTH_OF_RIGHT_TRAVERSE_LIMIT_IN_MILS_TYPE_PATTERN" select="'RightTraverseLimitAzimuthMeasure'"/>
	<xsl:variable name="MTF_BAROMETRIC_PRESSURE_IN_MILLIBARS_TYPE_PATTERN" select="'BarometricPressureMeasure'"/>
	<xsl:variable name="MTF_COMMERCIAL_FAX_EXTENSION_TYPE_PATTERN" select="'CommercialFaxExtensionNumber'"/>
	<xsl:variable name="MTF_DOWNWIND_DIRECTION_IN_MILS_TYPE_PATTERN" select="'DownwindDirectionMeasure'"/>
	<xsl:variable name="MTF_DSN_FAX_EXTENSION_TYPE_PATTERN" select="'DsnFaxExtensionNumber'"/>
	<xsl:variable name="MTF_DSN_STUIII_EXTENSION_TYPE_PATTERN" select="'DsnStuIiiExtensionNumber'"/>
	<xsl:variable name="MTF_END_YEAR_TYPE_PATTERN" select="'EndYearNumber'"/>
	<xsl:variable name="MTF_FEDERAL_SUPPLY_CLASS_TYPE_PATTERN" select="'FederalSupplyClassNumber'"/>
	<xsl:variable name="MTF_GUN_TARGET_LINE_IN_MILS_TYPE_PATTERN" select="'GunTargetLineMeasure'"/>
	<xsl:variable name="MTF_INET_PORT_TYPE_PATTERN" select="'InetPortNumber'"/>
	<xsl:variable name="MTF_LEFT_RADIAL_LINE_ORIENTATION_TYPE_PATTERN" select="'LeftRadialLineOrientationMeasure'"/>
	<xsl:variable name="MTF_MET_AIR_PRESSURE_IN_MILLIBARS_TYPE_PATTERN" select="'MetAirPressureMeasure'"/>
	<xsl:variable name="MTF_MET_AIR_VIRTUAL_TEMPERATURE_IN_TENTHS_OF_DEGREES_KELVIN_TYPE_PATTERN" select="'MetAirVirtualTemperatureTenthMeasure'"/>
	<xsl:variable name="MTF_MGRS_UTM_10_METER_EASTING_TYPE_PATTERN" select="'MgrsUtmEastingTenMeasure'"/>
	<xsl:variable name="MTF_MGRS_UTM_10_METER_NORTHING_TYPE_PATTERN" select="'MgrsUtmNorthingTenMeasure'"/>
	<xsl:variable name="MTF_MISSION_YEAR_TYPE_PATTERN" select="'MissionYearMeasure'"/>
	<xsl:variable name="MTF_NUMERIC_DESIGNATION_OF_UNIT_TYPE_PATTERN" select="'UnitDesignation'"/>
	<xsl:variable name="MTF_NUMERICAL_TARGET_DESIGNATOR_TYPE_PATTERN" select="'TargetDesignatorNumber'"/>
	<xsl:variable name="MTF_OBSERVER_TARGET_AZIMUTH_IN_MILS_TYPE_PATTERN" select="'ObserverTargetAzimuthMeasure'"/>
	<xsl:variable name="MTF_OPERATOR_ASSISTED_EXTENSION_TYPE_PATTERN" select="'OperatorAssistedExtensionNumber'"/>
	<xsl:variable name="MTF_ORDER_OF_BATTLE_COUNT_TYPE_PATTERN" select="'OrderOfBattleQuantity'"/>
	<xsl:variable name="MTF_RIGHT_RADIAL_LINE_ORIENTATION_TYPE_PATTERN" select="'RightRadialLineOrientationMeasure'"/>
	<xsl:variable name="MTF_SEQUENCE_SORT_KEY_NUMBER_TYPE_PATTERN" select="'SortKeySequenceNumber'"/>
	<xsl:variable name="MTF_SPEED_OF_SOUND_IN_WATER_METERS_PER_SECOND_TYPE_PATTERN" select="'SpeedOfSoundInWaterMeasure'"/>
	<xsl:variable name="MTF_START_YEAR_TYPE_PATTERN" select="'StartMeasure'"/>
	<xsl:variable name="MTF_TEN_THOUSANDTH_OF_MINUTE_OF_LATITUDE_TYPE_PATTERN" select="'LatitudeTenThousanthMeasure'"/>
	<xsl:variable name="MTF_TEN_THOUSANDTH_OF_MINUTE_OF_LONGITUDE_TYPE_PATTERN" select="'LongitudeTenThousanthMeasure'"/>
	<xsl:variable name="MTF_TRANSMISSION_POWER_WATTS_TYPE_PATTERN" select="'TransmissionPowerMeasure'"/>
	<xsl:variable name="MTF_VEHICLE_YEAR_TYPE_PATTERN" select="'VehicleYearMeasure'"/>
	<xsl:variable name="MTF_WIND_DIRECTION_IN_MILS_TYPE_PATTERN" select="'WindDirectionMeasure'"/>
	<xsl:variable name="MTF_ALLOWABLE_CABIN_LOAD_IN_POUNDS_TYPE_PATTERN" select="'AllowedCabinLoadMeasure'"/>
	<xsl:variable name="MTF_AMOUNT_OF_AMMUNITION_TYPE_PATTERN" select="'AmmunitionQuantity'"/>
	<xsl:variable name="MTF_CONTACT_ALTITUDE_FEET_ABOVE_MSL_TYPE_PATTERN" select="'ContactAltitudeAboveMslMeasure'"/>
	<xsl:variable name="MTF_COUNT_OF_ENTITIES_INVOLVED_IN_EVENT_TYPE_PATTERN" select="'EventEntityQuantity'"/>
	<xsl:variable name="MTF_FUEL_CONSUMPTION_UNIT_IN_CUBIC_METERS_TYPE_PATTERN" select="'FuelConsumptionUnitMeasure'"/>
	<xsl:variable name="MTF_FUEL_USED_GALLONS_TYPE_PATTERN" select="'FuelUseMeasure'"/>
	<xsl:variable name="MTF_MAIL_AND_OR_CARGO_OFF_NEXT_STATION_IN_POUNDS_TYPE_PATTERN" select="'MailAndOrCargoOffNextStationMeasure'"/>
	<xsl:variable name="MILITARY_PORT_CAPACITY_IN_METRIC_TONS_TYPE_PATTERN" select="'MilitaryPortCapacityMeasure'"/>
	<xsl:variable name="MTF_OPERATING_WEIGHT_IN_POUNDS_TYPE_PATTERN" select="'OperatingWeightMeasure'"/>
	<xsl:variable name="MTF_OPTIMUM_RECEIVER_ALTITUDE_TYPE_PATTERN" select="'OptimumReceiverAltitudeMeasure'"/>
	<xsl:variable name="MTF_QUANTITY_ON_HAND_TYPE_PATTERN" select="'OnHandQuantity'"/>
	<xsl:variable name="MTF_QUANTITY_TABLE_OF_ENTITLEMENT_TYPE_PATTERN" select="'EntitlementTableQuantity'"/>
	<xsl:variable name="MTF_ROUNDS_OF_AMMUNITION_MISSILES_ON_HAND_TYPE_PATTERN" select="'AmmunitionMissileRoundOnHandQuantity'"/>
	<xsl:variable name="MTF_TONNAGE_CAPACITY_TYPE_PATTERN" select="'TonnageCapacityMeasure'"/>
	<xsl:variable name="MTF_TOTAL_MAIL_AND_OR_CARGO_ABOARD_IN_POUNDS_TYPE_PATTERN" select="'TotalMailAndOrCargoAboardMeasure'"/>
	<xsl:variable name="MTF_TOTAL_WEIGHT_ABOARD_TYPE_PATTERN" select="'TotalWeightAboardMeasure'"/>
	<xsl:variable name="MTF_WEIGHT_OF_SPECIAL_INTEREST_CARGO_IN_POUNDS_TYPE_PATTERN" select="'SpecialInterestCargoWeightMeasure'"/>
	<xsl:variable name="MTF_ACOUSTIC_SOURCE_TYPE_PATTERN" select="'AcousticSourceText'"/>
	<xsl:variable name="MTF_ADDITIONAL_SPACE_SYSTEM_IDENTIFIER_TYPE_PATTERN" select="'AdditionalSpaceSystemID'"/>
	<xsl:variable name="MTF_AREA_DESIGNATOR_TYPE_PATTERN" select="'AreaDesignatorNumber'"/>
	<xsl:variable name="MTF_ASW_WEAPON_TYPE_TYPE_PATTERN" select="'AswWeaponTypeName'"/>
	<xsl:variable name="MTF_CALL_SIGN_OF_CONTROL_AGENCY_TYPE_PATTERN" select="'CallSignOfControlAgencyName'"/>
	<xsl:variable name="MTF_CIRCUIT_NOMENCLATURE_TYPE_PATTERN" select="'CircuitNomenclatureText'"/>
	<xsl:variable name="MTF_COMPLYING_COMPONENT_COMMAND_OR_UNIT_TYPE_PATTERN" select="'ComplyingComponentCommandOrUnitName'"/>
	<xsl:variable name="MTF_COMPONENT_COMMAND_TYPE_PATTERN" select="'ComponentCommandName'"/>
	<xsl:variable name="MTF_DELIVERY_UNIT_TYPE_PATTERN" select="'DeliveryUnitName'"/>
	<xsl:variable name="MTF_EGRESS_ROUTE_IDENTIFICATION_TYPE_PATTERN" select="'EgressRouteID'"/>
	<xsl:variable name="MTF_EMITTER_EVALUATION_TYPE_PATTERN" select="'EmitterEvaluationText'"/>
	<xsl:variable name="MTF_INGRESS_ROUTE_IDENTIFICATION_TYPE_PATTERN" select="'IngressRouteID'"/>
	<xsl:variable name="MTF_LINK_MANAGEMENT_CODE_WORD_TYPE_PATTERN" select="'LinkManagementCodeWordText'"/>
	<xsl:variable name="MTF_OTHER_INFORMATION_MANAGEMENT_SERVICES_TYPE_PATTERN" select="'OtherInformationManagementServicesText'"/>
	<xsl:variable name="MTF_OWN_WEAPONS_TYPE_PATTERN" select="'OwnWeaponList'"/>
	<xsl:variable name="MTF_PART_NOMENCLATURE_TYPE_PATTERN" select="'PartNomenclatureText'"/>
	<xsl:variable name="MTF_REQUESTING_COMPONENT_COMMAND_TYPE_PATTERN" select="'RequestingComponentCommandName'"/>
	<xsl:variable name="MTF_REQUESTING_UNIT_TYPE_PATTERN" select="'RequestingUnitName'"/>
	<xsl:variable name="MTF_SENSOR_QUALIFIER_TYPE_PATTERN" select="'SensorQualifierText'"/>
	<xsl:variable name="MTF_SYSTEM_CIRCUITOR_FACILITY_DESIGNATION_TYPE_PATTERN" select="'SystemCircuitOrFacilityDesignationName'"/>
	<xsl:variable name="MTF_TARGET_MATERIAL_PAGE_TYPE_PATTERN" select="'TargetMaterialPageID'"/>
	<xsl:variable name="MTF_TARGET_OBJECTIVE_TYPE_PATTERN" select="'TargetObjectiveText'"/>
	<xsl:variable name="MTF_TRACK_DATA_SOURCE_OTHER_TYPE_PATTERN" select="'TrackDataSourceOtherCode'"/>
	<xsl:variable name="MTF_TYPE_OF_MAINTENANCE_EQUIPMENT_REQUIRED_TYPE_PATTERN" select="'MaintenanceEquipmentTypeRequiredName'"/>
	<xsl:variable name="MTF_UNIQUE_DESIGNATION_2_TYPE_PATTERN" select="'UniqueDesignationTwoText'"/>
	<xsl:variable name="MTF_UNIQUE_DESIGNATION_TYPE_PATTERN" select="'UniqueDesignationText'"/>
	<xsl:variable name="MTF_ARBITRARY_UNIT_IDENTIFIER_TYPE_PATTERN" select="'ArbitraryUnitID'"/>
	<xsl:variable name="MTF_DELIVERY_ADDRESS_TYPE_PATTERN" select="'DeliveryAddressText'"/>
	<xsl:variable name="MTF_EMITTER_DESIGNATION_SPECIAL_TYPE_PATTERN" select="'EmitterDesignationSpecialName'"/>
	<xsl:variable name="MTF_EMITTER_DESIGNATION_TYPE_PATTERN" select="'EmitterDesignationName'"/>
	<xsl:variable name="MTF_ENEMY_PARENT_UNIT_DESIGNATOR_TYPE_PATTERN" select="'EnemyParentUnitDesignatorName'"/>
	<xsl:variable name="MTF_EVACUATED_TO_UNIT_TYPE_PATTERN" select="'EvacuatedToUnitName'"/>
	<xsl:variable name="MTF_FIRE_UNIT_DESIGNATOR_TYPE_PATTERN" select="'FireUnitDesignatorName'"/>
	<xsl:variable name="MTF_GAINING_OPERATIONAL_AUTHORITY_TYPE_PATTERN" select="'GainingOperationalAuthorityGainID'"/>
	<xsl:variable name="MTF_LAUNCH_COMMENTS_TYPE_PATTERN" select="'LaunchCommentText'"/>
	<xsl:variable name="MTF_LOAD_TYPE_TYPE_PATTERN" select="'LoadTypeText'"/>
	<xsl:variable name="MTF_LOSING_OPERATIONAL_AUTHORITY_TYPE_PATTERN" select="'LosingOperationalAuthorityLossID'"/>
	<xsl:variable name="MTF_METHOD_OF_OPERATION_TYPE_PATTERN" select="'OperationMethodText'"/>
	<xsl:variable name="MTF_MISSION_OPERATIONS_TYPE_PATTERN" select="'OperationMissionText'"/>
	<xsl:variable name="MTF_PACING_ITEM_NOUN_DESCRIPTION_TYPE_PATTERN" select="'PacingItemNounDescriptionName'"/>
	<xsl:variable name="MTF_PERSONNEL_SKILL_TYPE_TYPE_PATTERN" select="'PersonnelSkillTypeRequiredText'"/>
	<xsl:variable name="MTF_PETROLEUM_FACILITY_IDENTIFICATION_TYPE_PATTERN" select="'PetroleumFacilityID'"/>
	<xsl:variable name="MTF_SATELLITE_ACCESS_AUTHORIZATION_AGENCY_DESIGNATOR_TYPE_PATTERN" select="'SatelliteAccessAuthorizationAgencyDesignatorName'"/>
	<xsl:variable name="MTF_SEARCH_AND_RESCUE_SAR_UNIT_SRU_IDENTIFIER_TYPE_PATTERN" select="'SearchAndRescueSarUnitSruID'"/>
	<xsl:variable name="MTF_SECURITY_CLEARANCE_GRANTING_AGENCY_TYPE_PATTERN" select="'SecurityClearanceGrantingAgencyName'"/>
	<xsl:variable name="MTF_SUPPORT_REQUEST_TYPE_TYPE_PATTERN" select="'SupportRequestTypeText'"/>
	<xsl:variable name="MTF_SUPPORTING_UNIT_TYPE_PATTERN" select="'SupportUnitName'"/>
	<xsl:variable name="MTF_TERMINAL_AREA_MODEL_IDENTIFIER_TYPE_PATTERN" select="'TerminalAreaModelID'"/>
	<xsl:variable name="MTF_TYPE_OF_EQUIPMENT_TYPE_PATTERN" select="'EquipmentClassName'"/>
	<xsl:variable name="MTF_TYPE_OF_SUBJECT_TYPE_PATTERN" select="'SubjectTypeName'"/>
	<xsl:variable name="MTF_UNIT_DESIGNATOR_TYPE_PATTERN" select="'FriendlyUnitDesignatorName'"/>
	<xsl:variable name="MTF_UNIT_IDENTIFIER_TYPE_PATTERN" select="'UnitID'"/>
	<xsl:variable name="MTF_UNIT_IDENTITY_TYPE_PATTERN" select="'UnitName'"/>
	<xsl:variable name="MTF_AIR_TASKING_ORDER_TYPE_PATTERN" select="'AirTaskingOrderText'"/>
	<xsl:variable name="MTF_AIRCRAFT_CALL_SIGN_TYPE_PATTERN" select="'AircraftCallSignName'"/>
	<xsl:variable name="MTF_AREA_AND_SEGMENT_TYPE_PATTERN" select="'AreaAndSegmentName'"/>
	<xsl:variable name="MTF_COMMON_IDENTIFIER_TYPE_PATTERN" select="'CommonID'"/>
	<xsl:variable name="MTF_COMPONENT_TARGET_IDENTIFIER_TYPE_PATTERN" select="'ComponentTargetID'"/>
	<xsl:variable name="MTF_COMSEC_KEYING_MATERIAL_TYPE_PATTERN" select="'ComsecKeyingMaterialText'"/>
	<xsl:variable name="MTF_DIPLOMATIC_CALL_SIGN_TYPE_PATTERN" select="'DiplomaticCallSignName'"/>
	<xsl:variable name="MTF_EMITTER_CALL_SIGN_TYPE_PATTERN" select="'EmitterCallSignName'"/>
	<xsl:variable name="MTF_ESCORTED_CALL_SIGN_TYPE_PATTERN" select="'EscortedCallSignName'"/>
	<xsl:variable name="MTF_INTEGRATED_TASKING_ORDER_TYPE_PATTERN" select="'IntegratedTaskingOrderText'"/>
	<xsl:variable name="MTF_INTERNATIONAL_POSTAL_ZIP_CODE_TYPE_PATTERN" select="'InternationalPostalZipCodeNumber'"/>
	<xsl:variable name="MTF_MASTER_AIR_ATTACK_PLAN_TYPE_PATTERN" select="'MasterAirAttackPlanText'"/>
	<xsl:variable name="MTF_MASTER_ATTACK_PLAN_TYPE_PATTERN" select="'MasterAttackPlanText'"/>
	<xsl:variable name="MTF_OTHER_TASKING_SOURCE_TYPE_PATTERN" select="'OtherTaskingSourceText'"/>
	<xsl:variable name="MTF_RECEIVER_CALL_SIGN_TYPE_PATTERN" select="'ReceiverCallSignName'"/>
	<xsl:variable name="MTF_RECONNAISSANCE_REPORT_REQUEST_TYPE_PATTERN" select="'ReconnaissanceReportRequestText'"/>
	<xsl:variable name="MTF_REFERENCE_TYPE_PATTERN" select="'ReferenceText'"/>
	<xsl:variable name="MTF_RENDEZVOUS_CALL_SIGN_TYPE_PATTERN" select="'RendezvousCallSignName'"/>
	<xsl:variable name="MTF_RESERVE_COMPONENT_ROUND_OUT_UNIT_NAME_ABBREVIATED_TYPE_PATTERN" select="'ReserveComponentRoundoutUnitAbbreviatedName'"/>
	<xsl:variable name="MTF_SAR_OBJECTIVE_CALL_SIGN_TYPE_PATTERN" select="'SarObjectiveCallSignName'"/>
	<xsl:variable name="MTF_TANKER_CALL_SIGN_TYPE_PATTERN" select="'TankerCallSignName'"/>
	<xsl:variable name="MTF_TRACK_CHANGE_TYPE_PATTERN" select="'TrackChangeText'"/>
	<xsl:variable name="MTF_TRACK_LINK_TYPE_PATTERN" select="'TrackLinkID'"/>
	<xsl:variable name="MTF_WORKSHEET_IDENTIFICATION_TYPE_PATTERN" select="'WorksheetID'"/>
	<xsl:variable name="MTF_WORKSHEET_VERSION_TYPE_PATTERN" select="'WorksheetVersionText'"/>
	<xsl:variable name="MTF_AIR_REFUELING_SHORT_TRACK_IDENTIFIER_TYPE_PATTERN" select="'AirRefuelingShortTrackID'"/>
	<xsl:variable name="MTF_ALPHA_NUMERIC_UNIQUE_ITEM_IDENTIFIER_4_DIGIT_TYPE_PATTERN" select="'AlphanumericUniqueItemFourDigitID'"/>
	<xsl:variable name="MTF_COMMUNICATIONS_EQUIPMENT_IDENTIFIER_TYPE_PATTERN" select="'CommunicationsEquipmentID'"/>
	<xsl:variable name="MTF_ICAO_LOCATION_INDICATOR_TYPE_PATTERN" select="'IcaoLocationCode'"/>
	<xsl:variable name="MTF_KQ_IDENTIFIER_TYPE_PATTERN" select="'KqID'"/>
	<xsl:variable name="MTF_LINK16_ABBREVIATED_CALL_SIGN_TYPE_PATTERN" select="'Link16AbbreviatedCallSignName'"/>
	<xsl:variable name="MTF_OPERATING_LOCATION_TYPE_PATTERN" select="'OperatingLocationName'"/>
	<xsl:variable name="MTF_SECONDARY_OR_SUBORDINATE_DOC_ID_TYPE_PATTERN" select="'SecondaryOrSubordinateDocID'"/>
	<xsl:variable name="MTF_THE_ARMY_REPORTING_INSTALLATION_FOR_STAT_TYPE_PATTERN" select="'ArmyReportingInstallationForstatCode'"/>
	<xsl:variable name="MTF_ALTERNATE_COMMUNICATIONS_NET_DESIGNATOR_TYPE_PATTERN" select="'AlternateCommunicationNetDesignatorName'"/>
	<xsl:variable name="MTF_CAS_FREQUENCY_TYPE_PATTERN" select="'CasFrequencyList'"/>
	<xsl:variable name="MTF_COMMUNICATIONS_ELECTRONICS_EQUIPMENT_MODEL_TYPE_PATTERN" select="'CommunicationElectronicEquipmentModelNumber'"/>
	<xsl:variable name="MTF_COMMUNICATIONS_NET_DESIGNATOR_TYPE_PATTERN" select="'CommunicationNetDesignatorName'"/>
	<xsl:variable name="MTF_COORDINATING_ESTABLISHING_AUTHORITY_IDENTIFIER_TYPE_PATTERN" select="'CoordinatingEstablishingAuthorityID'"/>
	<xsl:variable name="MTF_DATA_SOURCE_TYPE_PATTERN" select="'DataSourceName'"/>
	<xsl:variable name="MTF_FREQUENCY_JAMMED_DESIGNATOR_TYPE_PATTERN" select="'FrequencyJammedDesignatorText'"/>
	<xsl:variable name="MTF_ORDNANCE_WEAPON_SYSTEM_TYPE_TYPE_PATTERN" select="'OrdnanceWeaponSystemTypeName'"/>
	<xsl:variable name="MTF_PLACE_LOCATION_IDENTIFIER_TYPE_PATTERN" select="'PlaceLocationID'"/>
	<xsl:variable name="MTF_PRIMARY_COMMUNICATIONS_NET_DESIGNATOR_TYPE_PATTERN" select="'PrimaryCommunicationNetDesignatorName'"/>
	<xsl:variable name="MTF_SEQUENCE_NUMBER_ALFA_TYPE_PATTERN" select="'AlfaSequenceNumber'"/>
	<xsl:variable name="MTF_SPECIAL_SYMBOL_IDENTIFIER_TYPE_PATTERN" select="'SpecialSymbolID'"/>
	<xsl:variable name="MTF_STATION_DESIGNATOR_TYPE_PATTERN" select="'StationDesignatorName'"/>
	<xsl:variable name="MTF_STORAGE_CAPACITY_TYPE_PATTERN" select="'StorageCapacityIndicator'"/>
	<xsl:variable name="MTF_TAIL_NUMBER_AIRCRAFT_TYPE_PATTERN" select="'TailNumberAircraftText'"/>
	<xsl:variable name="MTF_WEAPON_TYPE_EXPENDED_TYPE_PATTERN" select="'WeaponTypeExpendedText'"/>
	<xsl:variable name="MTF_ALPHABETIC_INDICATOR_TYPE_PATTERN" select="'AlphabeticSymbolText'"/>
	<xsl:variable name="MTF_ANNOTATION_TYPE_PATTERN" select="'AnnotationDesignationText'"/>
	<xsl:variable name="MTF_AVIATION_UNIT_INDICATOR_TYPE_PATTERN" select="'AviationUnitCode'"/>
	<xsl:variable name="MTF_CAP_STATION_IDENTIFIER_TYPE_PATTERN" select="'CapStationCode'"/>
	<xsl:variable name="MTF_CARGO_CLASSIFICATION_TYPE_PATTERN" select="'CargoClassificationText'"/>
	<xsl:variable name="MTF_EMISSION_CONTROL_PLAN_TYPE_PATTERN" select="'EmissionControlPlanID'"/>
	<xsl:variable name="MTF_FREQUENCY_PLAN_TYPE_PATTERN" select="'FrequencyPlanName'"/>	
	<xsl:variable name="MTF_INITIAL_LETTER_TYPE_PATTERN" select="'InitialLetterText'"/>
	<xsl:variable name="MTF_LINE_ITEM_NUMBER_ALPHABETIC_TYPE_PATTERN" select="'LineItemNumberAlphabeticText'"/>
	<xsl:variable name="MTF_MCM_OPERATION_SUFFIX_TYPE_PATTERN" select="'McmOperationSuffixText'"/>
	<xsl:variable name="MTF_MINE_FIELD_SEGMENT_IDENTIFIER_TYPE_PATTERN" select="'MinefieldSegmentID'"/>
	<xsl:variable name="MTF_PACING_ITEM_UNIT_INDICATOR_TYPE_PATTERN" select="'PacingItemUnitCode'"/>
	<xsl:variable name="MTF_POINT_ALPHABETIC_IDENTIFIER_TYPE_PATTERN" select="'PointAlphabeticID'"/>
	<xsl:variable name="MTF_POLARIZATION_TYPE_PATTERN" select="'PolarizationOrientationText'"/>
	<xsl:variable name="MTF_PREFIX_A_TO_Z_TYPE_PATTERN" select="'PrefixAToZText'"/>
	<xsl:variable name="MTF_QROUTE_POINT_DESIGNATOR_TYPE_PATTERN" select="'QRoutePointDesignatorText'"/>
	<xsl:variable name="MTF_REQUISITION_SERIAL_NUMBER_SUFFIX_TYPE_PATTERN" select="'RequisitionSerialNumberSuffixText'"/>
	<xsl:variable name="MTF_SATELLITE_ACCESS_SUPPORT_SEGMENT_INDICATOR_TYPE_PATTERN" select="'SatelliteAccessSupportSegmentCode'"/>
	<xsl:variable name="MTF_SERIAL_IDENTIFIER_TYPE_PATTERN" select="'SerialIdentifierText'"/>
	<xsl:variable name="MTF_SERIAL_LETTER_TYPE_PATTERN" select="'SerialLetterText'"/>
	<xsl:variable name="MTF_SHIP_ALPHABETIC_IDENTIFIER_TYPE_PATTERN" select="'ShipAlphabeticCode'"/>
	<xsl:variable name="MTF_SUFFIX_A_TO_Z_TYPE_PATTERN" select="'SuffixAToZText'"/>
	<xsl:variable name="MTF_TASKING_PRIORITY_TYPE_PATTERN" select="'TaskingPriorityText'"/>
	<xsl:variable name="MTF_TPSN_IDENTIFIER_CODE_TYPE_PATTERN" select="'TpsnCode'"/>
	<xsl:variable name="MTF_AREA_WEAPON_CONTROL_AIRCRAFT_TYPE_PATTERN" select="'AreaWeaponControlAircraftText'"/>
	<xsl:variable name="MTF_AREA_WEAPON_CONTROL_SURFACE_TO_AIR_WEAPONS_TYPE_PATTERN" select="'AreaWeaponControlSurfaceToAirWeaponsText'"/>
	<xsl:variable name="MTF_BDA_RESULTS_TYPE_PATTERN" select="'BdaResultText'"/>
	<xsl:variable name="MTF_CHAT_MEMBERS_TYPE_PATTERN" select="'ChatMemberName'"/>
	<xsl:variable name="MTF_CHAT_PURPOSE_TYPE_PATTERN" select="'ChatPurposeText'"/>
	<xsl:variable name="MTF_DISCREPANCY_DESCRIPTION_TYPE_PATTERN" select="'DiscrepancyDescriptionText'"/>
	<xsl:variable name="MTF_EQUIPMENT_TRACKING_COMMENTS_TYPE_PATTERN" select="'EquipmentTrackingCommentText'"/>
	<xsl:variable name="MTF_FREEHAND_STAFF_COMMENTS_TYPE_PATTERN" select="'FreehandStaffCommentText'"/>
	<xsl:variable name="MTF_GENERAL_DESCRIPTION_TYPE_PATTERN" select="'GeneralDescriptionText'"/>
	<xsl:variable name="MTF_HANDLING_INSTRUCTIONS_TYPE_PATTERN" select="'HandlingInstructionText'"/>
	<xsl:variable name="MTF_MAINTENANCE_RESPONSE_TEAM_TRACKING_COMMENTS_TYPE_PATTERN" select="'MaintenanceResponseTeamTrackingCommentText'"/>
	<xsl:variable name="MTF_MESSAGE_SUBJECT_CONTINUED_TYPE_PATTERN" select="'MessageSubjectContinuedText'"/>
	<xsl:variable name="MTF_MISSION_HIGHLIGHTS_SUMMARY_OR_ANALYSIS_TYPE_PATTERN" select="'MissionHighlightSummaryOrAnalysisText'"/>
	<xsl:variable name="MTF_NAME_OF_APPROVER_TYPE_PATTERN" select="'ApproverName'"/>
	<xsl:variable name="MTF_NAMES_OF_REPORTS_REQUIRED_TYPE_PATTERN" select="'RequiredReportNamesList'"/>
	<xsl:variable name="MTF_OB_EQUIPMENT_COMMENTS_TYPE_PATTERN" select="'ObEquipmentCommentText'"/>
	<xsl:variable name="MTF_PARTS_TRACKING_COMMENTS_TYPE_PATTERN" select="'PartTrackingCommentText'"/>
	<xsl:variable name="MTF_SCHEDULE_REQUEST_COMMENTS_TYPE_PATTERN" select="'ScheduleRequestCommentText'"/>
	<xsl:variable name="MTF_TARGET_ACTIVITY_REMARKS_TYPE_PATTERN" select="'TargetActivityRemarkText'"/>
	<xsl:variable name="MTF_TARGET_AND_OR_INSTALLATION_DESCRIPTION_TYPE_PATTERN" select="'TargetAndOrInstallationDescriptionText'"/>
	<xsl:variable name="MTF_TARGET_DEFENSES_SECURITY_COMMENTS_TYPE_PATTERN" select="'TargetDefenseSecurityCommentText'"/>
	<xsl:variable name="MTF_USER_IDENTIFICATION_COMMENTS_TYPE_PATTERN" select="'UserID'"/>
	<xsl:variable name="MTF_VDS_MOVING_HAVEN_COMMENT_TYPE_PATTERN" select="'VdsMovingHavenComment'"/>
	<xsl:variable name="MTF_BATTALION_LOGICAL_CHANNEL_NUMBER_0_TO_9_TYPE" select="'BattalionLogicalChannel0To9Number'"/>
	<xsl:variable name="MTF_BRIGADE_LOGICAL_CHANNEL_NUMBER_0_TO_9_TYPE" select="'BrigadeLogicalChannel0To9Number'"/>
	<xsl:variable name="MTF_LATITUDE_INDICATOR_DEGREES_TYPE" select="'LatitudeSingleDigitDegreeMeasure'"/>
	<xsl:variable name="MTF_LONGITUDE_INDICATOR_DEGREES_TYPE" select="'LongitudeSingleDigitDegreeMeasure'"/>
	<xsl:variable name="MTF_MODIFIED_SURF_INDEX_MSI_TYPE" select="'ModifiedSurfIndexMsiNumber'"/>
	<xsl:variable name="MTF_NUMBER_OF_COORDINATED_MISSIONS_TYPE" select="'CoordinatedMissionQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ENGINES_SIGHTED_TYPE" select="'EngineSightedQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_MASTS_TYPE" select="'MastQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_RADIOS_TYPE" select="'RadioQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SHAFTS_PROPS_TYPE" select="'ShaftPropQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_STACKS_TYPE" select="'StackQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_SUBMARINES_EMPLOYED_TYPE" select="'SubmarineEmployedQuantity'"/>
	<xsl:variable name="MTF_TENTH_OF_HOUR_TYPE" select="'TenthHourMeasure'"/>
	<xsl:variable name="MTF_TENTH_OF_SECOND_OF_LATITUDE_TYPE" select="'LatitudeTenthSecondMeasure'"/>
	<xsl:variable name="MTF_TENTH_OF_SECOND_OF_LONGITUDE_TYPE" select="'LongitudeTenthSecondMeasure'"/>
	<xsl:variable name="MTF_TIME_IN_HOURS_TYPE" select="'SingleHourMeasure'"/>
	<xsl:variable name="MTF_UTM_FALSE_EASTING_TYPE" select="'UtmFalseEastingNumber'"/>
	<xsl:variable name="MTF_YEAR_DESIGNATOR_TYPE" select="'YearDesignatorNumber'"/>
	<xsl:variable name="MTF_CODE_FOR_ORIGINATOR_TYPE" select="'OriginatorCode'"/>
	<xsl:variable name="MTF_EQUIPMENT_MODEL_TYPE" select="'EquipmentModelNumber'"/>
	<xsl:variable name="MTF_FIRE_PLAN_DESIGNATION_TYPE" select="'FirePlanDesignationName'"/>
	<xsl:variable name="MTF_NAME_OF_UNIT_CREATING_TRACK_TYPE" select="'CreatingUnitTrackName'"/>
	<xsl:variable name="MTF_NAME_OF_UNIT_SCHEDULING_TRACK_TYPE" select="'SchedulingUnitTrackName'"/>
	<xsl:variable name="MTF_REPORTING_UNIT_CODE_TYPE" select="'ReportingUnitCodeName'"/>
	<xsl:variable name="MTF_SAM_STATUS_COMMENT_TYPE" select="'SamStatusCommentText'"/>
	<xsl:variable name="MTF_SERIES_DESIGNATOR_TYPE" select="'SeriesDesignatorText'"/>
	<xsl:variable name="MTF_TYPE_OF_CONTAINER_TYPE" select="'ContainerTypeName'"/>
	<xsl:variable name="MTF_UNIT_IDENTIFIER_OF_MAINTENANCE_RECOVERY_TEAM_TYPE" select="'MaintenanceRecoveryTeamUnitID'"/>
	<xsl:variable name="MTF_UNIT_NAME_AMC_TYPE" select="'AmcUnitName'"/>
	<xsl:variable name="MTF_WEAPON_CALIBER_TYPE" select="'WeaponCaliberName'"/>
	<xsl:variable name="MTF_AGENCY_CONTACT_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'AgencyContactFrequencyMeasure'"/>
	<xsl:variable name="MTF_CRYSTAL_FREQUENCY_IN_KILOHERTZ_TYPE" select="'CrystalFrequencyMeasure'"/>
	<xsl:variable name="MTF_FORCE_MARSHALLER_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'ForceMarshallerFrequencyMeasure'"/>
	<xsl:variable name="MTF_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'FrequencyMeasure'"/>
	<xsl:variable name="MTF_GUIDANCE_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'GuidanceFrequencyMeasure'"/>
	<xsl:variable name="MTF_IMAGERY_DATA_LINK_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'ImageryDataLinkFrequencyMeasure'"/>
	<xsl:variable name="MTF_LANDING_SITE_PRIMARY_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'LandingSitePrimaryFrequencyMeasure'"/>
	<xsl:variable name="MTF_LANDING_SITE_SECONDARY_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'LandingSiteSecondaryFrequencyMeasure'"/>
	<xsl:variable name="MTF_LOWER_FREQUENCY_IN_PULSES_PER_SECOND_TYPE" select="'LowerFrequencyPulseNumber'"/>
	<xsl:variable name="MTF_LOWER_FREQUENCY_LIMIT_IN_MEGAHERTZ_TYPE" select="'LowerFrequencyLimitMeasure'"/>
	<xsl:variable name="MTF_NAVIGATIONAL_AID_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'NavigationalAidFrequencyMeasure'"/>
	<xsl:variable name="MTF_OPTIMUM_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'OptimumFrequencyMeasure'"/>
	<xsl:variable name="MTF_PRIMARY_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'PrimaryFrequencyMeasure'"/>
	<xsl:variable name="MTF_RADIO_FREQUENCY_BANDWIDTH_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'RadioFrequencyBandwidthMeasure'"/>
	<xsl:variable name="MTF_RECEIVER_BANDWIDTH_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'ReceiverBandwidthMeasure'"/>
	<xsl:variable name="MTF_SECONDARY_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'SecondaryFrequencyMeasure'"/>
	<xsl:variable name="MTF_SPARE_FREQUENCY_IN_MEGAHERTZ_TYPE" select="'SpareFrequencyMeasure'"/>
	<xsl:variable name="MTF_UPPER_FREQUENCY_IN_PULSES_PER_SECOND_TYPE" select="'UpperFrequencyPulseNumber'"/>
	<xsl:variable name="MTF_UPPER_FREQUENCY_LIMIT_IN_MEGAHERTZ_TYPE" select="'UpperFrequencyLimitMeasure'"/>
	<xsl:variable name="MTF_LINE_ITEM_NUMBER_NUMERIC_TYPE_PATTERN" select="'LineItemNumber'"/>
	<xsl:variable name="MTF_MISSION_IDENTIFICATION_NUMBER_PART_3_TYPE_PATTERN" select="'PartThreeMissionID'"/>
	<xsl:variable name="MTF_NOSIC_ID_NUMBER_TYPE_PATTERN" select="'NosicID'"/>
	<xsl:variable name="MTF_SIGINT_NUMERICAL_TASKING_REGISTER_SNUTR_TYPE_PATTERN" select="'SigintTaskRegisterSnutrNumber'"/>
	<xsl:variable name="MTF_TARGET_IDENTIFICATION_TYPE_PATTERN" select="'TargetAreaID'"/>
	<xsl:variable name="MTF_TLAM_DATA_IDENTIFICATION_NUMBER_PART_3_TYPE_PATTERN" select="'PartThreeTlamDataID'"/>
	<xsl:variable name="MTF_UNIT_ID_DESIGNATOR_TYPE_PATTERN" select="'UnitDesignatorID'"/>
	<xsl:variable name="MTF_UMT_1_METER_EASTING_TYPE_PATTERN" select="'UtmEastingMeasure'"/>
	<xsl:variable name="MTF_UMT_1_METER_NORTHING_TYPE_PATTERN" select="'UtmNorthtingMeasure'"/>
	<xsl:variable name="MTF_WORLD_PORT_INDEX_TYPE_PATTERN" select="'WorldPortIndexNumber'"/>
	<xsl:variable name="MTF_ALTERNATE_SORTS_MONITOR_GRADE_OR_RANK_TYPE_PATTERN" select="'AlternateSortsMonitorGradeOrRankCode'"/>
	<xsl:variable name="MTF_AUDIO_IDENTIFIER_TYPE_PATTERN" select="'AudioID'"/>
	<xsl:variable name="MTF_HFDF_TARGET_SET_IDENTIFIER_TYPE_PATTERN" select="'HfdfTargetSetID'"/>
	<xsl:variable name="MTF_MOBILE_PLA_DESIGNATOR_TYPE_PATTERN" select="'MobilePlaDesignatorName'"/>
	<xsl:variable name="MTF_NAVY_CODED_REASON_EQUIPMENT_CONDITION_NOT_C1_TYPE_PATTERN" select="'NavyReasonEquipmentConditionNotC1Code'"/>
	<xsl:variable name="MTF_NAVY_CODED_REASON_EQUIPMENT_SUPPLIES_NOT_C1_TYPE_PATTERN" select="'NavyReasonEquipmentSuppliesNotC1Code'"/>
	<xsl:variable name="MTF_NAVY_CODED_REASON_PERSONNEL_NOT_C1_TYPE_PATTERN" select="'NavyReasonPersonnelNotC1Code'"/>
	<xsl:variable name="MTF_NAVY_CODED_REASON_RESERVE_PERSONNEL_NOT_C1_TYPE_PATTERN" select="'NavyReasonReservePersonnelNotC1Code'"/>
	<xsl:variable name="MTF_NAVY_CODED_REASON_TRAINING_NOT_C1_TYPE_PATTERN" select="'NavyCodedReasonTrainingNotC1Code'"/>
	<xsl:variable name="MTF_NAVY_CODED_REASON_UNIT_NOT_C1_TYPE_PATTERN" select="'NavyReasonUnitNotC1Code'"/>
	<xsl:variable name="MTF_NAVY_CODED_SECONDARY_REASON_UNIT_NOT_C1_TYPE_PATTERN" select="'NavySecondaryReasonUnitNotC1Code'"/>
	<xsl:variable name="MTF_NAVY_CODED_TERTIARY_REASON_UNIT_NOT_C1_TYPE_PATTERN" select="'NavyTertiaryReasonUnitNotC1Code'"/>
	<xsl:variable name="MTF_NAVY_PRIMARY_RESOURCE_CATEGORY_TYPE_PATTERN" select="'NavyPrimaryResourceCategoryCode'"/>
	<xsl:variable name="MTF_NAVY_SECONDARY_RESOURCE_CATEGORY_TYPE_PATTERN" select="'NavySecondaryResourceCategoryCode'"/>
	<xsl:variable name="MTF_NAVY_TERTIARY_RESOURCE_CATEGORY_TYPE_PATTERN" select="'NavyTertiaryResourceCategoryCode'"/>
	<xsl:variable name="MTF_PRIMARY_SORTS_MONITOR_GRADE_OR_RANK_TYPE_PATTERN" select="'PrimarySortsMonitorGradeOrRankCode'"/>
	<xsl:variable name="MTF_UNIT_MISSION_TYPE_PATTERN" select="'UnitMissionCode'"/>
	<xsl:variable name="MTF_AIR_EVACUATION_MISSION_PRIORITY_TYPE_PATTERN" select="'AirEvacuationMissionPriorityCode'"/>
	<xsl:variable name="MTF_ALPHA_NUMERIC_UNIQUE_ITEM_IDENTIFIER_3_DIGIT_TYPE_PATTERN" select="'NavyItemControlCode'"/>
	<xsl:variable name="MTF_EMISSIONS_DESIGNATOR_TYPE_PATTERN" select="'EmissionsDesignatorCode'"/>
	<xsl:variable name="MTF_LANGUAGE_INDICATOR_CODE_MILITARY_OCCUPATIONAL_SPECIALTY_TYPE_PATTERN" select="'MilitaryOccupationalSpecialtyLanguageCode'"/>
	<xsl:variable name="MTF_LOGISTICS_ROUTING_INDICATOR_TYPE_PATTERN" select="'LogisticsRoutingID'"/>
	<xsl:variable name="MTF_PRIMARY_RESOURCE_CATEGORY_TYPE_PATTERN" select="'PrimaryResourceCategoryCode'"/>
	<xsl:variable name="MTF_RECONNAISSANCE_MISSION_ASSESSMENT_TYPE_PATTERN" select="'ReconnaissanceMissionAssessmentCode'"/>
	<xsl:variable name="MTF_SECONDARY_RESOURCE_CATEGORY_TYPE_PATTERN" select="'SecondaryResourceCategoryCode'"/>
	<xsl:variable name="MTF_SIGNAL_STRENGTH_TYPE_PATTERN" select="'SignalStrengthNumber'"/>
	<xsl:variable name="MTF_TERTIARY_RESOURCE_CATEGORY_TYPE_PATTERN" select="'TertiaryResourceCategoryCode'"/>
	<xsl:variable name="MTF_UNIQUE_IDENTIFIER_UID_TYPE_PATTERN" select="'UniqueUid'"/>
	<xsl:variable name="MTF_BOTTOM_BOUNCE_CONTACT_TIME_IN_HOURS_TYPE_PATTERN" select="'BottomBounceContactTimeMeasure'"/>
	<xsl:variable name="MTF_CONVERGENCE_ZONE_CONTACT_TIME_IN_HOURS_TYPE_PATTERN" select="'ConvergenceZoneContactTimeMeasure'"/>
	<xsl:variable name="MTF_DIRECT_PATH_CONTACT_TIME_IN_HOURS_TYPE_PATTERN" select="'DirectPathContactTimeMeasure'"/>
	<xsl:variable name="MTF_HOURS_ATTEMPTED_TYPE_PATTERN" select="'AttemptedTimeMeasure'"/>
	<xsl:variable name="MTF_HOURS_SUCCESSFUL_TYPE_PATTERN" select="'SuccessfulTimeMeasure'"/>
	<xsl:variable name="MTF_IN_WATER_SURVIVAL_TIME_WITH_IMMERSION_SUIT_IN_HOURS_TYPE_PATTERN" select="'WaterSurvivalWithImmersionSuitTimeMeasure'"/>
	<xsl:variable name="MTF_IN_WATER_SURVIVAL_TIME_WITHOUT_IMMERSION_SUIT_IN_HOURS_TYPE_PATTERN" select="'WaterSurvivalWithoutImmersionSuitTimeMeasure'"/>
	<xsl:variable name="MTF_MISSION_DURATION_TIME_IN_HOURS_AND_TENTHS_TYPE_PATTERN" select="'MissionDurationTimeMeasure'"/>
	<xsl:variable name="MTF_SALINITY_PARTS_PER_THOUSAND_TYPE_PATTERN" select="'SalinityMeasure'"/>
	<xsl:variable name="MTF_SONAR_FREQUENCY_IN_KILOHERTZ_TYPE_PATTERN" select="'SonarFrequencyMeasure'"/>
	<xsl:variable name="MTF_TIME_ON_TRACK_IN_HOURS_TO_THE_TENTH_TYPE_PATTERN" select="'OnTrackTimeMeasure'"/>
	<xsl:variable name="MTF_TIME_TO_ESTABLISH_LINK_IN_HOURS_TYPE_PATTERN" select="'LinkEstablishTimeMeasure'"/>
	<xsl:variable name="MTF_TOTAL_CONTACT_TIME_IN_HOURS_TYPE_PATTERN" select="'TotalContactTimeMeasure'"/>
	<xsl:variable name="MTF_WATER_TEMPERATURE_FAHRENHEIT_TYPE_PATTERN" select="'WaterTemperatureMeasure'"/>
	<xsl:variable name="MTF_COMMERCIAL_AND_GOVERNMENT_ENTITY_TYPE_PATTERN" select="'CommercialAndGovernmentEntityNumber'"/>
	<xsl:variable name="MTF_CONTACT_PLOT_DESIGNATOR_TYPE_PATTERN" select="'ContactPlotDesignatorText'"/>
	<xsl:variable name="MTF_ELINT_NOTATION_PRIMARY_TYPE_PATTERN" select="'ElintNotationPrimaryText'"/>
	<xsl:variable name="MTF_ELINT_NOTATION_SECONDARY_TYPE_PATTERN" select="'ElintNotationSecondaryText'"/>
	<xsl:variable name="MTF_ELINT_NOTATION_TYPE_PATTERN" select="'ElintNotationText'"/>
	<xsl:variable name="MTF_PLAN_UNIT_TYPE_CODE_TYPE_PATTERN" select="'PlanUnitTypeCode'"/>
	<xsl:variable name="MTF_RADIO_FREQUENCY_CODE_LOWER_LIMIT_TYPE_PATTERN" select="'RadioFrequencyCodeLowerLimitText'"/>
	<xsl:variable name="MTF_RADIO_FREQUENCY_CODE_UPPER_LIMIT_TYPE_PATTERN" select="'RadioFrequencyCodeUpperLimitText'"/>
	<xsl:variable name="MTF_UNIT_TYPE_CODE_TYPE_PATTERN" select="'UnitTypeCode'"/>
	<xsl:variable name="MTF_ADDITIONAL_SKILL_IDENTIFIER_TYPE_PATTERN" select="'AdditionalSkillID'"/>
	<xsl:variable name="MTF_AIMPOINT_SUFFIX_TYPE_PATTERN" select="'AimpointSuffixNumber'"/>
	<xsl:variable name="MTF_BODY_OF_WATER_TYPE_PATTERN" select="'BodyOfWaterName'"/>
	<xsl:variable name="MTF_COGNIZANCE_SYMBOL_TYPE_PATTERN" select="'CognizanceSymbolNumber'"/>
	<xsl:variable name="MTF_CORRELATION_INDEX_TYPE_PATTERN" select="'CorrelationIndexCode'"/>
	<xsl:variable name="MTF_HFDF_TASKER_UNIT_DIGRAPH_TYPE_PATTERN" select="'HfdfTaskerUnitDigraphID'"/>
	<xsl:variable name="MTF_INSTALLATION_THE_ARMY_AUTHORIZATION_DOCUMENTS_TYPE_PATTERN" select="'ArmyInstallationAuthorizationDocumentsCode'"/>
	<xsl:variable name="MTF_LINE_DESIGNATOR_TYPE_PATTERN" select="'LineDesignatorID'"/>
	<xsl:variable name="MTF_PERSINS_PROCESSING_ACTIVITY_TYPE_PATTERN" select="'PersinsProcessingActivityCode'"/>
	<xsl:variable name="MTF_PERSONNEL_GRADE_TYPE_PATTERN" select="'PersonnelGradeText'"/>
	<xsl:variable name="MTF_REFERENCE_POINT_IDENTIFIER_TYPE_PATTERN" select="'ReferencePointID'"/>
	<xsl:variable name="MTF_CARGO_NAME_TYPE_OR_NOMENCLATURE_TYPE_PATTERN" select="'CargoNameKindOrNomenclatureText'"/>
	<xsl:variable name="MTF_CONTACT_ORIGINATOR_TYPE_PATTERN" select="'ContactOriginatorValue'"/>
	<xsl:variable name="MTF_CONTACT_SHAPE_TYPE_PATTERN" select="'ContactShapeValue'"/>
	<xsl:variable name="MTF_DATABASE_KEY_TYPE_PATTERN" select="'DatabaseKeyValue'"/>
	<xsl:variable name="MTF_DESTINATION_MEDICAL_TREATMENT_ELEMENT_TYPE_PATTERN" select="'DestinationMedicalTreatmentLocationName'"/>
	<xsl:variable name="MTF_FRIENDLY_TROOPS_COMMENT_TYPE_PATTERN" select="'FriendlyTroopCommentText'"/>
	<xsl:variable name="MTF_ITEM_DESIGNATION_CARTOGRAPHIC_TYPE_PATTERN" select="'ItemDesignationCartographicID'"/>
	<xsl:variable name="MTF_MINE_COUNTER_MEASURE_OFFICER_IN_TACTICAL_COMMAND_OTC_TYPE_PATTERN" select="'TacticalCommandOtcMineCountermeasureOfficerName'"/>
	<xsl:variable name="MTF_PARENT_MASTER_KEY_TYPE_PATTERN" select="'ParentMasterKeyValue'"/>
	<xsl:variable name="MTF_SHEET_TYPE_PATTERN" select="'CartographicSeriesSheetID'"/>
	<xsl:variable name="MTF_AGENCY_CONTACT_FREQUENCY_DESIGNATOR_TYPE_PATTERN" select="'AgencyContactFrequencyDesignatorValue'"/>
	<xsl:variable name="MTF_CONTROL_UNIT_DESIGNATOR_TYPE_PATTERN" select="'ControlUnitDesignatorName'"/>
	<xsl:variable name="MTF_DATA_ELEMENT_LABEL_TYPE_PATTERN" select="'DataElementLabelText'"/>
	<xsl:variable name="MTF_EMISSION_CONTROL_PLAN_IDENTIFIER_TYPE_PATTERN" select="'EmissionControlPlanID'"/>
	<xsl:variable name="MTF_FORCE_MARSHALLER_FREQUENCY_DESIGNATOR_TYPE_PATTERN" select="'ForceMarshallerFrequencyDesignatorName'"/>
	<xsl:variable name="MTF_FREQUENCY_DESIGNATOR_TYPE_PATTERN" select="'FrequencyDesignatorName'"/>
	<xsl:variable name="MTF_GUIDANCE_FREQUENCY_DESIGNATOR_TYPE_PATTERN" select="'GuidanceFrequencyDesignatorName'"/>
	<xsl:variable name="MTF_IMAGERY_DATA_LINK_DESIGNATOR_TYPE_PATTERN" select="'ImageryDataLinkDesignatorName'"/>
	<xsl:variable name="MTF_LANDING_SITE_PRIMARY_FREQUENCY_DESIGNATOR_TYPE_PATTERN" select="'LandingSitePrimaryFrequencyDesignatorName'"/>
	<xsl:variable name="MTF_LANDING_SITE_SECONDARY_FREQUENCY_DESIGNATOR_TYPE_PATTERN" select="'LandingSiteSecondaryFrequencyDesignatorName'"/>
	<xsl:variable name="MTF_NAVIGATIONAL_AID_FREQUENCY_DESIGNATOR_TYPE_PATTERN" select="'NavigationalAidFrequencyDesignatorName'"/>
	<xsl:variable name="MTF_PRIMARY_FREQUENCY_DESIGNATOR_TYPE_PATTERN" select="'PrimaryFrequencyDesignatorName'"/>
	<xsl:variable name="MTF_SECONDARY_FREQUENCY_DESIGNATOR_TYPE_PATTERN" select="'SecondaryFrequencyDesignatorName'"/>
	<xsl:variable name="MTF_SPECIFIC_SHIP_TYPE_TYPE_PATTERN" select="'SpecificShipTypeName'"/>
	<xsl:variable name="MTF_BULK_CARGO_WEIGHT_IN_LONG_TONS_IN_TENTHS_TYPE_PATTERN" select="'BulkCargoWeightLongMeasure'"/>
	<xsl:variable name="MTF_BULK_CARGO_WEIGHT_IN_SHORT_TONS_IN_TENTHS_TYPE_PATTERN" select="'BulkCargoWeightShortMeasure'"/>
	<xsl:variable name="MTF_CHARTED_MINIMUM_BERTHING_DEPTH_IN_METERS_TYPE_PATTERN" select="'ChartedMinimumBerthingDepthMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_BERTHING_DEPTH_IN_METERS_TYPE_PATTERN" select="'MaximumBerthingDepthMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_CHARTED_ENTRANCE_DEPTH_IN_METERS_TYPE_PATTERN" select="'MinimumChartedEntranceDepthMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_REPORTED_ENTRANCE_DEPTH_IN_METERS_TYPE_PATTERN" select="'MinimumReportedEntranceDepthMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_WIDTH_IN_METERS_TO_THE_TENTH_TYPE_PATTERN" select="'MinimumWidthMeasure'"/>
	<xsl:variable name="MTF_OUTSIZE_CARGO_WEIGHT_IN_LONG_TONS_IN_TENTHS_TYPE_PATTERN" select="'OutsizeCargoWeightLongMeasure'"/>
	<xsl:variable name="MTF_OUTSIZE_CARGO_WEIGHT_IN_SHORT_TONS_IN_TENTHS_TYPE_PATTERN" select="'OutsizeCargoWeightShortMeasure'"/>
	<xsl:variable name="MTF_OVERSIZE_CARGO_WEIGHT_IN_LONG_TONS_IN_TENTHS_TYPE_PATTERN" select="'OversizeCargoWeightLongMeasure'"/>
	<xsl:variable name="MTF_OVERSIZE_CARGO_WEIGHT_IN_SHORT_TONS_IN_TENTHS_TYPE_PATTERN" select="'OversizeCargoWeightShortMeasure'"/>
	<xsl:variable name="MTF_PORT_DEPTH_IN_METERS_TYPE_PATTERN" select="'PortDepthMeasure'"/>
	<xsl:variable name="MTF_REPORTED_MINIMUM_BERTHING_DEPTH_IN_METERS_TYPE_PATTERN" select="'ReportedMinimumBerthingDepthMeasure'"/>
	<xsl:variable name="MTF_WEIGHT_IN_SHORT_TONS_IN_TENTHS_TYPE_PATTERN" select="'WeightShortMeasure'"/>
	<xsl:variable name="MTF_AIRLIFT_COMMENTS_TYPE_PATTERN" select="'AirliftCommentText'"/>
	<xsl:variable name="MTF_ENEMY_UNIT_IDENTIFICATION_TYPE_PATTERN" select="'EnemyUnitID'"/>
	<xsl:variable name="MTF_EQUIPMENT_STATUS_REPORT_COMMENT_TYPE_PATTERN" select="'EquipmentStatusReportCommentText'"/>
	<xsl:variable name="MTF_FRIENDLY_UNIT_IDENTIFICATION_TYPE_PATTERN" select="'FriendlyUnitID'"/>
	<xsl:variable name="MTF_LANDING_SITE_COMMENT_TYPE_PATTERN" select="'LandingSiteCommentText'"/>
	<xsl:variable name="MTF_LEFT_ADJACENT_UNIT_IDENTIFICATION_TYPE_PATTERN" select="'LeftAdjacentUnitID'"/>
	<xsl:variable name="MTF_ORDNANCE_WEAPON_TYPE_NAME_NUMBER_TYPE_PATTERN" select="'OrdnanceWeaponKindNameNumber'"/>
	<xsl:variable name="MTF_REPORTING_UNIT_IDENTIFICATION_TYPE_PATTERN" select="'ReportingUnitID'"/>
	<xsl:variable name="MTF_REQUESTING_UNIT_IDENTIFICATION_TYPE_PATTERN" select="'RequestingUnitID'"/>
	<xsl:variable name="MTF_RIGHT_ADJACENT_UNIT_IDENTIFICATION_TYPE_PATTERN" select="'RightAdjacentUnitID'"/>
	<xsl:variable name="MTF_BIRTHPLACE_TYPE_PATTERN" select="'BirthplaceLocationName'"/>
	<xsl:variable name="MTF_COUNTERMEASURE_PROGRAM_TYPE_PATTERN" select="'CountermeasureProgramName'"/>
	<xsl:variable name="MTF_COUNTERMEASURE_TYPE_TYPE_PATTERN" select="'CountermeasuresTypeName'"/>
	<xsl:variable name="MTF_HARDWARE_CONFIGURATION_TYPE_PATTERN" select="'HardwareConfigurationText'"/>
	<xsl:variable name="MTF_NAME_OF_COUNTRY_TYPE_PATTERN" select="'CountryName'"/>
	<xsl:variable name="MTF_ORDNANCE_WEAPON_TYPE_TYPE_PATTERN" select="'OrdnanceWeaponID'"/>
	<xsl:variable name="MTF_RECCE_MISSION_COMMENT_TYPE_PATTERN" select="'RecceMissionCommentText'"/>
	<xsl:variable name="MTF_RECEIVING_AGENCY_TYPE_PATTERN" select="'ReceivingAgencyID'"/>
	<xsl:variable name="MTF_REFUELING_COMMENT_TYPE_PATTERN" select="'RefuelingCommentText'"/>
	<xsl:variable name="MTF_SPECIAL_CONFIGURATION_TYPE_PATTERN" select="'SpecialConfigurationText'"/>
	<xsl:variable name="MTF_STREET_ADDRESS_TYPE_PATTERN" select="'StreetAddressText'"/>
	<xsl:variable name="MTF_TOWED_ARRAY_SYSTEM_TAS_CONTACT_INVESTIGATION_TYPE_PATTERN" select="'TowedArraySystemTasContactInvestigationText'"/>
	<xsl:variable name="MTF_AIR_REFUELING_TRACK_IDENTIFIER_TYPE_PATTERN" select="'AirRefuelingTrackID'"/>
	<xsl:variable name="MTF_BROADCAST_CALL_SIGN_TYPE_PATTERN" select="'BroadcastCallSignName'"/>
	<xsl:variable name="MTF_BROADCAST_DESIGNATOR_TYPE_PATTERN" select="'BroadcastDesignatorName'"/>
	<xsl:variable name="MTF_OPERATING_MOMENT_TYPE_PATTERN" select="'OperatingMomentText'"/>
	<xsl:variable name="MTF_REQUEST_NUMBER_OF_LEG_TYPE_PATTERN" select="'LegRequestNumberID'"/>
	<xsl:variable name="MTF_TYPE_OF_CHAFF_TYPE_PATTERN" select="'ChaffTypeCode'"/>
	<xsl:variable name="MTF_UNIT_IDENTIFICATION_CODE_SPECIFIC_TYPE_PATTERN" select="'UnitIdentificationSpecificCode'"/>
	<xsl:variable name="MTF_ENCRYPTION_DEVICE_TYPE_PATTERN" select="'EncryptionDeviceName'"/>
	<xsl:variable name="MTF_ENEMY_UNIT_DESIGNATOR_TYPE_PATTERN" select="'EnemyUnitDesignatorName'"/>
	<xsl:variable name="MTF_NAME_OF_CREW_COMMANDER_OR_MISSION_CREW_DIRECTOR_TYPE_PATTERN" select="'CrewCommanderOrMissionCrewDirectorName'"/>
	<xsl:variable name="MTF_REPORT_COMMENT_TYPE_PATTERN" select="'ReportCommentText'"/>
	<xsl:variable name="MTF_SAR_OBJECT_COMMENT_TYPE_PATTERN" select="'SarObjectCommentText'"/>
	<xsl:variable name="MTF_SHIP_CLASS_NAVAL_TYPE_PATTERN" select="'NavalShipclassName'"/>
	<xsl:variable name="MTF_SOFTWARE_RELEASE_TYPE_PATTERN" select="'SoftwareReleaseText'"/>
	<xsl:variable name="MTF_STATE_OR_PROVINCE_TYPE_PATTERN" select="'StateOrProvinceName'"/>
	<xsl:variable name="MTF_TYPE_EW_SYSTEM_TYPE_PATTERN" select="'EwSystemTypeName'"/>
	<xsl:variable name="MTF_CIRCUIT_TITLE_TYPE_PATTERN" select="'CircuitTitleName'"/>
	<xsl:variable name="MTF_DUTIES_AND_EXPERIENCE_TYPE_PATTERN" select="'DutyAndExperienceText'"/>
	<xsl:variable name="MTF_ENTITY_OPERATING_AREA_TYPE_PATTERN" select="'EntityOperatingAreaName'"/>
	<xsl:variable name="MTF_LINK_MANAGEMENT_CODE_WORD_MEANING_TYPE_PATTERN" select="'LinkManagementCodeWordMeaningText'"/>
	<xsl:variable name="MTF_MESSAGE_SECURITY_CLASSIFICATION_OTHER_TYPE_PATTERN" select="'OtherMessageSecurityClassificationText'"/>
	<xsl:variable name="MTF_MILITARY_COMMAND_AUTHORITY_TYPE_PATTERN" select="'MilitaryCommandAuthorityID'"/>
	<xsl:variable name="MTF_NAME_OF_SHIPS_COMMANDING_OFFICER_TYPE_PATTERN" select="'ShipCommandingOfficerName'"/>
	<xsl:variable name="MTF_NAME_OR_IDENTIFICATION_OF_CONTROLLING_AGENCY_TYPE_PATTERN" select="'ControllingAgencyNameOrID'"/>
	<xsl:variable name="MTF_ORGANIZATION_TYPE_PATTERN" select="'OrganizationNameOrID'"/>
	<xsl:variable name="MTF_REASON_FOR_DUE_HOME_DATE_TYPE_PATTERN" select="'DueHomeDateReasonText'"/>
	<xsl:variable name="MTF_SKILLS_TYPE_PATTERN" select="'OccupationalSkillText'"/>
	<xsl:variable name="MTF_TARGET_TYPE_OTHER_TYPE_PATTERN" select="'TargetTypeOtherText'"/>
	<xsl:variable name="MTF_AIRFIELD_ELEVATION_IN_METERS_TYPE_PATTERN" select="'AirfieldElevationMeasure'"/>
	<xsl:variable name="MTF_DEWPOINT_TEMPERATURE_IN_DEGREES_CELSIUS_TYPE_PATTERN" select="'DewpointTemperatureMeasure'"/>
	<xsl:variable name="MTF_ELEVATION_IN_METERS_TYPE_PATTERN" select="'ElevationMeasure'"/>
	<xsl:variable name="MTF_HEIGHT_OF_BURST_IN_METERS_TYPE_PATTERN" select="'BurstHeightMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_TEMPERATURE_CELSIUS_TYPE_PATTERN" select="'MaximumTemperatureMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_TEMPERATURE_CELSIUS_TYPE_PATTERN" select="'MinimumTemperatureMeasure'"/>
	<xsl:variable name="MTF_PHASE_START_TIME_TYPE_PATTERN" select="'PhaseStartTimeMeasure'"/>
	<xsl:variable name="MTF_REPORTED_TEMPERATURE_CELSIUS_TYPE_PATTERN" select="'ReportedTemperatureMeasure'"/>
	<xsl:variable name="MTF_RESERVATION_START_TIME_IN_MINUTES_TYPE_PATTERN" select="'ReservationStartTimeMeasure'"/>
	<xsl:variable name="MTF_RESERVATION_STOP_TIME_IN_MINUTES_TYPE_PATTERN" select="'ReservationStopTimeMeasure'"/>
	<xsl:variable name="MTF_TIME_IN_MINUTES_RELATIVE_TO_H_HOUR_TYPE_PATTERN" select="'MinutesRelativeToHHourTimeMeasure'"/>
	<xsl:variable name="MTF_CROSS_REFERENCE_COMMENT_TYPE_PATTERN" select="'CrossReferenceCommentText'"/>
	<xsl:variable name="MTF_EQUIPMENT_TYPE_TYPE_PATTERN" select="'EquipmentTypeName'"/>
	<xsl:variable name="MTF_INTERNAL_USE_COMMENTS_TYPE_PATTERN" select="'InternalUseCommentText'"/>
	<xsl:variable name="MTF_NOMENCLATURE_TYPE_PATTERN" select="'NomenclatureText'"/>
	<xsl:variable name="MTF_POST_STRIKE_ASSESSMENT_COMMENT_TYPE_PATTERN" select="'PostStrikeAssessmentCommentText'"/>
	<xsl:variable name="MTF_RANK_OR_POSITION_TYPE_PATTERN" select="'RankOrPositionName'"/>
	<xsl:variable name="MTF_TARGET_CALL_SIGN_TYPE_PATTERN" select="'TargetCallSignName'"/>
	<xsl:variable name="MTF_TYPE_OF_CRYPTOGRAPHIC_EQUIPMENT_TYPE_PATTERN" select="'CryptographicEquipmentName'"/>
	<xsl:variable name="MTF_AIR_MISSION_PRIORITY_TYPE_PATTERN" select="'AirMissionPriorityValue'"/>
	<xsl:variable name="MTF_BATTALION_REGIMENT_DESIGNATOR_TYPE_PATTERN" select="'BattalionRegimentDesignatorName'"/>
	<xsl:variable name="MTF_COLLECTOR_TRIGRAPH_TYPE_PATTERN" select="'CollectorTrigraphValue'"/>
	<xsl:variable name="MTF_GRID_CENTER_IDENTIFIER_TYPE_PATTERN" select="'GridCenterID'"/>
	<xsl:variable name="MTF_MARITIME_REAR_LINK_DESIGNATOR_TYPE_PATTERN" select="'MaritimeRearLinkDesignatorName'"/>
	<xsl:variable name="MTF_REGIMENT_BRIGADE_DIVISION_DESIGNATOR_TYPE_PATTERN" select="'RegimentBrigadeDivisionDesignatorName'"/>
	<xsl:variable name="MTF_TACTICAL_BATTLE_MANAGEMENT_FUNCTION_TYPE_PATTERN" select="'TacticalBattleManagementFunctionCode'"/>
	<xsl:variable name="MTF_TRANSFER_STATION_IDENTIFIER_TYPE_PATTERN" select="'TransferStationID'"/>
	<xsl:variable name="MTF_TRP_DESIGNATOR_TYPE_PATTERN" select="'TrpDesignatorName'"/>
	<xsl:variable name="MTF_AEW_BARRIER_DESIGNATOR_ALPHA_TYPE_PATTERN" select="'AewBarrierDesignatorValue'"/>
	<xsl:variable name="MTF_MINE_COUNTER_MEASURE_OPERATION_SUFFIX_TYPE_PATTERN" select="'MineCountermeasureOperationSuffixValue'"/>
	<xsl:variable name="MTF_ORGANIZATION_IDENTIFIER_TYPE_PATTERN" select="'OrganizationID'"/>
	<xsl:variable name="MTF_COMMAND_AFFECTED_TYPE_PATTERN" select="'CommandAffectedPlainLanguageAddressValue'"/>
	<xsl:variable name="MTF_COMMANDER_OF_TASK_ORGANIZATION_PLAIN_LANGUAGE_ADDRESS_PLA_TYPE_PATTERN" select="'TaskOrganizationCommanderPlainLanguageAddressPlaValue'"/>
	<xsl:variable name="MTF_GENERAL_MESSAGE_SUBJECT_TYPE_TYPE_PATTERN" select="'GeneralMessageSubjectValue'"/>
	<xsl:variable name="MTF_NAME_OF_GAINED_FACILITY_TYPE_PATTERN" select="'GainedFacilityName'"/>
	<xsl:variable name="MTF_ON_BOARD_COMMANDS_TYPE_PATTERN" select="'OnBoardCommandList'"/>
	<xsl:variable name="MTF_PLAIN_LANGUAGE_ADDRESS_PLA_OF_COLLECTIVE_TYPE_PATTERN" select="'CollectivePlainLanguageAddressPlaList'"/>
	<xsl:variable name="MTF_UNIT_DESIGNATION_TO_SCREEN_TYPE_PATTERN" select="'ScreenUnitDesignationPlainLanguageAddressName'"/>
	<xsl:variable name="MTF_AIRCRAFT_CONFIGURATION_TYPE_PATTERN" select="'AircraftConfigurationValue'"/>
	<xsl:variable name="MTF_AIRCRAFT_ROLE_GENERAL_TYPE_PATTERN" select="'AircraftGeneralRole'"/>
	<xsl:variable name="MTF_AIRLIFT_REQUEST_PRIORITY_TYPE_PATTERN" select="'AirliftRequestPriorityValue'"/>
	<xsl:variable name="MTF_AIRSPACE_CONTROL_MEANS_IDENTIFYING_DESIGNATOR_TYPE_PATTERN" select="'AirspaceControlMeansIdentifyingDesignatorName'"/>
	<xsl:variable name="MTF_SERIAL_NUMBER_OF_WAYPOINT_TYPE_PATTERN" select="'WayPointSerialNumber'"/>
	<xsl:variable name="MTF_TARGET_PRIORITY_TYPE_PATTERN" select="'TargetPriorityCode'"/>
	<xsl:variable name="MTF_TONE_KEY_TYPE_TYPE_PATTERN" select="'ToneKeyTypeValue'"/>
	<xsl:variable name="MTF_UNIT_OR_SHOP_RESPONSIBLE_FOR_MAINTENANCE_TYPE_PATTERN" select="'UnitOrShopResponsibleForMaintenanceName'"/>
	<xsl:variable name="MTF_CHAFF_COMMENT_TYPE_PATTERN" select="'ChaffCommentText'"/>
	<xsl:variable name="MTF_LANDING_SITE_CONTACT_COMMENT_TYPE_PATTERN" select="'LandingSiteContactCommentText'"/>
	<xsl:variable name="MTF_MISSION_NUMBER_SUPPORTED_TYPE_PATTERN" select="'SupportedMissionNumber'"/>
	<xsl:variable name="MTF_OTHER_SAR_MISSION_ACTIVITY_COMMENTS_TYPE_PATTERN" select="'OtherSarMissionActivityCommentText'"/>
	<xsl:variable name="MTF_TRANSPORTATION_REQUIREMENT_IDENTIFICATION_TYPE_PATTERN" select="'TransportationRequirementID'"/>
	<xsl:variable name="MTF_NUMBER_OF_STORAGE_UNITS_TYPE_PATTERN" select="'StorageUnitNumber'"/>
	<xsl:variable name="MTF_ONCS_EFFICIENCY_TYPE_PATTERN" select="'OncsEfficiencyPercent'"/>
	<xsl:variable name="MTF_SATELLITE_EXTENDED_TIMEOUT_FRAMES_TYPE_PATTERN" select="'SatelliteExtendedTimeOutFrameValue'"/>
	<xsl:variable name="MTF_AIRLIFT_SCHEDULE_COMMENT_TYPE_PATTERN" select="'AirliftScheduleCommentText'"/>
	<xsl:variable name="MTF_LANE_DESIGNATOR_TYPE_PATTERN" select="'LaneDesignatorName'"/>
	<xsl:variable name="MTF_PARENT_UNIT_ONE_TYPE_PATTERN" select="'ParentUnitOneName'"/>
	<xsl:variable name="MTF_PARENT_UNIT_TWO_TYPE_PATTERN" select="'ParentUnitTwoName'"/>
	<xsl:variable name="MTF_PERSONNEL_IDENTIFICATION_NUMBER_OF_DECEASED_TYPE_PATTERN" select="'DeceasedPersonnelIdentificationNumber'"/>
	<xsl:variable name="MTF_REPORTING_MEDICAL_TREATMENT_ELEMENT_TYPE_PATTERN" select="'ReportingMedicalTreatmentElementName'"/>
	<xsl:variable name="MTF_SPECIAL_CARGO_COMMENT_TYPE_PATTERN" select="'SpecialCargoCommentText'"/>
	<xsl:variable name="MTF_AZIMUTH_ORIENTATION_TYPE_PATTERN" select="'AzimuthOrientationMeasure'"/>
	<xsl:variable name="MTF_BEARING_OF_MAJOR_AXIS_TYPE_PATTERN" select="'MajorAxisBearingMeasure'"/>
	<xsl:variable name="MTF_DIRECTION_IN_DEGREES_TRUE_OF_CURRENT_TYPE_PATTERN" select="'TrueCurrentDirectionMeasure'"/>
	<xsl:variable name="MTF_DIRECTION_OF_PEAK_EBB_SPEED_IN_DEGREES_TRUE_TYPE_PATTERN" select="'TruePeakEbbSpeedDirectionMeasure'"/>
	<xsl:variable name="MTF_DIRECTION_OF_PEAK_FLOOD_SPEED_TYPE_PATTERN" select="'PeakFloodSpeedDirectionMeasure'"/>
	<xsl:variable name="MTF_ERROR_ANGLE_IN_DEGREES_RELATIVE_TYPE_PATTERN" select="'RelativeAngleErrorMeasure'"/>
	<xsl:variable name="MTF_REFERENCE_LINE_ROTATION_IN_RELATIVE_BEARING_TYPE_PATTERN" select="'RelativeBearingReferenceLineRotationMeasure'"/>
	<xsl:variable name="MTF_SURFACE_WIND_DIRECTION_TYPE_PATTERN" select="'SurfaceWindDirectionMeasure'"/>
	<xsl:variable name="MTF_TRACK_ROTATION_RELATIVE_TYPE_PATTERN" select="'RelativeTrackRotationMeasure'"/>
	<xsl:variable name="MTF_WIND_DIRECTION_IN_DEGREES_TYPE_PATTERN" select="'WindDirectionMeasure'"/>
	<xsl:variable name="MTF_ACTION_ADDRESSEE_TYPE_PATTERN" select="'AddresseeActionText'"/>
	<xsl:variable name="MTF_ADDRESS_RESIDENTIAL_TYPE_PATTERN" select="'ResidentialAddressText'"/>
	<xsl:variable name="MTF_AIRCRAFT_UNIT_DESIGNATION_TYPE_PATTERN" select="'AircraftUnitDesignationName'"/>
	<xsl:variable name="MTF_DUTY_OTHER_TYPE_PATTERN" select="'AssignedDutyOtherCode'"/>
	<xsl:variable name="MTF_INFO_ADDRESSEE_TYPE_PATTERN" select="'AddresseeInfoText'"/>
	<xsl:variable name="MTF_JTIDS_PLATFORM_TYPE_TYPE_PATTERN" select="'JtidsPlatformTypeName'"/>
	<xsl:variable name="MTF_MANUFACTURER_TYPE_PATTERN" select="'ManufacturerName'"/>
	<xsl:variable name="MTF_OBSTACLE_COMMENTS_TYPE_PATTERN" select="'ObstacleCommentText'"/>
	<xsl:variable name="MTF_TLAM_EVENT_TYPE_PATTERN" select="'TlamEventName'"/>
	<xsl:variable name="MTF_CARGO_CATEGORY_TYPE_CODE_TYPE_PATTERN" select="'CargoCategoryCode'"/>
	<xsl:variable name="MTF_COLLECTOR_DIGRAPH_TYPE_CODE_TYPE_PATTERN" select="'CollectorDigraphText'"/>
	<xsl:variable name="MTF_NET_IDENTIFIER_TYPE_CODE_TYPE_PATTERN" select="'NetID'"/>
	<xsl:variable name="MTF_POSTAL_FOOTNOTE_CODES_TYPE_CODE_TYPE_PATTERN" select="'PostalFootnoteCodeList'"/>
	<xsl:variable name="MTF_SPACE_OBJECT_PRIORITY_TYPE_CODE_TYPE_PATTERN" select="'SpaceObjectPriorityNumber'"/>
	<xsl:variable name="MTF_TRACK_REGION_TYPE_PATTERN" select="'TrackRegionID'"/>
	<xsl:variable name="MTF_ALTERNATE_OTC_CALL_SIGN_TYPE_PATTERN" select="'AlternateOtcCallSignName'"/>
	<xsl:variable name="MTF_CLASS_TYPE_NAME_TYPE_PATTERN" select="'ClassTypeName'"/>
	<xsl:variable name="MTF_CONVOY_COMMODORE_CALL_SIGN_TYPE_PATTERN" select="'ConvoyCommodoreCallSignName'"/>
	<xsl:variable name="MTF_CONVOY_VICE_COMMODORE_CALL_SIGN_TYPE_PATTERN" select="'ConvoyViceCommodoreCallSignName'"/>
	<xsl:variable name="MTF_NAVAL_FORCE_CALL_SIGN_TYPE_PATTERN" select="'NavalForceCallSignName'"/>
	<xsl:variable name="MTF_OTC_CALL_SIGN_TYPE_PATTERN" select="'OtcCallSignName'"/>
	<xsl:variable name="MTF_EFFECTIVE_TIME_ON_TASK_IN_THE_LAP_IN_HOURS_TYPE_PATTERN" select="'EffectiveLapTaskTimeMeasure'"/>
	<xsl:variable name="MTF_TIME_OFF_LIGHT_IN_SECONDS_TO_THE_TENTH_TYPE_PATTERN" select="'FlightTimeMeasure'"/>
	<xsl:variable name="MTF_TOTAL_OFF_LOAD_FUEL_TYPE_PATTERN" select="'TotalOffloadFuelMeasure'"/>
	<xsl:variable name="MTF_WATER_CONDUCTIVITY_TYPE_PATTERN" select="'WaterConductivityMeasure'"/>
	<xsl:variable name="MTF_CATEGORY_4_EQUIPMENT_LINE_ITEM_NUMBER_TYPE_PATTERN" select="'CategoryFourEquipmentLineItemNumber'"/>
	<xsl:variable name="MTF_NON_REPORTABLE_LINE_ITEM_NUMBER_TYPE_PATTERN" select="'NonReportableLineItemNumber'"/>
	<xsl:variable name="MTF_RECEIVER_COORDINATION_IDENTIFIER_TYPE_PATTERN" select="'ReceiverCoordinationID'"/>
	<xsl:variable name="MTF_TANKER_COORDINATION_IDENTIFIER_TYPE_PATTERN" select="'TankerCoordinationID'"/>
	<xsl:variable name="MTF_ASSEMBLY_AREA_TYPE_TYPE_PATTERN" select="'AssemblyAreaFunctionText'"/>
	<xsl:variable name="MTF_COLLATERAL_DAMAGE_DESCRIPTION_TYPE_PATTERN" select="'CollateralDamageDescriptionText'"/>
	<xsl:variable name="MTF_PLACE_NAME_EXTENDED_TYPE_PATTERN" select="'ExtendedPlaceName'"/>
	<xsl:variable name="MTF_REGISTERED_OWNER_TYPE_PATTERN" select="'RegisteredOwnerName'"/>
	<xsl:variable name="MTF_TITLE_OF_DOCUMENT_TYPE_PATTERN" select="'DocumentTitleText'"/>
	<xsl:variable name="MTF_DISTANCE_IN_NAUTICAL_MILES_FROM_AQ_ROUTE_POINT_TYPE_PATTERN" select="'DistanceFromAQRoutePointMeasure'"/>
	<xsl:variable name="MTF_DISTANCE_IN_NAUTICAL_MILES_FROM_FINISH_POINT_TYPE_PATTERN" select="'DistanceFromFinishPointMeasure'"/>
	<xsl:variable name="MTF_DISTANCE_IN_NAUTICAL_MILES_FROM_START_POINT_TYPE_PATTERN" select="'DistanceFromStartPointMeasure'"/>
	<xsl:variable name="MTF_REVOLUTIONS_PER_MINUTE_TYPE_PATTERN" select="'RevolutionMeasure'"/>
	<xsl:variable name="MTF_TIME_DURATION_IN_HOURS_TYPE_PATTERN" select="'TimeDuration'"/>
	<xsl:variable name="MTF_ALTITUDE_IN_METERS_TYPE_PATTERN" select="'AltitudeMeasure'"/>
	<xsl:variable name="MTF_GROUND_ZERO_ALTITUDE_IN_METERS_TYPE_PATTERN" select="'GroundZeroAltitudeMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_ALTITUDE_IN_METERS_TYPE_PATTERN" select="'MaximumAltitudeMeasure'"/>
	<xsl:variable name="MTF_MINIMUM_ALTITUDE_IN_METERS_TYPE_PATTERN" select="'MinimumAltitudeMeasure'"/>
	<xsl:variable name="MTF_AVERAGE_BACK_SHORE_WIDTH_IN_METERS_TYPE_PATTERN" select="'AverageBackshoreWidthMeasure'"/>
	<xsl:variable name="MTF_CONTINUOUS_USABLE_LENGTH_IN_METERS_TYPE_PATTERN" select="'ContinuousUsableLengthMeasure'"/>
	<xsl:variable name="MTF_EXIT_DISTANCE_IN_METERS_TYPE_PATTERN" select="'ExitDistanceMeasure'"/>
	<xsl:variable name="MTF_EXIT_WIDTH_IN_METERS_TYPE_PATTERN" select="'ExitWidthMeasure'"/>
	<xsl:variable name="MTF_TOTAL_LENGTH_IN_METERS_TYPE_PATTERN" select="'TotalLengthMeasure'"/>
	<xsl:variable name="MTF_USABLE_LENGTH_IN_METERS_TYPE_PATTERN" select="'UsableLengthMeasure'"/>
	<xsl:variable name="MTF_VISIBLE_FORE_SHORE_WIDTH_IN_METERS_TYPE_PATTERN" select="'VisibleForeshoreWidthMeasure'"/>
	<xsl:variable name="MTF_AIR_REFUELING_EVENT_KEY_TYPE_PATTERN" select="'AirRefuelEventKeyNumber'"/>
	<xsl:variable name="MTF_AMC_MISSION_UNIQUE_KEY_TYPE_PATTERN" select="'AmcMissionUniqueKeyNumber'"/>
	<xsl:variable name="MTF_EXPLOITATION_REQUIREMENT_IDENTIFICATION_NUMBER_TER_TYPE_CODE_TYPE_PATTERN" select="'TerExploitationRequirementID'"/>
	<xsl:variable name="MTF_MISSION_IDENTIFICATION_NUMBER_TYPE_CODE_TYPE_PATTERN" select="'MissionID'"/>
	<xsl:variable name="MTF_DATA_LINK_TRACK_NUMBER_0200_TO_7776_TYPE_CODE_TYPE_PATTERN" select="'DataLinkTrackNumber'"/>
	<xsl:variable name="MTF_DISCRETE_IDENTIFIER_CODE_TYPE_CODE_TYPE_PATTERN" select="'DiscreteCode'"/>
	<xsl:variable name="MTF_LINK_1111B_TRACK_NUMBER_BLOCK_LOWER_LIMIT_TYPE_CODE_TYPE_PATTERN" select="'Link1111BBlockLowerLimitTrackNumber'"/>
	<xsl:variable name="MTF_LINK_1111B_TRACK_NUMBER_BLOCK_UPPER_LIMIT_TYPE_CODE_TYPE_PATTERN" select="'Link1111BBlockUpperLimitTrackNumber'"/>
	<xsl:variable name="MTF_NET_IN_USE_IDENTIFIER_TYPE_CODE_TYPE_PATTERN" select="'NetInUseID'"/>
	<xsl:variable name="MTF_SET_IN_USE_IDENTIFIER_TYPE_CODE_TYPE_PATTERN" select="'SetInUseID'"/>
	<xsl:variable name="MTF_NET_IN_USE_IDENTIFIER_TYPE_PATTERN" select="'NetInUseID'"/>
	<xsl:variable name="MTF_SET_IN_USE_IDENTIFIER_TYPE_PATTERN" select="'SetInUseID'"/>
	<xsl:variable name="MTF_TACAN_CHANNEL_SPECIAL_TYPE_PATTERN" select="'TacanChannelSpecialValue'"/>
	<xsl:variable name="MTF_ALLOWANCE_PARTS_LIST_NUMBER_TYPE_PATTERN" select="'AllowancePartListNumber'"/>
	<xsl:variable name="MTF_GMF_HUB_TERMINAL_IDENTIFIER_TYPE_PATTERN" select="'GmfHubTerminalID'"/>
	<xsl:variable name="MTF_GMF_NODE_TERMINAL_IDENTIFIER_TYPE_PATTERN" select="'GmfNodeTerminalID'"/>
	<xsl:variable name="MTF_GMF_SATELLITE_TERMINAL_IDENTIFIER_TYPE_PATTERN" select="'GmfSatelliteTerminalID'"/>
	<xsl:variable name="MTF_GMF_SPOKE_TERMINAL_IDENTIFIER_TYPE_PATTERN" select="'GmfSpokeTerminalID'"/>
	<xsl:variable name="MTF_RECEIVING_TERMINAL_IDENTIFIER_TYPE_PATTERN" select="'ReceiveTerminalID'"/>
	<xsl:variable name="MTF_TRANSMITTING_TERMINAL_IDENTIFIER_TYPE_PATTERN" select="'TransmitTerminalID'"/>
	<xsl:variable name="MTF_ALTERNATE_RADIO_CALL_SIGN_TYPE_PATTERN" select="'AlternateRadioCallSignName'"/>
	<xsl:variable name="MTF_CATEGORY_OF_SPECIAL_INTEREST_CARGO_TYPE_PATTERN" select="'SpecialInterestCargoCategoryText'"/>
	<xsl:variable name="MTF_MAP_OR_CHART_SCALE_TYPE_PATTERN" select="'MapOrChartScaleRatio'"/>
	<xsl:variable name="MTF_MILITARY_RANK_RATING_OR_GRADE_TYPE_PATTERN" select="'MilitaryRankRatingOrGradeText'"/>
	<xsl:variable name="MTF_RUNWAY_COMMENT_TYPE_PATTERN" select="'RunwayCommentText'"/>
	<xsl:variable name="MTF_SPECIAL_C2_HEADQUARTERS_TYPE_PATTERN" select="'SpecialC2HeadquarterText'"/>
	<xsl:variable name="MTF_DAYS_MET_MESSAGE_SUPPORT_REQUESTED_TYPE_PATTERN" select="'MetMessageSupportRequestMeasure'"/>
	<xsl:variable name="MTF_UNIT_RESPONSE_TIME_IN_MINUTES_TYPE_PATTERN" select="'UnitResponseTimeMeasure'"/>
	<xsl:variable name="MTF_ALLOCATION_COMMENT_TYPE_PATTERN" select="'AllocationCommentText'"/>
	<xsl:variable name="MTF_CALL_SIGN_OF_SAR_UNIT_TYPE_PATTERN" select="'CallSignOfSarUnitText'"/>
	<xsl:variable name="MTF_COMMUNICATION_CHANNEL_TYPE_PATTERN" select="'CommunicationChannelName'"/>
	<xsl:variable name="MTF_EMBARK_COMMENT_TYPE_PATTERN" select="'EmbarkCommentText'"/>
	<xsl:variable name="MTF_FORCE_ALLOTMENT_COMMENT_TYPE_PATTERN" select="'ForceAllotmentCommentText'"/>
	<xsl:variable name="MTF_PERSONNEL_COMMENT_TYPE_PATTERN" select="'PersonnelCommentText'"/>
	<xsl:variable name="MTF_PLAN_ORIGINATOR_TYPE_PATTERN" select="'PlanOriginatorID'"/>
	<xsl:variable name="MTF_TURN_SYSTEM_TYPE_PATTERN" select="'TurnSystemName'"/>
	<xsl:variable name="MTF_WEAPON_SYSTEM_TYPE_PATTERN" select="'WeaponSystemName'"/>
	<xsl:variable name="MTF_NUMBER_OF_SERIAL_TYPE_PATTERN" select="'ConvoyAssignedSerialNumber'"/>
	<xsl:variable name="MTF_QUANTITY_OF_TARGETS_TYPE_PATTERN" select="'TargetQuantity'"/>
	<xsl:variable name="MTF_RADIUS_IN_METERS_TYPE_PATTERN" select="'RadiusMeasure'"/>
	<xsl:variable name="MTF_SCALE_OF_PRINTS_TYPE_PATTERN" select="'PrintScaleRatio'"/>
	<xsl:variable name="MTF_TARGET_SIGNAL_IDENTIFIER_TYPE_PATTERN" select="'TargetSignalID'"/>
	<xsl:variable name="MTF_BASIC_BLOCK_RECURRENCE_RATE_MODIFIER_TYPE_PATTERN" select="'BasicBlockRecurrenceRateModifierValue'"/>
	<xsl:variable name="MTF_DELETION_THRESHOLD_TYPE_PATTERN" select="'DeletionThresholdValue'"/>
	<xsl:variable name="MTF_HOP_COUNT_THRESHOLD_TYPE_PATTERN" select="'HopThresholdQuantity'"/>
	<xsl:variable name="MTF_DESIGNATOR_TYPE_PATTERN" select="'DesignatorCode'"/>
	<xsl:variable name="MTF_HF_CIRCUIT_LINE_DESIGNATOR_PRIMARY_TYPE_PATTERN" select="'PrimaryHfCircuitLineDesignatorName'"/>
	<xsl:variable name="MTF_UHF_CIRCUIT_LINE_DESIGNATOR_PRIMARY_TYPE_PATTERN" select="'PrimaryUhfCircuitLineDesignatorName'"/>
	<xsl:variable name="MTF_VHF_CIRCUIT_LINE_DESIGNATOR_PRIMARY_TYPE_PATTERN" select="'PrimaryVhfCircuitLineDesignatorName'"/>
	<xsl:variable name="MTF_BCST_HEADER_FROM_TYPE_PATTERN" select="'BcstHeaderFromName'"/>
	<xsl:variable name="MTF_BCST_HEADER_TO_TYPE_PATTERN" select="'BcstHeaderToName'"/>
	<xsl:variable name="MTF_TYPE_VEHICLE_TYPE_PATTERN" select="'VehicleKindName'"/>
	<xsl:variable name="MTF_AIRCRAFT_TYPE_AND_MODEL_OTHER_TYPE_PATTERN" select="'AircraftTypeAndModelOtherText'"/>
	<xsl:variable name="MTF_AIRSPACE_USAGE_OTHER_TYPE_PATTERN" select="'AirspaceUsageOtherText'"/>
	<xsl:variable name="MTF_REPORTING_ORGANIZATION_TYPE_PATTERN" select="'ReportingOrganizationID'"/>
	<xsl:variable name="MTF_TYPE_OF_ACM_OTHER_TYPE_PATTERN" select="'AcmOtherTypeID'"/>
	<xsl:variable name="MTF_ORDNANCE_WEAPON_TYPE_LITERAL_TYPE_PATTERN" select="'OrdnanceWeaponTypeLiteralName'"/>
	<xsl:variable name="MTF_AIRCRAFT_VARIANT_TYPE_PATTERN" select="'AircraftVariantID'"/>
	<xsl:variable name="MTF_ALPHABETIC_IDENTIFIER_TYPE_PATTERN" select="'AlphabeticID'"/>
	<xsl:variable name="MTF_MCM_BUOY_SEQUENTIAL_IDENTIFIER_TYPE_PATTERN" select="'McmBuoySequentialID'"/>
	<xsl:variable name="MTF_REMARK_IDENTIFICATION_TYPE_PATTERN" select="'RemarkID'"/>
	<xsl:variable name="MTF_SECTOR_LETTER_TYPE_PATTERN" select="'SectorLetterValue'"/>
	<xsl:variable name="MTF_CHERRY_POINT_OPERATING_AREA_TYPE_PATTERN" select="'CherryPointOperatingAreaName'"/>
	<xsl:variable name="MTF_FILTER_DESCRIPTION_TYPE_PATTERN" select="'FilterDescriptionText'"/>
	<xsl:variable name="MTF_IMAGERY_PLATFORM_TYPE_PATTERN" select="'ImageryPlatformName'"/>
	<xsl:variable name="MTF_TANKER_RECEIVER_LEG_MISSION_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'TankerReceiverLegMissionID'"/>
	<xsl:variable name="MTF_AVERAGE_APPROACH_GRADIENT_TYPE_PATTERN" select="'AverageApproachGradientRatio'"/>
	<xsl:variable name="MTF_CENTER_FLANK_APPROACH_GRADIENT_TYPE_PATTERN" select="'CenterFlankApproachGradientRatio'"/>
	<xsl:variable name="MTF_EQUIPMENT_DESIGNATOR_TYPE_PATTERN" select="'EquipmentDesignatorCode'"/>
	<xsl:variable name="MTF_LEFT_FLANK_APPROACH_GRADIENT_TYPE_PATTERN" select="'LeftFlankApproachGradientRatio'"/>
	<xsl:variable name="MTF_RIGHT_FLANK_APPROACH_GRADIENT_TYPE_PATTERN" select="'RightFlankApproachGradientRatio'"/>
	<xsl:variable name="MTF_TARGET_SYSTEM_TYPE_PATTERN" select="'TargetSystemCategoryName'"/>
	<xsl:variable name="MTF_CONTROL_POINT_DESCRIPTION_TYPE_PATTERN" select="'ControlPointDescriptionText'"/>
	<xsl:variable name="MTF_GROUND_TARGET_COMMENTS_TYPE_PATTERN" select="'GroundTargetCommentText'"/>
	<xsl:variable name="MTF_MARKER_DESCRIPTION_TYPE_PATTERN" select="'MarkerDescriptionText'"/>
	<xsl:variable name="MTF_TARGET_DESCRIPTION_TYPE_PATTERN" select="'TargetDescriptionText'"/>
	<xsl:variable name="MTF_TARGET_ELEMENT_DESCRIPTION_TYPE_PATTERN" select="'TargetElementDescriptionText'"/>
	<xsl:variable name="MTF_TRP_DESCRIPTION_TYPE_PATTERN" select="'TrpDescriptionText'"/>
	<xsl:variable name="MTF_HIGHER_ECHELON_DESIGNATOR_TYPE_PATTERN" select="'HigherEchelonDesignatorText'"/>
	<xsl:variable name="MTF_HIGHER_FORMATION_TYPE_PATTERN" select="'HigherFormationText'"/>
	<xsl:variable name="MTF_MOVEMENT_AND_AAW_AXIS_COMMENTS_TYPE_PATTERN" select="'MovementAndAawAxisCommentText'"/>
	<xsl:variable name="MTF_PARENT_UNIT_DESIGNATOR_TYPE_PATTERN" select="'ParentUnitDesignatorName'"/>
	<xsl:variable name="MTF_UNIQUE_SYMBOL_DESIGNATION_TYPE_PATTERN" select="'UniqueSymbolDesignatorName'"/>
	<xsl:variable name="MTF_UNIT_IDENTIFICATION_TYPE_PATTERN" select="'UnitID'"/>
	<xsl:variable name="MTF_MILITARY_OCCUPATIONAL_SPECIALTY_TYPE_PATTERN" select="'MilitaryOccupationalSpecialtyID'"/>
	<xsl:variable name="MTF_RADIATION_STATUS_INDICATOR_TYPE_PATTERN" select="'RadiationStatusIndicatorCode'"/>
	<xsl:variable name="MTF_SECURE_VOICE_EQUIPMENT_TYPE_TYPE_PATTERN" select="'SecureVoiceEquipmentName'"/>
	<xsl:variable name="MTF_TOTAL_FLIGHT_TIME_TYPE_PATTERN" select="'TotalFlightTimeMeasure'"/>
	<xsl:variable name="MTF_TOTAL_FUEL_QUANTITY_REQUIRED_IN_THOUSANDS_OF_POUNDS_TYPE_PATTERN" select="'TotalFuelRequiredThousandMeasure'"/>
	<xsl:variable name="MTF_TRANSMISSION_POWER_IN_WATTS_TYPE_PATTERN" select="'TransmissionPowerMeasure'"/>
	<xsl:variable name="MTF_DATA_LINK_TRACK_KNUMBER_001_TO_076_TYPE_PATTERN" select="'DataLinkTrackNumber001To076Value'"/>
	<xsl:variable name="MTF_DATA_LINK_TRACK_NUMBER_100_TO_175_TYPE_PATTERN" select="'DataLinkTrackNumber100To175Value'"/>
	<xsl:variable name="MTF_TRACK_NUMBER_REFERENCE_SUBSET_3_TYPE_PATTERN" select="'TrackNumberReferenceSubsetThreeValue'"/>
	<xsl:variable name="MTF_AIR_TASK_UNIT_IDENTIFIER_TYPE_PATTERN" select="'AirTaskUnitID'"/>
	<xsl:variable name="MTF_COMPOSITE_AIR_OPERATIONS_COMAO_IDENTIFIER_TYPE_PATTERN" select="'CompositeAirOperationsComaoID'"/>
	<xsl:variable name="MTF_MINE_MARK_MOD_TYPE_PATTERN" select="'MineMarkModelNumber'"/>
	<xsl:variable name="MTF_NETWORK_PARTICIPANT_IDENTIFICATION_TYPE_PATTERN" select="'NetworkParticipantID'"/>
	<xsl:variable name="MTF_CODE_DAY_NUMBER_TYPE_PATTERN" select="'DayNumberCode'"/>
	<xsl:variable name="MTF_EQUIPMENT_PLAN_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'EquipmentPlanUniqueID'"/>
	<xsl:variable name="MTF_PLAN_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'PlanID'"/>
	<xsl:variable name="MTF_FLIGHT_TIME_IN_HOURS_AND_TENTHS_TYPE" select="'FlightTimeMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_RATE_OF_FIRE_IN_ROUNDS_PER_WEAPON_PER_MINUTE_TYPE" select="'WeaponRoundMaximumRateOfFireMeasure'"/>
	<xsl:variable name="MTF_OP_TOW_TIME_TYPE" select="'OpTowTimeMeasure'"/>
	<xsl:variable name="MTF_SUSTAINED_RATE_OF_FIRE_IN_ROUNDS_PER_WEAPON_PER_MINUTE_TYPE_PATTERN" select="'WeaponRoundSustainedRateOfFireMeasure'"/>
	<xsl:variable name="MTF_COMMUNICATIONS_PLAN_DESIGNATION_TYPE" select="'CommunicationsPlanDesignationName'"/>
	<xsl:variable name="MTF_EFFECTIVE_PUBLICATION_TYPE" select="'EffectivePublicationName'"/>
	<xsl:variable name="MTF_MESSAGE_TEXT_FORMAT_IDENTIFIER_TYPE" select="'MessageTextFormatID'"/>
	<xsl:variable name="MTF_ORDNANCE_FUZE_TYPE_TYPE" select="'OrdnanceFuzeID'"/>
	<xsl:variable name="MTF_CONSECUTIVE_DECORRELATIONS_TYPE_PATTERN" select="'ConsecutiveDecorrelationNumber'"/>
	<xsl:variable name="MTF_ELINT_NOTATION_CONFIDENCE_SECONDARY_TYPE_PATTERN" select="'ElintNotationConfidenceSecondaryNumber'"/>
	<xsl:variable name="MTF_MINIMUM_GEODETIC_POSITION_QUALITY_QPG_TYPE_PATTERN" select="'MinimumGeodeticPositionQualityQpgNumber'"/>
	<xsl:variable name="MTF_TARGET_PRIORITY_ABBREVIATED_TYPE_PATTERN" select="'TargetPriorityAbbreviatedNumber'"/>
	<xsl:variable name="MTF_COMMERCIAL_MANUFACTURERS_PART_NUMBER_TYPE_PATTERN" select="'CommercialManufacturerPartNumber'"/>
	<xsl:variable name="MTF_NET_USAGE_OR_AMPLIFYING_INSTRUCTION_TYPE_PATTERN" select="'NetUsageOrAmplifyingInstructionText'"/>
	<xsl:variable name="MTF_UNIQUE_BOUNDARY_DESIGNATION_1_TYPE_PATTERN" select="'UniqueBoundaryDesignationOneText'"/>
	<xsl:variable name="MTF_UNIQUE_BOUNDARY_DESIGNATION_2_TYPE_PATTERN" select="'UniqueBoundaryDesignationTwoText'"/>
	<xsl:variable name="MTF_NUMBER_OF_AIRCRAFT_SADL_TYPE_PATTERN" select="'AircraftSadlQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_ARM_THRUSTS_TYPE_PATTERN" select="'ArmThrustQuantity'"/>
	<xsl:variable name="MTF_NUMBER_OF_FLIGHTS_TYPE_PATTERN" select="'FlightQuantity'"/>
	<xsl:variable name="MTF_BATTERY_COMPANY_DESIGNATOR_TYPE" select="'BatteryCompanyDesignatorName'"/>
	<xsl:variable name="MTF_ONE_CHARACTER_PRODUCER_CODE_SEQUENCE_NUMBER_TYPE" select="'ProducerOneCharacterSequenceNumberCode'"/>
	<xsl:variable name="MTF_PLATOON_DESIGNATOR_TYPE" select="'PlatoonDesignatorName'"/>
	<xsl:variable name="MTF_SECTION_DESIGNATOR_TYPE" select="'SectionDesignatorName'"/>
	<xsl:variable name="MTF_SOFTWARE_VERSION_TYPE" select="'SoftwareVersionValue'"/>
	<xsl:variable name="MTF_BROADCAST_CHANNEL_TYPE_PATTERN" select="'BroadcastChannelName'"/>
	<xsl:variable name="MTF_COMMON_BROADCAST_TYPE_PATTERN" select="'CommonBroadcastName'"/>
	<xsl:variable name="MTF_PRIMARY_BROADCAST_TYPE_PATTERN" select="'PrimaryBroadcastName'"/>
	<xsl:variable name="MTF_SECONDARY_BROADCAST_TYPE_PATTERN" select="'SecondaryBroadcastName'"/>
	<xsl:variable name="MTF_PULSE_REPETITION_INTERVAL_AVERAGE_IN_MICROSECONDS_TYPE_PATTERN" select="'PulseRepetitionIntervalAverageMeasure'"/>
	<xsl:variable name="MTF_PULSE_REPETITION_INTERVAL_IN_MICROSECONDS_TYPE_PATTERN" select="'PulseRepetitionIntervalMeasure'"/>
	<xsl:variable name="MTF_PULSE_REPETITION_INTERVAL_LOWER_LIMIT_IN_MICROSECONDS_TYPE_PATTERN" select="'PulseRepetitionIntervalLowerLimitMeasure'"/>
	<xsl:variable name="MTF_PULSE_REPETITION_INTERVAL_STANDARD_DEVIATION_IN_MICROSECONDS_TYPE_PATTERN" select="'PulseRepetitionIntervalStandardDeviationMeasure'"/>
	<xsl:variable name="MTF_PULSE_REPETITION_INTERVAL_UPPER_LIMIT_IN_MICROSECONDS_TYPE_PATTERN" select="'PulseRepetitionIntervalUpperLimitMeasure'"/>
	<xsl:variable name="MTF_DEPTH_DETERMINATION_MEANS_TYPE_PATTERN" select="'DepthDeterminationMeansName'"/>
	<xsl:variable name="MTF_NAME_OF_ASSETS_TYPE_PATTERN" select="'AssetName'"/>
	<xsl:variable name="MTF_RADIO_COMMENT_TYPE_PATTERN" select="'RadioCommentText'"/>
	<xsl:variable name="MTF_RENDEZVOUS_COMMENT_TYPE_PATTERN" select="'RendezvousCommentText'"/>
	<xsl:variable name="MTF_SHIP_POSITION_AND_MOVEMENT_COMMENTS_TYPE_PATTERN" select="'ShipPositionAndMovementCommentText'"/>
	<xsl:variable name="MTF_ALTIMETER_SETTING_IN_HUNDREDTHS_OF_INCHES_OF_MERCURY_TYPE" select="'AltimeterSettingMercuryMeasure'"/>
	<xsl:variable name="MTF_BAROMETRIC_PRESSURE_INCHES_OF_MERCURY_TYPE" select="'BarometricPressureMercuryMeasure'"/>
	<xsl:variable name="MTF_SIX_HOUR_PRECIPITATION_TYPE" select="'SixHourPrecipitationCode'"/>
	<xsl:variable name="MTF_TWENTY_FOUR_HOUR_PRECIPITATION_TYPE" select="'TwentyFourHourPrecipitationCode'"/>
	<xsl:variable name="MTF_TWENTY_FOUR_HOUR_SNOW_DEPTH_TYPE" select="'TwentyFourHourSnowDepthCode'"/>
	<xsl:variable name="MTF_CUBIC_METERS_ON_HAND_TYPE_PATTERN" select="'CubicMeterOnHandMeasure'"/>
	<xsl:variable name="MTF_QUANTITY_ON_HAND_INCLUDING_UBL_ROUNDS_TYPE_PATTERN" select="'RoundsOnHandIncludingUblQuantity'"/>
	<xsl:variable name="MTF_STORAGE_CAPACITY_IN_CUBIC_METERS_TYPE_PATTERN" select="'StorageCapacityMeasure'"/>
	<xsl:variable name="MTF_SYMBOL_QUANTITY_OF_EQUIPMENT_TYPE_PATTERN" select="'SymbolEquipmentQuantity'"/>
	<xsl:variable name="MTF_TARGET_ITEM_CATEGORY_TYPE_PATTERN" select="'TargetItemCategoryQuantity'"/>
	<xsl:variable name="MTF_RECONNAISSANCE_OPERATING_AREA_TYPE_PATTERN" select="'ReconnaissanceOperatingAreaText'"/>
	<xsl:variable name="MTF_TRACK_IDENTIFIER_TYPE_PATTERN" select="'TrackID'"/>
	<xsl:variable name="MTF_AIRDROP_COMMENT_TYPE_PATTERN" select="'AirdropCommentText'"/>
	<xsl:variable name="MTF_EW_COMMENT_TYPE_PATTERN" select="'EwCommentText'"/>
	<xsl:variable name="MTF_NAVAL_FIRE_SUPPORT_STATION_TYPE_PATTERN" select="'NavalFireSupportStationName'"/>
	<xsl:variable name="MTF_ALIAS_TYPE_PATTERN" select="'AliasName'"/>
	<xsl:variable name="MTF_FIRST_GIVEN_NAME_OF_A_PERSON_TYPE_PATTERN" select="'PersonGivenFirstName'"/>
	<xsl:variable name="MTF_SECOND_GIVEN_NAME_OF_A_PERSON_TYPE_PATTERN" select="'PersonGivenSecondName'"/>
	<xsl:variable name="MTF_THIRD_GIVEN_NAME_OF_A_PERSON_TYPE_PATTERN" select="'PersonGivenThirdName'"/>
	<xsl:variable name="MTF_ANTI_AIR_WARFARE_CALL_SIGN_TYPE" select="'AntiAirWarfareCallSignName'"/>
	<xsl:variable name="MTF_FORMAT_INDEX_LETTER_TYPE" select="'FormatIndexLetterValue'"/>
	<xsl:variable name="MTF_REFERENCE_SET_SERIAL_LETTER_TYPE" select="'ReferenceSetSerialLetterValue'"/>
	<xsl:variable name="MTF_SEARCH_EFFORT_IDENTIFIER_TYPE" select="'SearchEffortID'"/>
	<xsl:variable name="MTF_COMMERCIAL_STU_III_EXTENSION_TYPE_PATTERN" select="'CommercialStuIiiExtensionNumber'"/>
	<xsl:variable name="MTF_ARRESTING_GEAR_COMMENTS_TYPE" select="'ArrestingGearCommentText'"/>
	<xsl:variable name="MTF_ATTG_NBRG_COMMENT_TYPE" select="'AttgNbrgCommentText'"/>
	<xsl:variable name="MTF_DESIRED_MEAN_POINT_OF_IMPACT_COMMENT_TYPE" select="'DesiredMeanPointOfImpactCommentText'"/>
	<xsl:variable name="MTF_TARGET_DESCRIPTION_COMMENT_TYPE" select="'TargetDescriptionCommentText'"/>
	<xsl:variable name="MTF_AVERAGE_WIDTH_IN_METERS_TO_THE_TENTH_TYPE_PATTERN" select="'AverageWidthMeasure'"/>
	<xsl:variable name="MTF_DISTANCE_FROM_ORIGIN_IN_TENTHS_OF_METERS_TYPE_PATTERN" select="'DistanceFromOriginMeasure'"/>
	<xsl:variable name="MTF_BEARING_ERROR_TYPE" select="'BearingErrorMeasure'"/>
	<xsl:variable name="MTF_PROCESSOR_INTEGRATION_TIME_SINCE_DETECTION_TYPE" select="'ProcessorIntegrationTimeSinceDetectionMeasure'"/>
	<xsl:variable name="MTF_TIME_IN_STATE_IN_MINUTES_TYPE" select="'StateTimeMeasure'"/>
	<xsl:variable name="MTF_DERIVATIVE_SOURCE_FOR_CLASSIFICATION_TYPE_PATTERN" select="'DerivativeSourceForClassificationText'"/>
	<xsl:variable name="MTF_DESTINATION_UNITS_PLAIN_LANGUAGE_ADDRESS_PLA_TYPE_PATTERN" select="'DestinationUnitPlainLanguageAddressPlaText'"/>
	<xsl:variable name="MTF_ORIGINAL_CLASSIFICATION_AUTHORITY_TYPE_PATTERN" select="'OriginalClassificationAuthorityName'"/>
	<xsl:variable name="MTF_DISTANCE_NAUTICAL_MILES_TYPE" select="'DistanceMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_QUALIFICATION_RAW_SCORE_TYPE_PATTERN" select="'MaximumQualificationRawScorePercent'"/>
	<xsl:variable name="MTF_INITIAL_POINT_IDENTIFIER_TYPE_PATTERN" select="'InitialPointID'"/>
	<xsl:variable name="MTF_TECHNICAL_ORDER_FOR_PART_TYPE_PATTERN" select="'PartTechnicalOrderValue'"/>
	<xsl:variable name="MTF_DECLASSIFICATION_INSTRUCTIONS_TYPE" select="'DeclassificationInstructionsText'"/>
	<xsl:variable name="MTF_DOWNGRADE_INSTRUCTIONS_TYPE" select="'DowngradeInstructionsText'"/>
	<xsl:variable name="MTF_GENTEXT_TEXT_INDICATOR_TYPE" select="'SubjectGeneralText'"/>
	<xsl:variable name="MTF_LEG_COMMENTS_TYPE" select="'LegCommentText'"/>
	<xsl:variable name="MTF_LINK_1_REPORTING_UNIT_RU_TYPE" select="'LinkOneReportingUnitRuID'"/>
	<xsl:variable name="MTF_LINK_1_TRACK_NUMBER_BLOCK_END_TYPE" select="'BlockEndLinkOneTrackNumber'"/>
	<xsl:variable name="MTF_LINK_1_TRACK_NUMBER_BLOCK_START_TYPE" select="'BlockStartLinkOneTrackNumber'"/>
	<xsl:variable name="MTF_ZONE_OF_FIRE_RESPONSIBILITY_TYPE" select="'ZoneOfFireResponsibilityName'"/>
	<xsl:variable name="MTF_PULSE_DURATION_AVERAGE_IN_MICROSECONDS_TYPE" select="'AveragePulseDuration'"/>
	<xsl:variable name="MTF_PULSE_DURATION_LOWER_LIMIT_IN_MICROSECONDS_TYPE" select="'LowerLimitPulseDuration'"/>
	<xsl:variable name="MTF_PULSE_DURATION_STANDARD_DEVIATION_IN_MICROSECONDS_TYPE" select="'StandardDeviationPulseDuration'"/>
	<xsl:variable name="MTF_PULSE_DURATION_UPPER_LIMIT_IN_MICROSECONDS_TYPE" select="'UpperLimitPulseDuration'"/>
	<xsl:variable name="MTF_RANK_OR_GRADE_OF_DECEASED_TYPE_PATTERN" select="'RankOrGradeOfDeceasedText'"/>
	<xsl:variable name="MTF_REQUEST_COMMENT_TYPE_PATTERN" select="'RequestCommentText'"/>
	<xsl:variable name="MTF_X_AXIS_GRID_REFERENCE_TYPE_PATTERN" select="'XAxisGridReferenceText'"/>
	<xsl:variable name="MTF_Y_AXIS_GRID_REFERENCE_TYPE_PATTERN" select="'YAxisGridReferenceText'"/>
	<xsl:variable name="MTF_OPERATION_CODE_WORD_TYPE" select="'OperationCodewordName'"/>
	<xsl:variable name="MTF_PERIOD_DIPLOMATIC_CLEARANCE_VALID_TYPE" select="'DiplomaticClearanceValidDuration'"/>
	<xsl:variable name="MTF_USER_MESSAGE_FORMAT_OTHER_TYPE" select="'UserMessageFormatOtherText'"/>
	<xsl:variable name="MTF_AIRCRAFT_TYPE_TYPE" select="'AircraftClassificationText'"/>
	<xsl:variable name="MTF_NON_NATO_AIRCRAFT_TYPE" select="'NonNatoAircraftID'"/>
	<xsl:variable name="MTF_SUBMARINE_READING_ROUTINE_SLOT_TYPE" select="'SubmarineReadingRoutineSlotText'"/>
	<xsl:variable name="MTF_MILITARY_LOAD_CLASSIFICATION_TYPE_PATTERN" select="'MilitaryLoadClassificationText'"/>
	<xsl:variable name="MTF_AUTOMATED_TACTICAL_TARGET_GRAPHIC_TYPE" select="'AutomatedTacticalTargetGraphicText'"/>
	<xsl:variable name="MTF_COMMENTS_TYPE_PATTERN" select="'CommentText'"/>
	<xsl:variable name="MTF_CONTACT_INSTRUCTIONS_TYPE_PATTERN" select="'ContactInstructionText'"/>
	<xsl:variable name="MTF_WEAPON_CONTROL_ANCILLARY_INFORMATION_TYPE_PATTERN" select="'WeaponControlAncillaryInformationText'"/>
	<xsl:variable name="MTF_CONTACT_INFORMATION_TYPE_PATTERN" select="'ContactInformationText'"/>
	<xsl:variable name="MTF_PALLET_COMMENTS_TYPE_PATTERN" select="'PalletCommentText'"/>
	<xsl:variable name="MTF_RELATED_DATA_ENTRY_COMMENTS_TYPE_PATTERN" select="'RelatedDataEntryCommentText'"/>
	<xsl:variable name="MTF_DELIVERY_COMMENT_TYPE_PATTERN" select="'DeliveryCommentText'"/>
	<xsl:variable name="MTF_RENDEZVOUS_LOCATION_COMMENT_TYPE_PATTERN" select="'RendezvousLocationCommentText'"/>
	<xsl:variable name="MTF_SORTIE_COMMENT_TYPE_PATTERN" select="'SortieCommentText'"/>
	<xsl:variable name="MTF_EARTH_HEMISPHERE_AND_GRID_ZONE_DESIGNATOR_TYPE_PATTERN" select="'EarthHemisphereAndGridZoneDesignatorName'"/>
	<xsl:variable name="MTF_SURFACE_AIR_TEMPERATURE_UNSPECIFIED_UNIT_OF_MEASURE_TYPE_PATTERN" select="'SurfaceAirTemperatureMeasure'"/>
	<xsl:variable name="MTF_BATTLE_FIELD_GEOMETRY_TYPE_NAME_TYPE_PATTERN" select="'BattlefieldGeometryName'"/>
	<xsl:variable name="MTF_EQUIPMENT_MODEL_COMMON_TYPE_PATTERN" select="'EquipmentModelCommonName'"/>
	<xsl:variable name="MTF_UNIT_OPERATING_MISSION_TYPE_PATTERN" select="'UnitOperatingMissionName'"/>
	<xsl:variable name="MTF_AIR_TO_AIR_TACAN_SETTINGS_TYPE_PATTERN" select="'AirToAirTacanSettingValue'"/>
	<xsl:variable name="MTF_DESIGNATION_OF_ENEMY_UNIT_TYPE_PATTERN" select="'EnemyUnitDesignationName'"/>
	<xsl:variable name="MTF_FREQUENCY_SHIFT_CONVERTER_TYPE_TYPE_PATTERN" select="'FrequencyShiftConverterValue'"/>
	<xsl:variable name="MTF_EXPLOITATION_REQUIREMENT_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'ExploitationRequirementID'"/>
	<xsl:variable name="MTF_OB_UNIT_IDENTIFIER_TYPE_PATTERN" select="'ObUnitID'"/>
	<xsl:variable name="MTF_LATITUDE_DECISECOND_ANGULAR_TYPE_PATTERN" select="'LatitudeAngular'"/>
	<xsl:variable name="MTF_LONGITUDE_DECISECOND_ANGULAR_TYPE_PATTERN" select="'LongitudeAngular'"/>
	<xsl:variable name="MTF_CIRCUIT_NAME_IN_ORDER_OF_PRIORITIES_TYPE_PATTERN" select="'CircuitNamePriorityOrderList'"/>
	<xsl:variable name="MTF_COORDINATION_CIRCUIT_TITLE_TYPE_PATTERN" select="'CoordinationCircuitTitleName'"/>
	<xsl:variable name="MTF_LOCAL_COMMAND_TYPE_PATTERN" select="'LocalCommandName'"/>
	<xsl:variable name="MTF_ENEMY_WEAPON_TYPE_PATTERN" select="'EnemyWeaponName'"/>
	<xsl:variable name="MTF_MAJOR_ARMY_COMMAND_TYPE_PATTERN" select="'MajorArmyCommandAcronymName'"/>
	<xsl:variable name="MTF_TACAN_NOMENCLATURE_TYPE_PATTERN" select="'TacanNomenclatureValue'"/>
	<xsl:variable name="MTF_MAP_OR_CHART_SERIES_DESIGNATOR_TYPE_PATTERN" select="'MapOrChartSeriesDesignatorName'"/>
	<xsl:variable name="MTF_SPECIFIC_TYPE_OF_TRACK_TYPE_PATTERN" select="'TrackSpecificCategoryName'"/>
	<xsl:variable name="MTF_MESSAGE_SECURITY_CATEGORY_TYPE_PATTERN" select="'MessageSecurityCategoryName'"/>
	<xsl:variable name="MTF_MESSAGE_SECURITY_POLICY_TYPE_PATTERN" select="'MessageSecurityPolicyName'"/>
	<xsl:variable name="MTF_MINEFIELD_DESIGNATOR_TYPE_PATTERN" select="'MinefieldDesignatorName'"/>
	<xsl:variable name="MTF_ORDERED_PART_DOCUMENT_NUMBER_TYPE_PATTERN" select="'OrderedPartDocumentNumber'"/>
	<xsl:variable name="MTF_MTOE_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'MtoeID'"/>
	<xsl:variable name="MTF_TDA_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'TdaID'"/>
	<xsl:variable name="MTF_NAME_INDIVIDUAL_TYPE_PATTERN" select="'IndividualName'"/>
	<xsl:variable name="MTF_NAME_PHONETIC_SPELLING_OFSURNAME_TYPE_PATTERN" select="'SurnamePhoneticSpellingText'"/>
	<xsl:variable name="MTF_SURNAME_OF_PERSON_TYPE_PATTERN" select="'PersonSurName'"/>
	<xsl:variable name="MTF_NAVIGATION_AID_IDENTIFIER_CODE_TYPE_PATTERN" select="'NavigationAidCode'"/>
	<xsl:variable name="MTF_RANK_OF_COMMANDER_TYPE_PATTERN" select="'CommanderRankShortName'"/>
	<xsl:variable name="MTF_MISSION_NICKNAME_TYPE_PATTERN" select="'MissionNickName'"/>
	<xsl:variable name="MTF_NEW_NICKNAME_TYPE_PATTERN" select="'NewNickName'"/>
	<xsl:variable name="MTF_OLD_NICKNAME_TYPE_PATTERN" select="'OldNickName'"/>
	<xsl:variable name="MTF_ESTIMATED_NUCLEAR_YIELD_IN_KILOTONS_TYPE_PATTERN" select="'EstimatedNuclearYieldMeasure'"/>
	<xsl:variable name="MTF_NUCLEAR_YIELD_IN_KILOTONS_TYPE_PATTERN" select="'NuclearYieldMeasure'"/>
	<xsl:variable name="MTF_AXIS_ORIENTATION_IN_DEGREES_TO_THE_TENTH_TYPE" select="'AxisOrientationMeasure'"/>
	<xsl:variable name="MTF_MCM_UNIT_COURSE_TRUE_TYPE" select="'McmUnitCourseTrueMeasure'"/>
	<xsl:variable name="MTF_ORIENTATION_TRUE_IN_DEGREES_TO_THE_TENTH_TYPE" select="'OrientationTrueMeasure'"/>
	<xsl:variable name="MTF_MINE_NEUTRALIZATION_EFFORT_TO_BE_ATTAINED_PERCENTAGE_TYPE" select="'MineNeutralizationEffortToBeAttainedPercent'"/>
	<xsl:variable name="MTF_PERCENTAGE_OF_MCM_REQUIRED_OR_ACCOMPLISHED_TYPE" select="'McmRequiredOrAccomplishedPercent'"/>
	<xsl:variable name="MTF_SAFE_LANE_NEUTRALIZATION_ACCOMPLISHED_PERCENTAGE_TYPE" select="'SafelaneNeutralizationAccomplishedPercent'"/>
	<xsl:variable name="MTF_CARGO_INCREMENT_NUMBER_TYPE_PATTERN" select="'CargoIncrementID'"/>
	<xsl:variable name="MTF_PRIMARY_BROADCAST_KEYMAT_TYPE_PATTERN" select="'PrimaryBroadcastKeymatText'"/>
	<xsl:variable name="MTF_SECONDARY_BROADCAST_KEYMAT_TYPE_PATTERN" select="'SecondaryBroadcastKeymatText'"/>
	<xsl:variable name="MTF_SHIP_SHORE_KEYMAT_TYPE_PATTERN" select="'ShipShoreKeymatText'"/>
	<xsl:variable name="MTF_FRACTION_OF_UNDETECTED_MINE_TYPE_PATTERN" select="'UndetectedMinePercent'"/>
	<xsl:variable name="MTF_PROBABILITY_OF_CLASSIFICATION_PERCENT_TYPE_PATTERN" select="'ClassificationProbabilityPercent'"/>
	<xsl:variable name="MTF_PROBABILITY_OF_NEUTRALIZATION_PERCENT_TYPE_PATTERN" select="'NeutralizationProbabilityPercent'"/>
	<xsl:variable name="MTF_PROBABILITY_OF_CLASSIFICATION_TYPE" select="'ClassificationProbabilityRatio'"/>
	<xsl:variable name="MTF_PROBABILITY_OF_REACQUISITION_OF_MINE_TYPE" select="'MineReacquisitionProbabilityRatio'"/>
	<xsl:variable name="MTF_PROBABILITY_OF_UNDETECTION_TYPE" select="'UndetectionProbabilityRatio'"/>
	<xsl:variable name="MTF_PASSIVE_SONAR_FREQUENCY_INDICATOR_TYPE_PATTERN" select="'PassiveSonarFrequencyValue'"/>
	<xsl:variable name="MTF_RELAY_DEVICE_IDENTIFICATION_TYPE_PATTERN" select="'RelayDeviceID'"/>
	<xsl:variable name="MTF_SENSOR_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'SensorID'"/>
	<xsl:variable name="MTF_ROUTE_COMMENT_TYPE_PATTERN" select="'RouteCommentText'"/>
	<xsl:variable name="MTF_SAR_MISSION_REPORT_COMMENT_TYPE_PATTERN" select="'SarMissionReportCommentText'"/>
	<xsl:variable name="MTF_WEATHER_COMMENTS_COMMENT_TYPE_PATTERN" select="'WeatherCommentText'"/>
	<xsl:variable name="MTF_HIGH_PRECEDENCE_ROUTING_INDICATOR_TYPE_PATTERN" select="'HighPrecedenceRouteCode'"/>
	<xsl:variable name="MTF_LOW_PRECEDENCE_ROUTING_INDICATOR_TYPE_PATTERN" select="'LowPrecedenceRouteCode'"/>
	<xsl:variable name="MTF_ROUTING_INDICATOR_TYPE_PATTERN" select="'RoutingCode'"/>
	<xsl:variable name="MTF_REQUIRED_ITEM_EQUIPMENT_SHORT_TITLE_TYPE_PATTERN" select="'RequiredItemEquipmentShortTitleText'"/>
	<xsl:variable name="MTF_SHORT_TITLE_TYPE_PATTERN" select="'ShortTitleText'"/>
	<xsl:variable name="MTF_MRS_CALIBRATION_DATA_TYPE_PATTERN" select="'MrsCalibrationDataValue'"/>
	<xsl:variable name="MTF_ZIP_APO_TYPE_PATTERN" select="'ZipApoNumber'"/>
	<xsl:variable name="MTF_DOWN_LINK_FREQUENCY_IN_MHZ_TYPE_PATTERN" select="'DownlinkFrequencyMeasure'"/>
	<xsl:variable name="MTF_UHF_FREQUENCY_IN_MHZ_TYPE_PATTERN" select="'UhfFrequencyMeasure'"/>
	<xsl:variable name="MTF_UPLINK_FREQUENCY_IN_MHZ_TYPE_PATTERN" select="'UplinkFrequencyMeasure'"/>
	<xsl:variable name="MTF_LOCATION_AMPLIFICATION_TYPE_PATTERN" select="'LocationAmplificationValue'"/>
	<xsl:variable name="MTF_SAM_UNIT_LOCATION_COMMENT_TYPE_PATTERN" select="'SamUnitLocationCommentText'"/>
	<xsl:variable name="MTF_VIP_COMMENT_TYPE_PATTERN" select="'VipCommentText'"/>
	<xsl:variable name="MTF_AIR_FORCE_CODE_OR_SPECIALTY_SHOP_CODE_REQUIRED_TYPE_PATTERN" select="'AirForceOrSpecialtyRequiredShopCode'"/>
	<xsl:variable name="MTF_AIRCRAFT_LIMITATIONS_TYPE_PATTERN" select="'AircraftLimitationText'"/>
	<xsl:variable name="MTF_TYPE_OF_RESPONSE_OR_REACTION_TYPE_PATTERN" select="'ResponseOrReactionKindText'"/>
	<xsl:variable name="MTF_MISSILE_TYPE_TYPE_PATTERN" select="'MissileName'"/>
	<xsl:variable name="MTF_ALTIMETER_SETTING_IN_HECTOPASCALS_TYPE_PATTERN" select="'AltimeterSettingMeasure'"/>
	<xsl:variable name="MTF_ALTIMETER_SETTING_IN_MILLIBARS_TYPE_PATTERN" select="'AltimeterSettingMeasure'"/>
	<xsl:variable name="MTF_AMENDMENT_SET_IDENTIFIER_TYPE_PATTERN" select="'AmendmentSetID'"/>
	<xsl:variable name="MTF_AUTHENTICATION_SYSTEM_TYPE_PATTERN" select="'AuthenticationSystemName'"/>
	<xsl:variable name="MTF_ANTENNA_GAIN_TYPE_PATTERN" select="'AntennaGainMeasure'"/>
	<xsl:variable name="MTF_SUBMARINE_ENGINE_TYPE_TYPE_PATTERN" select="'SubmarineEngineTypeName'"/>
	<xsl:variable name="MTF_ATDL1_TRACK_NUMBER_BLOCK_END_TYPE_PATTERN" select="'AtdlOneBlockEndTrackNumber'"/>
	<xsl:variable name="MTF_ATDL1_TRACK_NUMBER_BLOCK_START_TYPE_PATTERN" select="'AtdlOneBlockStartTrackNumber'"/>
	<xsl:variable name="MTF_CODES_CRYPTO_IN_USE_TYPE_PATTERN" select="'CodeOrCryptoInUseValue'"/>
	<xsl:variable name="MTF_CONTACT_SEQUENTIAL_2_LETTER_IDENTIFIER_TYPE" select="'ContactSequentialTwoLetterID'"/>
	<xsl:variable name="MTF_TARGET_ORIGINATOR_AND_TARGET_CLASSIFICATION_TYPE" select="'TargetOriginatorAndClassificationCode'"/>
	<xsl:variable name="MTF_PULSE_REPETITION_FREQUENCY_NATO_TYPE_PATTERN" select="'NatoPulseRepetitionFrequencyMeasure'"/>
	<xsl:variable name="MTF_CONTINUITY_CODE_LINK_TYPE" select="'ContinuityCodeLinkID'"/>
	<xsl:variable name="MTF_UNIT_SUBTYPE_TYPE" select="'UnitSubTypeName'"/>
	<xsl:variable name="MTF_DESCRIPTION_TYPE_PATTERN" select="'FeatureDescriptionText'"/>
	<xsl:variable name="MTF_NAVIGATION_AID_DESCRIPTION_TYPE_PATTERN" select="'NavigationAidDescriptionText'"/>
	<xsl:variable name="MTF_ELECTRONIC_MAIL_ADDRESS_PATTERN" select="'ElectronicMailAddressText'"/>
	<xsl:variable name="MTF_SECURE_ELECTRONIC_MAIL_ADDRESS_TYPE_PATTERN" select="'SecureElectronicMailAddressText'"/>
	<xsl:variable name="MTF_COMMUNICATIONS_EMITTER_NOTATION_TYPE_PATTERN" select="'CommunicationEmitterNotationText'"/>
	<xsl:variable name="MTF_EQUIPMENT_CODE_TYPE_PATTERN" select="'EquipmentCode'"/>
	<xsl:variable name="MTF_EQUIPMENT_ID_CODE_TYPE_PATTERN" select="'EquipmentCodeID'"/>
	<xsl:variable name="MTF_NATO_DESIGNATOR_TYPE_PATTERN" select="'NatoDesignatorID'"/>
	<xsl:variable name="MTF_EQUIPMENT_NOMENCLATURE_TYPE_PATTERN" select="'EquipmentNomenclatureText'"/>
	<xsl:variable name="MTF_JAMMER_EQUIPMENT_TYPE_TYPE_PATTERN" select="'JammerEquipmentTypeName'"/>
	<xsl:variable name="MTF_FREQUENCY_PLAN_DESIGNATION_TYPE_PATTERN" select="'FrequencyPlanDesignationName'"/>
	<xsl:variable name="MTF_CRYPTO_KEYING_MATERIAL_TYPE_PATTERN" select="'CryptoKeyMaterialText'"/>
	<xsl:variable name="MTF_GUARD_REQUIREMENTS_TYPE_PATTERN" select="'GuardRequirementName'"/>
	<xsl:variable name="MTF_NAVIGATIONAL_AID_IDENTIFIER_TYPE_PATTERN" select="'NavigationalAidID'"/>
	<xsl:variable name="MTF_HOST_TABLE_REMARKS_TYPE_PATTERN" select="'HostTableRemarkText'"/>
	<xsl:variable name="MTF_REPAIR_COMMENTS_TYPE_PATTERN" select="'RepairCommentText'"/>
	<xsl:variable name="MTF_MINE_FIRING_SYSTEM_TYPE_PATTERN" select="'MineFiringSystemText'"/>
	<xsl:variable name="MTF_ADDITIONAL_FRAME_IMAGE_NUMBERS_TYPE_PATTERN" select="'AdditionalImageNumberList'"/>
	<xsl:variable name="MTF_IMAGE_FRAME_NUMBER_TYPE_PATTERN" select="'ImageNumberList'"/>
	<xsl:variable name="MTF_FREQUENCY_COMMENT_PATTERN" select="'FrequencyCommentText'"/>
	<xsl:variable name="MTF_IMAGERY_REFERENCE_PATTERN" select="'ImageryReferenceText'"/>
	<xsl:variable name="MTF_DESIRED_MEAN_POINT_OF_IMPACT_DESCRIPTION_TYPE_PATTERN" select="'DesiredMeanPointOfImpactDescriptionText'"/>
	<xsl:variable name="MTF_INITIAL_POINT_DESCRIPTION_TYPE_PATTERN" select="'InitialPointDescriptionText'"/>
	<xsl:variable name="MTF_INTELLIGENCE_TYPE_PATTERN" select="'IntelligenceText'"/>
	<xsl:variable name="MTF_MENTAL_STATE_TYPE_PATTERN" select="'MentalStateText'"/>
	<xsl:variable name="MTF_INTERNATIONAL_RADIO_CALL_SIGN_TYPE_PATTERN" select="'InternationalRadioCallSignName'"/>
	<xsl:variable name="MTF_SEGMENT_PARAMETER_TYPE_PATTERN" select="'SegmentParameterText'"/>
	<xsl:variable name="MTF_ENCRYPTION_KEY_SHORT_TITLE_TYPE_PATTERN" select="'EncryptionKeyShortTitleText'"/>
	<xsl:variable name="MTF_LATITUDE_INDICATOR_MINUTES_TYPE_PATTERN" select="'LatitudeMeasure'"/>
	<xsl:variable name="MTF_LONGITUDE_INDICATOR_MINUTES_TYPE_PATTERN" select="'LongitudeMeasure'"/>
	<xsl:variable name="MTF_LATITUDE_MINUTES_04_DECIMAL_PLACES_TYPE_PATTERN" select="'LatitudePointMeasure'"/>
	<xsl:variable name="MTF_LONGITUDE_MINUTES_04_DECIMAL_PLACES_TYPE_PATTERN" select="'LongitudePointMeasure'"/>
	<xsl:variable name="MTF_LINK_22_NETWORK_IDENTIFIER_TYPE_PATTERN" select="'Link22NetworkID'"/>
	<xsl:variable name="MTF_LOWER_TRACK_BLOCK_LIMIT_TYPE_PATTERN" select="'LowerTrackBlockLimitID'"/>
	<xsl:variable name="MTF_UPPER_TRACK_BLOCK_LIMIT_TYPE_PATTERN" select="'UpperTrackBlockLimitID'"/>
	<xsl:variable name="MTF_MCM_AREA_DESIGNATOR_TYPE_PATTERN" select="'McmAreaDesignatorName'"/>
	<xsl:variable name="MTF_RADIATION_LEVEL_TYPE_PATTERN" select="'RadiationLevelMeasure'"/>
	<xsl:variable name="MTF_MILE_MARKER_END_TYPE_PATTERN" select="'MileMarkerEndValue'"/>
	<xsl:variable name="MTF_MILE_MARKER_START_TYPE_PATTERN" select="'MileMarkerStartValue'"/>
	<xsl:variable name="MTF_MAX_ALTITUDE_TYPE_PATTERN" select="'MaxAltitudeValue'"/>
	<xsl:variable name="MTF_MIN_ALTITUDE_TYPE_PATTERN" select="'MinAltitudeValue'"/>
	<xsl:variable name="MTF_MICKEY_NET_CONTROLLER_TYPE_PATTERN" select="'MickeyNetControllerText'"/>
	<xsl:variable name="MTF_MISSILE_SHORT_RANGE_AIR_DEFENSE_ENGAGEMENT_ZONE_IDENTIFIER_TYPE_PATTERN" select="'MissileShortRangeAirDefenseEngagementZoneID'"/>
	<xsl:variable name="MTF_MESSAGE_TRAFFIC_COMMENTS_TYPE_PATTERN" select="'MessageTrafficCommentText'"/>
	<xsl:variable name="MTF_MISSION_SUPPORT_REQUIREMENTS_COMMENTS_TYPE_PATTERN" select="'MissionSupportRequirementCommentText'"/>
	<xsl:variable name="MTF_MMOE_SIMPLE_INITIAL_THREAT_PROBABILITY_TYPE_PATTERN" select="'MmoeSimpleInitialThreatProbabilityNumber'"/>
	<xsl:variable name="MTF_MMOE_SUSTAINED_THREAT_PROBABILITY_TYPE_PATTERN" select="'MmoeSustainedThreatProbabilityNumber'"/>
	<xsl:variable name="MTF_ASSIGNED_WING_AND_OR_GROUP_TYPE_PATTERN" select="'AssignedWingAndOrGroupName'"/>
	<xsl:variable name="MTF_NAME_OF_AREA_TYPE_PATTERN" select="'AreaName'"/>
	<xsl:variable name="MTF_NAVAL_FIRE_SUPPORT_AREA_TYPE_PATTERN" select="'NavalFireSupportAreaName'"/>
	<xsl:variable name="MTF_NON_SECURE_TELEPHONE_NUMBER_INTERNATIONAL_TYPE_PATTERN" select="'NonsecureInternationalTelephoneNumber'"/>
	<xsl:variable name="MTF_SECURE_TELEPHONE_NUMBER_INTERNATIONAL_TYPE_PATTERN" select="'SecureInternationalTelephoneNumber'"/>
	<xsl:variable name="MTF_HAZARDOUS_CARGO_DESIGNATOR_TYPE_PATTERN" select="'HazardousCargoDesignatorName'"/>
	<xsl:variable name="MTF_PACKAGE_IDENTIFICATION_TYPE_PATTERN" select="'PackageID'"/>
	<xsl:variable name="MTF_PERCENTAGE_CLEARANCE_REQUIRED_OR_ACHIEVED_TYPE_PATTERN" select="'ClearanceRequiredOrAchievedPercent'"/>
	<xsl:variable name="MTF_WET_BULB_GLOBE_TEMP_INDEX_TYPE_PATTERN" select="'WetBulbGlobeTempIndexNumber'"/>
	<xsl:variable name="MTF_PREFIX_A_TO_F_TYPE_PATTERN" select="'PrefixAToFText'"/>
	<xsl:variable name="MTF_ORDNANCE_WEAPON_TYPE_BY_SCL_CODE_TYPE_PATTERN" select="'OrdnanceWeaponTypeBySclCode'"/>
	<xsl:variable name="MTF_PRIMARY_REMARK_KEY_TYPE_PATTERN" select="'PrimaryRemarkKeyName'"/>
	<xsl:variable name="MTF_PROBABILITY_OF_NEUTRALIZATION_TYPE_PATTERN" select="'NeutralizationProbabilityRatio'"/>
	<xsl:variable name="MTF_WORKSHEET_PROBABILITY_OF_DETECTIONOR_ACTUATIONB_TYPE_PATTERN" select="'ProbabilityWorksheetDetectionOrActuationBRatio'"/>
	<xsl:variable name="MTF_COMMUNICATION_PLAN_DESIGNATOR_TYPE_PATTERN" select="'CommunicationPlanDesignatorName'"/>
	<xsl:variable name="MTF_RECONNAISSANCE_TARGET_CATEGORY_EEI_TYPE_PATTERN" select="'ReconnaissanceTargetCategoryEeiList'"/>
	<xsl:variable name="MTF_REFERENCE_POINT_DESIGNATION_TYPE_PATTERN" select="'ReferencePointDesignationName'"/>
	<xsl:variable name="MTF_REFERENCE_POINT_NAME_ABBREVIATED_TYPE_PATTERN" select="'AbbreviatedReferencePointName'"/>
	<xsl:variable name="MTF_LOCAL_COMMANDER_COLLECTION_REQUIREMENT_TYPE_PATTERN" select="'LocalCommanderTaskNumberCollectionRequirementName'"/>
	<xsl:variable name="MTF_REPLY_TO_OFFICE_SYMBOL_TYPE_PATTERN" select="'ReplyToOfficeSymbolText'"/>
	<xsl:variable name="MTF_ULN_ASSIGNED_TYPE_PATTERN" select="'UlnAssignedText'"/>
	<xsl:variable name="MTF_SHIP_TYPE_IDENTIFICATION_TYPE_PATTERN" select="'ShipTypeID'"/>
	<xsl:variable name="MTF_SHIP_TYPE_NAVAL_TYPE_PATTERN" select="'NavalShipTypeName'"/>
	<xsl:variable name="MTF_SIGINT_ELECTRIGRAM_REPORT_SERIAL_TYPE_PATTERN" select="'SigintElectrigramReportSerialNumber'"/>
	<xsl:variable name="MTF_SIGINT_SPOT_REPORT_SERIAL_TYPE_PATTERN" select="'SigintSpotReportSerialNumber'"/>
	<xsl:variable name="MTF_MAP_PRODUCER_TYPE_PATTERN" select="'MapProducerName'"/>
	<xsl:variable name="MTF_SUBMARINE_GRID_SYSTEM_AREA_DESIGNATOR_TYPE_PATTERN" select="'SubmarineGridSystemAreaDesignatorName'"/>
	<xsl:variable name="MTF_SUBMARINE_TYPE_TYPE_PATTERN" select="'SubmarineTypeName'"/>
	<xsl:variable name="MTF_SURFACE_SHIP_TYPE_TYPE_PATTERN" select="'SurfaceShipTypeName'"/>
	<xsl:variable name="MTF_SWEEP_OR_DETECTION_PROBABILITY_TYPE_PATTERN" select="'SweepOrDetectionProbabilityRatio'"/>
	<xsl:variable name="MTF_REPORTABLE_ITEM_CODE_RIC_TYPE_PATTERN" select="'ReportableItemRicCode'"/>
	<xsl:variable name="MTF_SYMBOL_FUNCTION_IDENTIFIER_TYPE_PATTERN" select="'SymbolFunctionID'"/>
	<xsl:variable name="MTF_TIME_IN_RECONNAISSANCE_REPORTING_AREA_TYPE_PATTERN" select="'ReconnaissanceReportingAreaMeasure'"/>
	<xsl:variable name="MTF_TRACK_NUMBER_REFERENCE_SUBSET_1_TYPE_PATTERN" select="'ReferenceSubsetOneTrackNumber'"/>
	<xsl:variable name="MTF_TRACK_NUMBER_REFERENCE_SUBSET_2_TYPE_PATTERN" select="'ReferenceSubsetTwoTrackNumber'"/>
	<xsl:variable name="MTF_TYPE_FIRE_SUPPORT_REPORT_TYPE_PATTERN" select="'FireSupportTypeReportName'"/>
	<xsl:variable name="MTF_UNIVERSAL_REFERENCE_GRID_TYPE_PATTERN" select="'UniversalReferenceGridCoordinateNumber'"/>
	<xsl:variable name="MTF_UTM_1_METER_HIGHER_ORDER_EASTING_TYPE_PATTERN" select="'UtmHigherOrderEastingMeasure'"/>
	<xsl:variable name="MTF_UTM_1_METER_HIGHER_ORDER_NORTHING_7_CHARACTER_TYPE_PATTERN" select="'UtmHigherOrderNorthingMeasure'"/>
	<xsl:variable name="MTF_UTM_1_METER_HIGHER_ORDER_NORTHING_8_CHARACTER_TYPE_PATTERN" select="'UtmHigherOrderNorthingMeasure'"/>
	<xsl:variable name="MTF_MGRS_UTM_GRID_ZONE_ROW_TYPE_PATTERN" select="'MgrsUtmGridZoneRowMeasure'"/>
	<xsl:variable name="MTF_UTM_GRID_ZONE_ROW_TYPE_PATTERN" select="'UtmGridZoneRowMeasure'"/>
	<xsl:variable name="MTF_CONTACT_SEQUENTIAL_1_LETTER_IDENTIFIER_TYPE_PATTERN" select="'ContactSequentialOneLetterID'"/>
	
		



		

	

	<xsl:variable name="MTF_SPEED_TYPE_PATTERN" select="'SpeedMeasure'"/>
	<xsl:variable name="MTF_MET_WIND_SPEED_TYPE_PATTERN" select="'MetWindSpeedMeasure'"/>
	<xsl:variable name="MTF_SURFACE_SPEED_TYPE_PATTERN" select="'SurfaceSpeedMeasure'"/>
	<xsl:variable name="MTF_MET_CF_WIND_SPEED_TYPE_PATTERN" select="'MetCFWindSurfaceSpeedMeasure'"/>
	<xsl:variable name="MTF_DIVE_SPEED_TYPE_PATTERN" select="'DiveSpeedMeasure'"/>
	<xsl:variable name="MTF_SURFACE_WIND_SPEED_TYPE_PATTERN" select="'SurfaceWindSpeedMeasure'"/>
	<xsl:variable name="MTF_PEAK_GUSTS_TYPE_PATTERN" select="'PeakGustsMeasure'"/>
	<xsl:variable name="MTF_WIND_SPEED_TYPE_PATTERN" select="'WindSpeedMeasure'"/>
	<xsl:variable name="MTF_MEAN_SPEED_TYPE_PATTERN" select="'MeanSpeedMeasure'"/>
	<xsl:variable name="MTF_UNIT_SPEED_TYPE_PATTERN" select="'UnitSpeedMeasure'"/>
	<xsl:variable name="MTF_BOTTOM_CURRENT_TYPE_PATTERN" select="'BottomCurrentMeasure'"/>
	<xsl:variable name="MTF_DECORRELATION_WINDOW_MULTIPLIER_TYPE_PATTERN" select="'DecorrelationWindowMultiplierValue'"/>
	<xsl:variable name="MTF_TRUE_AIRSPEED_TYPE_PATTERN" select="'TrueAirspeedMeasure'"/>
	<xsl:variable name="MTF_TRUE_WINDSPEED_TYPE_PATTERN" select="'TrueWindspeedMeasure'"/>
	<xsl:variable name="MTF_MEAN_PEAK_FLOOD_SPEED_TYPE_PATTERN" select="'MeanPeakFloodSpeedMeasure'"/>
	<xsl:variable name="MTF_SAND_RIDGE_HEIGHT_IN_TENTHS_OF_METERS_TYPE_PATTERN" select="'SandRidgeHeightMeasure'"/>
	<xsl:variable name="MTF_MEASUREMENT_LOCATION_SPEED_TYPE_PATTERN" select="'MeasurementLocationSpeedMeasure'"/>
	<xsl:variable name="MTF_TOW_TIME_OUT_OF_TRACK_TYPE_PATTERN" select="'TowTimeOutOfTrackTimeMeasure'"/>
	<xsl:variable name="MTF_WINDOW_SIZE_MULTIPLIER_TYPE_PATTERN" select="'WindowSizeMultiplierValue'"/>
	<xsl:variable name="MTF_MEAN_PEAK_EBB_SPEED_TYPE_PATTERN" select="'MeanPeakEbbSpeedMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_PEAK_FLOOD_SPEED_TYPE_PATTERN" select="'MaximumPeakFloodSpeedMeasure'"/>
	<xsl:variable name="MTF_MINE_COUNTER_MEASURE_UNIT_SPEED_TYPE_PATTERN" select="'MineCountermeasureUnitSpeedMeasure'"/>
	<xsl:variable name="MTF_MAXIMUM_PEAK_EBB_SPEED_TYPE_PATTERN" select="'MaximumPeakEbbSpeedMeasure'"/>
	<xsl:variable name="MTF_AVERAGE_MAXIMUM_SPEED_TYPE_PATTERN" select="'AverageMaximumSpeedMeasure'"/>
	<xsl:variable name="MTF_PLAN_SPEED_TYPE_PATTERN" select="'PlanSpeedMeasure'"/>
	<xsl:variable name="MTF_VEHICLE_SPEED_TYPE_PATTERN" select="'VehicleSpeedMeasure'"/>
	<xsl:variable name="MTF_TORPEDO_SPEED_TYPE_PATTERN" select="'TorpedoSpeedMeasure'"/>
	<xsl:variable name="MTF_DIESEL_SUBMARINE_SPEED_TYPE_PATTERN" select="'DieselSubmarineSpeedMeasure'"/>
	<xsl:variable name="MTF_NUCLEAR_SUBMARINE_SPEED_TYPE_PATTERN" select="'NuclearSubmarineSpeedMeasure'"/>
	<xsl:variable name="MTF_FURTHEST_ON_CIRCLE_SPEED_TYPE_PATTERN" select="'FurthestOnCircleSpeedMeasure'"/>
	<xsl:variable name="MTF_GMF_SATELLITE_ANTENNA_SIZE_TYPE_PATTERN" select="'GmfSatelliteAntennaSizeMeasure'"/>
	
	<xsl:variable name="MTF_ACTIVITY_TYPE_PATTERN" select="'ActivityTypeText'"/>
	<xsl:variable name="MTF_AIRCRAFT_NAME_NATO_TYPE_PATTERN" select="'AircraftNatoName'"/>
	<xsl:variable name="MTF_AIRCRAFT_WEAPON_LOAD_TYPE_PATTERN" select="'AircraftWeaponLoadName'"/>
	<xsl:variable name="MTF_COMMUNICATIONS_CENTER_TYPE_PATTERN" select="'CommunicationsCenterName'"/>
	
	<!-- SimpleType -->	
	<xsl:variable name="MTF_OCTAL_ONE_DIGIT_TYPE_PATTERN" select="concat($MTF_OCTAL_TYPE,concat($MTF_ONE,$MTF_DIGIT))"/>																													<!-- [0-7]{1,1} -->
	<xsl:variable name="MTF_OCTAL_TWO_DIGIT_TYPE_PATTERN" select="concat($MTF_OCTAL_TYPE,concat($MTF_TWO,$MTF_DIGIT))"/>																													<!-- [0-7]{2,2} -->
	<xsl:variable name="MTF_OCTAL_THREE_DIGIT_TYPE_PATTERN" select="concat($MTF_OCTAL_TYPE,concat($MTF_THREE,$MTF_DIGIT))"/>																												<!-- [0-7]{3,3} -->
	<xsl:variable name="MTF_OCTAL_FOUR_DIGIT_TYPE_PATTERN" select="concat($MTF_OCTAL_TYPE,concat($MTF_FOUR,$MTF_DIGIT))"/>																													<!-- [0-7]{4,4} -->
	<xsl:variable name="MTF_OCTAL_FIVE_DIGIT_TYPE_PATTERN" select="concat($MTF_OCTAL_TYPE,concat($MTF_FIVE,$MTF_DIGIT))"/>																													<!-- [0-7]{5,5} -->
	
	<xsl:variable name="MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_ONE,$MTF_DIGIT))"/>																												<!-- [0-9]{1,1} -->
	<xsl:variable name="MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_TWO,$MTF_DIGIT))"/>																												<!-- [0-9]{1,2} -->
	<xsl:variable name="MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_THREE,$MTF_DIGIT))"/>																											<!-- [0-9]{1,3} -->
	<xsl:variable name="MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_FOUR,$MTF_DIGIT))"/>																												<!-- [0-9]{1,4} -->
	<xsl:variable name="MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_FIVE,$MTF_DIGIT))"/>																												<!-- [0-9]{1,5} -->
	<xsl:variable name="MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_SIX,$MTF_DIGIT))"/>																												<!-- [0-9]{1,6} -->
	<xsl:variable name="MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_SEVEN,$MTF_DIGIT))"/>																											<!-- [0-9]{1,7} -->
	<xsl:variable name="MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_NINE,$MTF_DIGIT))"/>																												<!-- [0-9]{1,9} -->
	<xsl:variable name="MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_TEN,$MTF_DIGIT))"/>
	<xsl:variable name="MTF_NUMERIC_ELEVEN_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_ELEVEN,$MTF_DIGIT))"/>
	<xsl:variable name="MTF_NUMERIC_TWO_DIGIT_YEAR_TYPE_PATTERN" select="'TwoDigitYearNumber'"/>																																			<!-- [0-9]{2,2} -->
	<!-- See MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN -->																																															<!-- [0-9]{2,2} -->
	
	<xsl:variable name="MTF_NUMERIC_TYPE_PATTERN" select="$MTF_NUMERIC_TYPE"/>																																								<!-- [0-9]{2,3} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{2,4} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{2,5} -->
	<!-- See MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN -->																																														<!-- [0-9]{3,3} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN --> 																																																	<!-- [0-9]{3,4} -->
	<!-- See MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN -->																																														<!-- [0-9]{4,4} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{4,5} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{4,6} --> 
	<!-- See MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN -->																																														<!-- [0-9]{5,5} -->
	<!-- See MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN -->																																															<!-- [0-9]{6,6} -->
	<!-- See MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN -->																																														<!-- [0-9]{7,7} -->
	<xsl:variable name="MTF_NUMERIC_EIGHT_DIGIT_TYPE_PATTERN" select="concat($MTF_NUMERIC_TYPE,concat($MTF_EIGHT,$MTF_DIGIT))"/>																											<!-- [0-9]{8,8} -->
	<!-- See MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN -->																																														<!-- [0-9]{9,9} -->
	<!-- See MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN -->																																															<!-- [0-9]{10,10} -->
	
	<!-- See MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN -->																																															<!-- [1-9]{1,1} -->
	<!-- See MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN -->																																															<!-- [1-4]{1,1} -->
	<!-- See MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN -->																																															<!-- [1-5]{1,1} -->
	<!-- See MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN -->																																															<!-- [1-8]{1,1} -->
	
	<xsl:variable name="MTF_ALPHA_TYPE_PATTERN" select="$MTF_ALPHA_TYPE"/>																																									<!-- [A-Z]{1,1} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{1,2} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{1,3} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{1,8} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{2,2} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{2,4} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{3,3} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{4,4} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{4,8} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{1,10} -->
	
	<xsl:variable name="MTF_ALPHASPECIAL_TYPE_PATTERN" select="$MTF_ALPHASPECIAL_TYPE"/>																																					<!-- [A-Z ]{1,50} -->
	
	<xsl:variable name="MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN" select="$MTF_ALPHANUMERICSPECIAL_TYPE"/>																																		<!-- [A-Z0-9 ]{1,6} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN -->																																														<!-- [A-Z0-9 ]{1,14} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN -->																																														<!-- [A-Z0-9 ]{1,15} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN -->																																														<!-- [A-Z0-9 ]{1,30} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN -->																																														<!-- [A-Z0-9 ]{5,5} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN -->																																														<!-- [A-Z0-9 ]{6,6} -->
	
	<xsl:variable name="MTF_ALPHANUMERIC_TYPE_PATTERN" select="$MTF_ALPHA_NUMERIC_TYPE"/>																																					<!-- [A-Z0-9]{1,1} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,2} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,3} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,4} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,5} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,6} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,7} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,8} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,9} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,10} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,15} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{1,12} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{2,2} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{2,3} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{2,4} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{2,6} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{2,8} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{3,3} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{3,4} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{3,5} -->	
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{3,6} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{3,8} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{3,9} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{3,11} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{4,4} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{4,5} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{4,7} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{5,5} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{5,6} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{5,7} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{6,6} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{7,7} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{8,8} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{10,10} -->
	<!-- See MTF_ALPHANUMERIC_TYPE_PATTERN -->																																																<!-- [A-Z0-9]{12,12} -->
	
	<xsl:variable name="MTF_NATO_ANBS_TYPE_PATTERN" select="$MTF_NATO_ANBS_TYPE"/>																																							<!-- [\-\.,\(\)\?A-Z0-9 ]{1,4} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,5} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,6} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,7} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,8} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,9} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,10} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,11} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,12} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,13} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,14} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,15} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,16} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,17} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,18} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,19} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,20} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,21} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,23} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,25} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,24} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,26} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,28} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,29} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,30} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,32} -->	
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,33} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,35} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,36} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,39} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,38} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,40} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,41} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,43} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,46} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,50} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,54} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->	 																																																<!-- [\-\.,\(\)\?A-Z0-9 ]{1,55} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,60} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,61} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,68} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{2,10} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{2,12} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{2,20} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{2,24} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{3,10} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{3,12} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{3,15} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{3,20} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{3,30} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{3,36} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{3,55} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{4,7} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{4,20} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{4,25} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{6,11} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{6,15} -->
	<!-- See MTF_NATO_ANBS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{10,10} -->
	
	
	<xsl:variable name="MTF_NATO_ANS_TYPE_PATTERN" select="$MTF_NATO_ANS_TYPE"/>																																							<!-- [\-\.,\(\)\?A-Z0-9]{1,5} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{1,6} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{1,7} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{1,10} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{1,12} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{1,14} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{1,15} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{3,6} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{3,11} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{3,12} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{4,7} -->
	<!-- See MTF_NATO_ANS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z0-9]{6,6} -->

	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,8}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6}|\.[0-9]{7} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,2}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN -->																																														<!-- [\-0-9]{1,4} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{0,3}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{0,2}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{0,4}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,4}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,4}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,3}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1} -->
	<!-- See MTF_PERCENT_TYPE -->																																																			<!-- [0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,7}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1}|[0-9]{5}\.[0-9]{1}|[0-9]{6}\.[0-9]{1}|[0-9]{7}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [\-0-9]{1,5} -->
	<!-- See MTF_ALPHA_TYPE_PATTERN -->																																																		<!-- [A-Z]{1,1}|(AA|BB|CC|DD|EE|FF|GG|HH|II|JJ|KK|LL|MM|NN|OO|PP|QQ|RR|SS|TT|UU|VV|WW|XX|YY|ZZ) -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{2}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN --> 																																																	<!-- [0-9]{2}\.[0-9]{2}  -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0]{1}\.[0-9]{1}|[0]{1}\.[0-9]{2}|[0]{1}\.[0-9]{3} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{0,5}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,5}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1} -->
	<xsl:variable name="MTF_PULSE_DURATION_IN_MICROSECONDS_TYPE_PATTERN_PATTERN_TYPE" select="'PulseDuration'"/>																																							<!-- [0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE -->																																																<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,10} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE -->																																																<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,68} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE -->																																																<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,30} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE -->																																																<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,38} -->
	<!-- See MTF_ALPHANUMERICSPECIAL_TYPE -->																																																<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,67} -->
	<!-- See MTF_PERCENT_TYPE -->																																																			<!-- [0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN --> 																																																	<!-- [0-9]{3}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{3}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{3}\.[0-9]{3} --> 
	<xsl:variable name="MTF_NATO_ABS_TYPE_PATTERN" select="$MTF_NATO_ABS_TYPE"/>																																							<!-- [\-\.,\(\)\?A-Z ]{1,25} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [\-0-9]{1,3} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [\-0-9]{4,5} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-1]{1}\.[0-9]{1}|\.[0-9]{2}|[0-1]{1}\.[0-9]{2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{0,6}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,11} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1}\.[0-9]{2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{2}\.[0-9]{4} -->
	<!-- See MTF_PERCENT_TYPE -->																																																			<!-- [0-9]{2}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1} -->
	<!-- See MTF_ALPHASPECIAL_TYPE -->																																																		<!-- [AEGHJ-M]{2,2} -->
	<!-- See MTF_ALPHASPECIAL_TYPE -->																																																		<!-- [A-HJ-NP-Z]{1,1} -->
	<!-- See MTF_ALPHANUMERIC_TYPE -->																																																		<!-- [A-F1-9]{1,1} -->
	<!-- See MTF_ALPHA_TYPE -->																																																				<!-- [A-HJ-NP-Z]{2,2} -->
	<!-- See MTF_NATO_ABS_TYPE_PATTERN -->																																																	<!-- [\-\.,\(\)\?A-Z ]{1,31} -->
	<!-- See MTF_ALPHA_TYPE -->																																																				<!-- [A-F]{1,1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1} -->
	
	
	<!-- MTF COMBINED NAMES -->
	<xsl:variable name="MTF_LAT_LONG_INDICATOR_TYPE_PATTERN" select="'LatLongIndicator'"/>																																					<!-- [0-5]{1,1} -->
	<xsl:variable name="MTF_SHIP_NAVAL_TYPE_PATTERN" select="'ShipNavalCategory'"/>																																							<!-- [A-Z]{2,8} -->
	<xsl:variable name="MTF_REFERENCE_POINT_TYPE_PATTERN" select="'ReferencePoint'"/>																																						<!-- [A-Z ]{1,12} -->
	<xsl:variable name="MTF_NICKNAME_TYPE_PATTERN" select="'NickName'"/>																																									<!-- [A-Z ]{1,18} -->
	<xsl:variable name="MTF_SORTS_MONITOR_NAME_TYPE_PATTERN" select="'SortsMonitorName'"/>																																					<!-- [A-Z ]{1,24} -->
	<xsl:variable name="MTF_TRACK_BLOCK_LIMIT_TYPE_PATTERN" select="'TrackBlockLimit'"/>																																					<!-- [A-Z0-7]{4,5} -->
	<xsl:variable name="MTF_LINE_NUMBER_TYPE_PATTERN" select="'LineNumber'"/>																																								<!-- [A-Z0-9]{3,7} -->
	<xsl:variable name="MTF_PERSON_NAME_PART_TYPE_PATTERN" select="'PersonNamePart'"/>																																						<!-- [\-\.,\(\)\?A-Z ]{1,20} -->
	<xsl:variable name="MTF_EQUIPMENT_TYPE_PATTERN" select="'Equipment'"/>																																									<!-- [\-\.,\(\)\?A-Z0-9 ]{1,45} -->
	<xsl:variable name="MTF_KEY_SHORT_TITLE_TYPE_PATTERN" select="'KeyShortTitleName'"/>																																						<!-- [\-\.,\(\)\?A-Z0-9 ]{6,30} -->
	<xsl:variable name="MTF_FACILITY_NUMBER_TYPE_PATTERN" select="'FacilityNumber'"/>																																						<!-- [\-\.,\(\)\?A-Z0-9]{8,13} -->
	<xsl:variable name="MTF_SIGINT_REPORT_SERIAL_TYPE_PATTERN" select="'SigIntReportSerial'"/>																																				<!-- [\-\.,\(\)\?A-Z0-9]{9,15} -->
	<xsl:variable name="MTF_PULSE_REPETITION_TYPE_PATTERN" select="'PulseRepetition'"/>																																						<!-- [0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{7}\.[0-9]{1}|[0-9]{6}\.[0-9]{2}|[0-9]{5}\.[0-9]{3}|[0-9]{4}\.[0-9]{4}|[0-9]{8}\.[0-9]{1}|[0-9]{7}\.[0-9]{2}|[0-9]{6}\.[0-9]{3}|[0-9]{5}\.[0-9]{4}|[0-9]{9}\.[0-9]{1}|[0-9]{8}\.[0-9]{2}|[0-9]{7}\.[0-9]{3}|[0-9]{6}\.[0-9]{4}  -->
	<xsl:variable name="MTF_NINETEEN_CHAR_DESCRIPTION_TEXT_TYPE_PATTERN" select="'NineteenCharDescriptionText'"/> 																															<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,20} -->
	<xsl:variable name="MTF_ELECTRONIC_MAIL_ADDRESS_TYPE_PATTERN" select="'ElectronicMailAddress'"/>																																		<!-- [\-A-Z0-9\.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,60} -->
	<xsl:variable name="MTF_TRACK_NUMBER_REFERENCE_SUBSET_TYPE_PATTERN" select="'TrackNumberReferenceSubset'"/>																																<!-- [0-7A-HJ-NP-Z]{1,1} -->
	<xsl:variable name="MTF_GRID_ZONE_ROW_TYPE_PATTERN" select="'GridZoneRow'"/> 																																							<!-- [C-HJ-NP-X]{1,1} -->
	<xsl:variable name="MTF_KEYMAT_TYPE_PATTERN" select="'Keymat'"/>																																										<!-- [\-\.,\(\)\?A-Z0-9 ]{8,20} -->
	<xsl:variable name="MTF_PULSE_REPETITION_FREQUENCY_TYPE_PATTERN" select="'PulseRepetitionFrequency'"/>																																	<!-- [0-9]{1,11}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6}|\.[0-9]{7}|[0-9]{7}\.[0-9]{1}|[0-9]{6}\.[0-9]{2}|[0-9]{5}\.[0-9]{3}|[0-9]{4}\.[0-9]{4}|[0-9]{3}\.[0-9]{5}|[0-9]{2}\.[0-9]{6}|[0-9]{1}\.[0-9]{7}|\.[0-9]{8}|[0-9]{8}\.[0-9]{1}|[0-9]{7}\.[0-9]{2}|[0-9]{6}\.[0-9]{3}|[0-9]{5}\.[0-9]{4}|[0-9]{4}\.[0-9]{5}|[0-9]{3}\.[0-9]{6}|[0-9]{2}\.[0-9]{7}|[0-9]{1}\.[0-9]{8}|\.[0-9]{9}|[0-9]{9}\.[0-9]{1}|[0-9]{8}\.[0-9]{2}|[0-9]{7}\.[0-9]{3}|[0-9]{6}\.[0-9]{4}|[0-9]{5}\.[0-9]{5}|[0-9]{4}\.[0-9]{6}|[0-9]{3}\.[0-9]{7}|[0-9]{2}\.[0-9]{8}|[0-9]{1}\.[0-9]{9}|\.[0-9]{10} -->
	<xsl:variable name="MTF_ALTIMETER_SETTING_TYPE_PATTERN" select="'AltimeterSetting'"/>																																					<!-- [0-9]{3,4}\.[0-9]{1} -->
	<xsl:variable name="MTF_LOGICAL_CHANNEL_NUMBER_TYPE_PATTERN" select="'LogicalChannelNumber'"/>																																			<!-- [A-F]{1,2} -->
	<xsl:variable name="MTF_IMAGE_NUMBER_TYPE_PATTERN" select="'ImageNumber'"/>																																								<!-- [\-,A-Z0-9]{1,14} -->
	<xsl:variable name="MTF_WATER_DEPTH_IN_METERS_TYPE_PATTERN" select="'WaterDepthInMeters'"/>																																				<!-- [0-9]{1,4}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1} -->
	<xsl:variable name="MTF_WATER_TEMP_TYPE_PATTERN" select="'WaterTemp'"/>																																									<!-- [\-0-9]{1,3}\.[0-9]{1} -->
	<xsl:variable name="MTF_ATDL1_TRACK_NUMBER_TYPE_PATTERN" select="'Atdl1TrackNumber'"/>																																					<!-- [A-Q]{1,1}[A-H]{1,1} -->
	<!--See MTF_ALTITUDE_TYPE_PATTERN -->																																																	<!-- [\-0-9]{1,6} -->
	<xsl:variable name="MTF_MILE_MARKER_TYPE_PATTERN" select="'MileMarkerMeasure'"/>																																						<!-- [\-0-9]{2,3}\.[0-9]{1} -->
	<xsl:variable name="MTF_THREAT_PROBABILITY_TYPE_PATTERN" select="'ThreatProbabiity'"/>																																					<!-- \.[0-9]{2} -->
	<xsl:variable name="MTF_NUCLEAR_YIELD_TYPE_PATTERN" select="'NuclearYieldMeasure'"/>  																																					<!-- [0-9]{1,6}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5} -->
	<xsl:variable name="MTF_LAT_LONG_ANGULAR_TYPE_PATTERN" select="'LatLongAngularMeasure'"/> 																																				<!-- [0-9]{0}\.[0-9]{1} -->	
	<xsl:variable name="MTF_RADIATION_DECAY_RATE_TYPE_PATTERN" select="'RadiationDecayRateMeasure'"/>																																		<!-- [0-9]{1,4}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3} -->

		
	<!-- MTF UNIQUE NAMES -->
	<xsl:variable name="MTF_BLANK_SPACE_CHARACTER_BASE_TYPE_PATTERN" select="'BaseBlankSpaceCharacterText'"/>																																<!-- [ ]{1,1} -->
	<xsl:variable name="MTF_APPENDIX_IDENTIFIER_TYPE_PATTERN" select="'AppendixAlphaID'"/> 																																					<!-- [A-D]{1,1} -->
	<xsl:variable name="MTF_ALPHABETIC_IDENTIFIER_FREQUENCY_BAND_TYPE_PATTERN" select="'FrequencyBandAlphaID'"/>  																															<!-- [A-M]{1,1} -->
	<xsl:variable name="MTF_CONTACT_STATUS_TYPE_PATTERN" select="'ContactStatusText'"/> 																																					<!-- [A-Z ]{1,7} -->
	<xsl:variable name="MTF_AIRCRAFT_IDENTIFICATION_PROCEDURES_TYPE_PATTERN" select="'AircraftIdentificationProcedureText'"/>  																												<!-- [A-Z]{1,15} -->
	<xsl:variable name="MTF_ALPHABETIC_IDENTIFIER_SPECIAL_TYPE_PATTERN" select="'SpecialAlphaID'"/>	 																																		<!-- [A-Z ]{1,15} -->
	<xsl:variable name="MTF_COLLECTOR_PROJECT_NAME_TYPE_PATTERN" select="'CollectorProjectName'"/>																																			<!-- [A-Z ]{1,19} -->
	<xsl:variable name="MTF_APPROACH_TYPE_PATTERN" select="'ApproachText'"/> 																																								<!-- [A-Z]{1,20} -->
	<xsl:variable name="MTF_AEW_SURVEILLANCE_AREA_NAME_TYPE_PATTERN" select="'AewSurveillanceAreaName'"/> 																																	<!-- [A-Z ]{2,20} -->
	<xsl:variable name="MTF_BEACH_DESIGNATOR_TYPE_PATTERN" select="'BeachDesignatorName'"/> 																																				<!-- [A-Z ]{4,37} -->
	<xsl:variable name="MTF_ACTION_CODE_TYPE_PATTERN" select="'ActionCode'"/>																																								<!-- [A-Z ]{4,37} -->
	<xsl:variable name="MTF_BROADCAST_GEOGRAPHICAL_AREA_TYPE_PATTERN" select="'BroadcastGeographicalAreaCode'"/>																															<!-- [A-Z]{1,1}|[A-Z]{1,1}[A-Z]{1,1} -->
	<xsl:variable name="MTF_AIRCRAFT_READINESS_TYPE_PATTERN" select="'AircraftAlertReadinessText'"/>																																		<!-- RS[0-9]{2,2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-6]{1,1} -->
	<xsl:variable name="MTF_ACTUAL_RADIATION_DECAY_RATE_TYPE_PATTERN" select="'ActualRadiationDecayRateMeasure'"/>																															<!-- [0-9]{0,1}\.[0-9]{2}-->
	<xsl:variable name="MTF_TRUE_ANGLE_TYPE_PATTERN" select="'TrueAngle'"/> 																																								<!-- [0-9]{3}\.[0-9]{1,1} -->
	<xsl:variable name="MTF_AIRCRAFT_STARTING_UNIT_TYPE_PATTERN" select="'AircraftStartingUnitName'"/> 																																		<!-- [\-\.,\(\)\?A-Z0-9]{1,8} -->
	<xsl:variable name="MTF_AIRCRAFT_IDENTIFIER_TYPE_PATTERN" select="'AircraftID'"/>																																						<!-- [\-\.,\(\)\?A-Z0-9 ]{3,29} -->
	<xsl:variable name="MTF_ALLOWANCE_EQUIPAGE_LIST_NUMBER_TYPE_PATTERN" select="'AllowanceEquipageListNumber'"/>  																															<!-- [\-\.,\(\)\?A-Z0-9]{11,11} -->
	<!-- See MTF_ALTITUDE_TYPE_PATTERN -->																																																	<!-- [0-9]{1,6}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1} -->
	<xsl:variable name="MTF_ANTENNA_AZIMUTH_MAGNETIC_REFERENCE_TYPE_PATTERN" select="'AntennaAzimuthMagneticReferenceCategory'"/>  																											<!-- [0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{3}\.[0-9]{2} -->
	<xsl:variable name="MTF_ANTENNA_AZIMUTH_TRUE_NORTH_DESIGNATOR_REFERENCE_TYPE_PATTERN" select="'AntennaAzimuthTrueNorthReference'"/>																										<!-- [0-9]{3}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{3}\.[0-9]{2} -->
	<xsl:variable name="MTF_BIT_ERROR_RATE_TYPE_PATTERN" select="'BitErrorRateText'"/>																																						<!-- \.[0-9]{3}|\.[0-9]{4}|\.[0-9]{5} -->
	<xsl:variable name="MTF_BUILD_TYPE_PATTERN" select="'BuildText'"/> 	 																																									<!-- [\-\.,\(\)\?A-Z ]{1,10} -->
	<xsl:variable name="MTF_CARGO_TYPE_PATTERN" select="'CargoName'"/>																																										<!-- [\-\.,\(\)\?A-Z0-9 ]{3,7} -->
	<xsl:variable name="MTF_CASE_NOTATION_TYPE_PATTERN" select="'CaseNotationText'"/>																																						<!-- [\-\.,\(\)\?A-Z0-9 ]{9,14} -->
	<xsl:variable name="MTF_CODE_NAME_TYPE_PATTERN" select="'CodeName'"/> 																																									<!-- [\-A-Z0-9 ]{1,20} -->
	<xsl:variable name="MTF_CODEWORD_CONTRACTED_TYPE_PATTERN" select="'CodewordContractedText'"/> 																																			<!-- [\-A-Z0-9 ]{1,15} -->
	<xsl:variable name="MTF_CODEWORD_MEANING_TYPE_PATTERN" select="'CodewordMeaningText'"/>  																																				<!-- [\-A-Z0-9 ]{1,32} -->
	<xsl:variable name="MTF_CODEWORD_TYPE_PATTERN" select="'CodewordText'"/>   																																								<!-- [\-A-Z ]{1,32} -->
	<xsl:variable name="MTF_COMMUNITY_SEQUENCE_NO_TYPE_PATTERN" select="'CommunitySequenceNumber'"/>																																		<!-- [A-HJ-NP-Z1-9]{1,1} -->
	<xsl:variable name="MTF_COLUMN_ALPHABETIC_INDICATOR_TYPE_PATTERN" select="'ColumnAlphabeticID'"/>																																		<!-- [A-HJ-NP-Z]{1,1}|(AA|BB|CC|DD|EE|FF|GG|HH|JJ|KK|LL|MM|NN|PP|QQ|RR|SS|TT|UU|VV|WW|XX|YY|ZZ) -->
	<xsl:variable name="MTF_COMBAT_NET_RADIO_INITIALIZATION_DATA_LOAD_ID_TYPE_PATTERN" select="'CombatNetRadioInitializationDataLoadID'"/>	 																								<!--[\- \.,\(\)\?A-Z0-9]{1,60}-->
	<xsl:variable name="MTF_COMBAT_NET_RADIO_OPERATING_AREA_NAME_TYPE_PATTERN" select="'CombatNetRadioOperatingAreaName'"/> 																												<!-- [\-;\.,\(\)\?A-Z0-9 ]{1,30} -->
	<xsl:variable name="MTF_COMPONENT_ID_NUMBER_TYPE_PATTERN" select="'ComponentNumberID'"/>																																				<!-- [\-\.,\(\)\?A-Z0-9 ]{4,12} -->
	<xsl:variable name="MTF_COMINT_NOTATION_TYPE_PATTERN" select="'ComintNotationText'"/>  																																					<!-- [A-Z0-9 ]{3,6} -->
	<xsl:variable name="MTF_COMMERCIAL_IMAGE_CHIP_IDENTIFICATION_TYPE_PATTERN" select="'CommercialImageChipID'"/> 																															<!-- [A-Z0-9]{16,16} -->
	<xsl:variable name="MTF_COMMUNICATIONS_CIRCUIT_DESIGNATOR_TYPE_PATTERN" select="'CommunicationsCircuitDesignatorName'"/>  																												<!-- [A-Z0-9]{5,8} -->
	<xsl:variable name="MTF_COMMUNICATION_EQUIPMENT_TYPE_CODE_TYPE_PATTERN" select="'CommunicationsEquipmentCode'"/> 																														<!-- [\-\.,\(\)\?A-Z0-9]{1,11} -->
	<xsl:variable name="MTF_COMMUNICATIONS_SATELLITE_ANTENNA_ELEVATION_TYPE_PATTERN" select="'CommunicationsSatelliteAntennaElevationMeasure'"/> 																							<!-- [0-9]{2}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{2}\.[0-9]{2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN --> 																																																	<!-- [0-9]{1,4}\.[0-9]{2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,5}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,8}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,9}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6}|\.[0-9]{7}|[0-9]{7}\.[0-9]{1}|[0-9]{6}\.[0-9]{2}|[0-9]{5}\.[0-9]{3}|[0-9]{4}\.[0-9]{4}|[0-9]{3}\.[0-9]{5}|[0-9]{2}\.[0-9]{6}|[0-9]{1}\.[0-9]{7} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,4}\.[0-9]{3} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN --> 																																																	<!-- [0-9]{3}|[0-9]{3}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->  																																																	<!-- [0-9]{1,12}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6}|\.[0-9]{7}|[0-9]{7}\.[0-9]{1}|[0-9]{6}\.[0-9]{2}|[0-9]{5}\.[0-9]{3}|[0-9]{4}\.[0-9]{4}|[0-9]{3}\.[0-9]{5}|[0-9]{2}\.[0-9]{6}|[0-9]{1}\.[0-9]{7}|\.[0-9]{8}|[0-9]{8}\.[0-9]{1}|[0-9]{7}\.[0-9]{2}|[0-9]{6}\.[0-9]{3}|[0-9]{5}\.[0-9]{4}|[0-9]{4}\.[0-9]{5}|[0-9]{3}\.[0-9]{6}|[0-9]{2}\.[0-9]{7}|[0-9]{1}\.[0-9]{8}|\.[0-9]{9}|[0-9]{9}\.[0-9]{1}|[0-9]{8}\.[0-9]{2}|[0-9]{7}\.[0-9]{3}|[0-9]{6}\.[0-9]{4}|[0-9]{5}\.[0-9]{5}|[0-9]{4}\.[0-9]{6}|[0-9]{3}\.[0-9]{7}|[0-9]{2}\.[0-9]{8}|[0-9]{1}\.[0-9]{9}|\.[0-9]{10}|[0-9]{10}\.[0-9]{1}|[0-9]{9}\.[0-9]{2}|[0-9]{8}\.[0-9]{3}|[0-9]{7}\.[0-9]{4}|[0-9]{6}\.[0-9]{5}|[0-9]{5}\.[0-9]{6}|[0-9]{4}\.[0-9]{7}|[0-9]{3}\.[0-9]{8}|[0-9]{2}\.[0-9]{9}|[0-9]{1}\.[0-9]{10}|\.[0-9]{11} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [0-9]{1,5}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN --> 																																																	<!-- [0-9]{1,7}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}| -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN --> 																																																	<!-- [0-9]{1,6}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1}|[0-9]{5}\.[0-9]{1}|[0-9]{6}\.[0-9]{1} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN --> 																																																	<!-- [\-0-9]{1,5}|\.[0-9]{1}|[\-0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[\-0-9]{2}\.[0-9]{1}|[\-0-9]{1}\.[0-9]{2}|[\-0-9]{3}\.[0-9]{1}|[\-0-9]{2}\.[0-9]{2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN -->																																																	<!-- [\-0-9]{1,5}|\.[0-9]{1}|[\-0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[\-0-9]{2}\.[0-9]{1}|[\-0-9]{1}\.[0-9]{2}|[\-0-9]{3}\.[0-9]{1}|[\-0-9]{2}\.[0-9]{2}|[\-0-9]{4}\.[0-9]{1}|[\-0-9]{3}\.[0-9]{2}|[\-0-9]{5}\.[0-9]{1}|[\-0-9]{4}\.[0-9]{2}|[\-0-9]{5}\.[0-9]{2} -->
	<!-- See MTF_NUMERIC_TYPE_PATTERN --> 																																																	<!-- [\-0-9]{1,3}|\.[0-9]{1}|[\-0-9]{1}\.[0-9]{1}|[\-0-9]{2}\.[0-9]{1}|[\-0-9]{3}\.[0-9]{1} -->
	<xsl:variable name="MTF_CONTRACT_NUMBER_TYPE_PATTERN" select="'ContractNumber'"/>  																																						<!-- [\-\.,\(\)\?A-Z0-9]{16,16} -->
	<xsl:variable name="MTF_CONTROL_POINT_DESIGNATOR_TYPE_PATTERN" select="'ControlPointDesignatorName'"/>																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{2,8} -->
	<xsl:variable name="MTF_COURSE_ID_NUMBER_TYPE_PATTERN" select="'CourseID'"/> 																																							<!--[\-\.,\(\)\?A-Z0-9]{10,10}-->
	<xsl:variable name="MTF_COURSES_OF_ACTION_NUMBER_TYPE_PATTERN" select="'CourseOfActionID'"/> 																																			<!-- [A-Z0-9 ]{5,6} -->
	<xsl:variable name="MTF_COURSES_OF_ACTION_PLAN_IDENTIFICATION_NUMBER_TYPE_PATTERN" select="'CourseOfActionPlanID'"/> 																													<!-- [\-\.,\(\)\?A-Z0-9 ]{8,10} -->
	<xsl:variable name="MTF_COVERAGE_FACTOR_TYPE_PATTERN" select="'CoverageFactorRatio'"/>																																					<!-- [0-1]{1}|\.[0-9]{1}|[0]{1}\.[0-9]{1}|\.[0-9]{2}|[0]{1}\.[0-9]{1}|[0]{1}\.[0-9]{2} -->
	<xsl:variable name="MTF_CREW_COMMENTS_TYPE_PATTERN" select="'CrewCommentText'"/>  																																						<!--[\-\.,\(\)\?A-Z0-9 ]{1,63}-->
	<xsl:variable name="MTF_CST_CHANNEL_DATA_SIZE_TYPE_PATTERN" select="'CstChannelDataSizeQuantity'"/>																																		<!-- [5678]{1,1} -->
	<xsl:variable name="MTF_CURRENT_CRYPTO_PERIOD_DESIGNATOR_CCPD_TYPE_PATTERN" select="'CurrentCryptoPeriodDesignatorCcpdName'"/>																											<!-- [0-1]{1,1} -->
	<xsl:variable name="MTF_DAMAGE_CATEGORY_TYPE_PATTERN" select="'DamageCategoryName'"/> 																																					<!-- [A-G]{1,1} -->
	<xsl:variable name="MTF_DAMAGE_CONFIDENCE_TYPE_PATTERN" select="'DamageConfidenceText'"/>  																																				<!-- [A-L]{1,1} -->
	<xsl:variable name="MTF_DAMAGE_PURPOSE_TYPE_PATTERN" select="'DamagePurposeText'"/>  																																					<!-- [1-6]{1,1} -->
	<xsl:variable name="MTF_DATA_LINK_LAYER_ADDRESS_DLAD_TYPE_PATTERN" select="'DataLinkLayerAddressDladText'"/>																															<!-- [\-\.0-9A-F]{1,21} -->
	<xsl:variable name="MTF_DEVIATION_VALUE_INFORMATION_TYPE_PATTERN" select="'DeviationValueInformationMeasure'"/>  																														<!-- [\-0-9]{3,5} -->
	<xsl:variable name="MTF_DISCREPANCY_JOB_CONTROL_NUMBER_TYPE_PATTERN" select="'DiscrepancyJobControlNumber'"/>																															<!--[\-\.,\(\)\?A-Z0-9 ]{7,12}-->
	<xsl:variable name="MTF_DOCUMENT_OR_PUBLICATION_TYPE_PATTERN" select="'DocumentOrPublicationName'"/>																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{2,32} -->
	<xsl:variable name="MTF_DROP_SCORE_TYPE_PATTERN" select="'DropScoreText'"/>  																																							<!-- [A-Z0-9 ]{1,4} -->
	<xsl:variable name="MTF_DROP_ZONE_SLOPE_TYPE_PATTERN" select="'DropZoneSlopeMeasure'"/>																																					<!-- '        {1,2}' -->
	<xsl:variable name="MTF_ELECTRIC_REFLECTIVITY_COEFFICIENT_Q_TYPE_PATTERN" select="'ElectricReflectivityCoefficientQValue'"/>																											<!-- [0-9]{1}\.[0-9]{3} -->
	<xsl:variable name="MTF_ELECTRONIC_DATA_TYPE_PATTERN" select="'ElectronicDataText'"/>																																					<!-- [\-A-Z0-9 \.,\(\)\?!@#$%\^&amp;\*=_\+\[\]\{\}\\"'; ~`\|]{1,60} -->
	<xsl:variable name="MTF_EMISSION_CONTROL_PLAN_DESIGNATION_TYPE_PATTERN" select="'EmissionControlPlanDesignationName'"/>	 																												<!-- [A-Z ]{4,14} -->
	<xsl:variable name="MTF_EMITTER_NICKNAME_TYPE_PATTERN" select="'EmitterNickName'"/> 																																					<!-- [A-Z ]{7,23} -->
	<xsl:variable name="MTF_ENEMY_MASTER_KEY_TYPE_PATTERN" select="'EnemyMasterKeyType'"/>																																					<!-- [A-Z0-9]{1,14} -->
	<xsl:variable name="MTF_ENGAGEMENT_AUTHORITY_TYPE_PATTERN" select="'EngagementAuthorityName'"/>  																																		<!-- [\-\.,\(\)\?A-Z0-9 ]{1,22} -->
	<xsl:variable name="MTF_EQUIPMENT_NAME_COMMON_TYPE_PATTERN" select="'EquipmentCommonName'"/>	 																																		<!-- [A-Z0-9 ]{1,24} -->
	<xsl:variable name="MTF_ETEPP_SERIAL_NUMBER_TYPE_PATTERN" select="'EteppSerialNumber'"/>	 																																			<!-- [\-\.,\(\)\?A-Z0-9]{4,5} -->
	<xsl:variable name="MTF_ETEPP_VERSION_TYPE_PATTERN" select="'EteppVersionNumber'"/> 																																					<!-- [\-\.,\(\)\?0-9]{4,4} -->
	<xsl:variable name="MTF_EVENT_DESCRIPTION_TYPE_PATTERN" select="'EventDescriptionText'"/>																																				<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,54} -->
	<xsl:variable name="MTF_EXCESS_AIRCRAFT_COMMENT_TYPE_PATTERN" select="'ExcessAircraftCommentText'"/>  																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{1,34} -->
	<xsl:variable name="MTF_EXERCISE_NICKNAME_TYPE_PATTERN" select="'ExerciseNickName'"/> 																																					<!-- [\-\.,\(\)\?A-Z0-9 ]{1,56} -->
	<xsl:variable name="MTF_EXPANSION_ITEM_TYPE_PATTERN" select="'ExpansionItemCode'"/>																																						<!-- [\-\.,\(\)\?A-Z0-9 ]{3,3} -->
	<xsl:variable name="MTF_EXTENDED_OPERATIONAL_PARAM_SETTING_EOPS_NO_TYPE_PATTERN" select="'ExtendedOperationalParamaterSettingsEopsNumber'"/>																							<!-- [a-zA-Z]{1,1}[0-9]{1,2} -->
	<xsl:variable name="MTF_FIFTEEN_QUADRILATERAL_GEO_REF_TYPE_PATTERN" select="'FifteenDegreeQuadrilateralGeoRefName'"/>																													<!-- [A-HJ-NP-Z]{1,1}[A-HJ-M]{1,1} -->
	<xsl:variable name="MTF_FILE_EXTENSION_NAME_TYPE_PATTERN" select="'FileExtensionName'"/>  																																				<!-- [\-\.,\(\)\?A-Z]{3,16} -->
	<xsl:variable name="MTF_FILE_NAME_TYPE_PATTERN" select="'FileName'"/>																																									<!-- [\-\.,\(\)\?A-Z0-9 ]{2,30} -->
	<xsl:variable name="MTF_FILE_NAMING_POLICY_TYPE_PATTERN" select="'FileNamingPolicyText'"/>																																				<!-- [\-\.,\(\)\?A-Z0-9 ]{5,40}-->
	<xsl:variable name="MTF_FILING_NUMBER_TYPE_PATTERN" select="'FileNumber'"/>																																								<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|]{1,10} -->
	<xsl:variable name="MTF_FREE_TEXT_BASE_TYPE_PATTERN" select="'BaseFreeText'"/>																																							<!-- [A-Z0-9\.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\"';&gt;&lt;~\|a-z\t\n]|([:A-Z0-9\.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\"';&gt;&lt;~\|a-z\t\n][/:A-Z0-9 \.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z\t\n]*[A-Z0-9\.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\"';&gt;&lt;~\|a-z\t\n]) -->
	<xsl:variable name="MTF_FREE_TEXT_FIELD_TYPE_PATTERN" select="'FieldFreeText'"/> 																																						<!-- [\-:A-Z0-9 \.,\(\)\?!@#$%\^&amp;\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z\t\n]([:A-Z0-9 \.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z\t\n]|/[:A-Z0-9 \.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z\t\n]|://)* -->
	<xsl:variable name="MTF_GUIDANCE_COMMENT_TYPE_PATTERN" select="'GuidanceCommentText'"/> 																																				<!-- [\-\.,\(\)\?A-Z0-9 ]{1,47} -->
	<xsl:variable name="MTF_HARMONIC_TYPE_PATTERN" select="'HarmonicNumber'"/>  																																							<!-- [\-0-9]{1,22} -->
	<xsl:variable name="MTF_HAWIIAN_OPERATIONS_AREA_GRID_AXIS_INDICATOR_PREFIX_TYPE_PATTERN" select="'HawaiianOperationsAreaGridAxisIndicatorPrefixText'"/>  																				<!-- [A-Y]{1,1} -->
	<xsl:variable name="MTF_HAZARD_TYPE_PATTERN" select="'HazardText'"/>																																									<!-- [\-\.,\(\)\?A-Z0-9 ]{2,25} -->
	<xsl:variable name="MTF_HEADER_VERSION_AND_SERIES_TYPE_PATTERN" select="'HeaderVersionAndSeriesText'"/>																																	<!-- 2045-47001[A-Z]{0,1} -->
	<xsl:variable name="MTF_HEADING_INFORMATION_TYPE_PATTERN" select="'HeadingInformationText'"/>																																			<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,61} -->
	<xsl:variable name="MTF_HORIZONTAL_ORIENTATION_TYPE_PATTERN" select="'HorizontalOrientationMeasure'"/>  																																<!-- [0-9]{3}|[0-9]{1}\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1} -->
	<xsl:variable name="MTF_IDENTIFYING_INFORMATION_TYPE_PATTERN" select="'IdentifyingInformationText'"/>																																	<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,35} -->
	<xsl:variable name="MTF_IFF_SIF_CODE_OR_CONDITION_TYPE_PATTERN" select="'IffSifOrConditionCode'"/> 																																		<!-- [A-Z0-9]{2,9} -->
	<xsl:variable name="MTF_IMAGE_CHIP_IDENTIFICATION_TYPE_PATTERN" select="'ImageChipID'"/>  																																				<!-- [A-Z0-9]{40,64} -->
	<xsl:variable name="MTF_IMEI_NUMBER_TYPE_PATTERN" select="'ImeiNumber'"/> 																																								<!-- [0-9]{15,15} -->
	<xsl:variable name="MTF_INDEX_NUMBER_TYPE_PATTERN" select="'IndexNumber'"/> 																																							<!-- [\-\.,\(\)\?A-Z0-9]{1,4} -->
	<xsl:variable name="MTF_INSTRUCTIONS_FOR_ACKNOWLEDGING_TYPE_PATTERN" select="'AcknowledgeInstructionText'"/>																															<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,50} -->
	<xsl:variable name="MTF_INTERNET_PROTOCOL_ADDRESS_IPV6_TYPE_PATTERN" select="'InternetProtocolAddressIpv6Number'"/>																														<!-- [\-:A-Fa-f0-9]{2,45} -->
	<xsl:variable name="MTF_KEYMAT_AND_CODES_TYPE_PATTERN" select="'KeymatAndCodesText'"/>	 																																				<!-- [\-\.,\(\)\?A-Z0-9 ]{8,12} -->
	<xsl:variable name="MTF_LAND_MINE_OTHER_TYPE_PATTERN" select="'OtherLandMineName'"/>	 																																				<!-- [\-\.,\(\)\?A-Z0-9]{2,11} -->
	<xsl:variable name="MTF_LAYING_REFERENCE_NUMBER_TYPE_PATTERN" select="'LayingReferenceNumberLrnText'"/>																																	<!-- [\-\.,\(\)\?A-Z0-9]{2,15} -->
	<xsl:variable name="MTF_LINEAL_PRECEDENCE_NUMBER_TYPE_PATTERN" select="'LinealPrecedenceNumber'"/>  																																	<!-- [\-\.,\(\)\?0-9]{9,9} -->
	<xsl:variable name="MTF_LINK22_FREQ_PLAN_TYPE_PATTERN" select="'Link22FreqPlanName'"/>																																					<!-- [0-9A-F]{2,2} -->
	<xsl:variable name="MTF_LINK22_NET_NUMBER_TYPE_PATTERN" select="'Link22NetNumber'"/>																																					<!-- [0][0-9A-F]{2,2}|[1-2][0-9A-F]{2,2}|[3][E][0-7]|[3][0-9A-D][0-9A-F] -->
	<xsl:variable name="MTF_LITTORAL_CURRENT_TYPE_PATTERN" select="'LittoralCurrentMeasure'"/>																																						<!-- [0-9]{1,2}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1} -->
	<xsl:variable name="MTF_LLOYD_REGISTRY_NUMBER_TYPE_PATTERN" select="'LloydsRegistryNumber'"/> 																																			<!-- [0-9]{6,7} -->
	<xsl:variable name="MTF_M_UNIT_VALUE_TYPE_PATTERN" select="'MUnitValue'"/>																																								<!-- [0-9]{1,3}|\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{3}\.[0-9]{2} -->
	<xsl:variable name="MTF_MAJOR_EQUIPMENT_CODE_TYPE_PATTERN" select="'MajorEquipmentCode'"/>																																				<!-- [\-A-Z0-9 \.,\(\)\?!@#$%\^&amp;\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|]{1,13} -->
	<xsl:variable name="MTF_MAXIMUM_SOUND_PRESSURE_IN_DECIBES_TYPE_PATTERN" select="'MaximumSoundPressureMeasure'"/> 																														<!-- [\-0-9]{3,4} -->
	<xsl:variable name="MTF_MESSAGE_SERIAL_NUMBER_TYPE_PATTERN" select="'MessageSerialNumber'"/>																																			<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|]{1,7} -->
	<xsl:variable name="MTF_MESSAGE_SUBJECT_TYPE_PATTERN" select="'MessageSubjectText'"/>  																																					<!-- [\-\.,\(\)\?A-Z0-9 ]{1,64} -->
	<xsl:variable name="MTF_METHOD_OF_PASSING_TARGET_INFORMATION_TYPE_PATTERN" select="'TargetInformationPassMethodCode'"/>																													<!-- [A-Z ]{3,9} -->
	<xsl:variable name="MTF_MIL_STD_TYPE_PATTERN" select="'MilStdNumber'"/>  																																								<!-- [0-9]{4,4}[A-Z]{0,1} -->
	<xsl:variable name="MTF_MINE_DANGER_AREA_NAME_TYPE_PATTERN" select="'MineDangerAreaName'"/>																																				<!--[\-\.,\(\)\?A-Z0-9 ]{6,20}-->
	<xsl:variable name="MTF_MINEFIELD_DENSITY_IN_MINES_PER_METER_TYPE_PATTERN" select="'MinefieldDensityMeasure'"/> 																														<!-- [0-9]{1}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2} -->
	<xsl:variable name="MTF_MINIMUM_TRACK_QUALITY_TQ_TYPE_PATTERN" select="'MinimumTrackQualityTqNumber'"/>   																																<!-- [3-7]{1,1} -->
	<xsl:variable name="MTF_MISSILE_ASSIGNMENT_TYPE_PATTERN" select="'MissileAssignmentID'"/> 																																				<!-- [\-\.,\(\)\?A-Z0-9]{5,5} -->
	<xsl:variable name="MTF_MISSION_DESIGNATOR_COMMENTS_TYPE_PATTERN" select="'MissionDesignatorCommentText'"/>																																<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,15} -->
	<xsl:variable name="MTF_MISSION_IDENTIFICATION_WILDCARD_TYPE_PATTERN" select="'WildcardMissionID'"/> 																																	<!-- [\-\.,\(\)\?A-Z0-9]{2,12} -->
	<xsl:variable name="MTF_MISSION_LOCATION_COMMENT_TYPE_PATTERN" select="'MissionLocationCommentText'"/>																																	<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,4} -->
	<xsl:variable name="MTF_MISSION_OBJECTIVE_TYPE_PATTERN" select="'MissionObjectiveText'"/>																																				<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,43} -->
	<xsl:variable name="MTF_MISSION_RELATIONSHIP_TYPE_PATTERN" select="'MissionRelationshipText'"/> 																																		<!-- [\-\.,\(\)\?A-Z]{5,5} -->
	<xsl:variable name="MTF_MOTION_IMAGERY_STREAM_ID_TYPE_PATTERN" select="'MotionImageryStreamID'"/>																																		<!-- [0-9A-F]{32,32} -->
	<xsl:variable name="MTF_NAME_OF_INDIVIDUAL_TYPE_PATTERN" select="'IndividualName'"/> 																																					<!-- [\-\.,\(\)\?A-Z ]{1,35} -->
	<xsl:variable name="MTF_NAME_OF_PERSON_TYPE_PATTERN" select="'PersonName'"/>  																																							<!-- [\-\.,\(\)\?A-Z ]{1,17} -->
	<xsl:variable name="MTF_NATIONAL_GRID_SYSTEM_COORDINATES_TYPE_PATTERN" select="'NationalGridSystemCoordinatesList'"/> 																													<!-- [\-A-Z0-9a-z]{1,20} -->
	<xsl:variable name="MTF_NATIONAL_ROE_NUMBER_TYPE_PATTERN" select="'NationalRoeNumber'"/> 																																				<!-- [A-Z ]{11,28} -->
	<xsl:variable name="MTF_NATIONAL_SIGINT_REQUIREMENTS_LIST_NSR1_TYPE_PATTERN" select="'NationalSigintRequirementsListNsrl'"/> 																											<!-- [\-\.,\(\)\?A-Z0-9]{3,18} -->
	<xsl:variable name="MTF_NATIONAL_STOCK_NUMBER_TYPE_PATTERN" select="'NationalStockNumber'"/> 																																			<!-- [\-\.,\(\)\?0-9]{16,16} -->
	<xsl:variable name="MTF_NAVAL_ORGANIZATION_NUMERICAL_DESIGNATOR_TYPE_PATTERN" select="'NavalOrganizationDesignatorNumber'"/>  																											<!--[\.0-9]{1,12} -->
	<xsl:variable name="MTF_NAVAL_TASK_ORGANIZATION_ECHELON_NUMBER_TYPE_PATTERN" select="'NavalTaskOrganizationEchelonNumber'"/>  																											<!-- [\.0-9]{2,11} -->
	<xsl:variable name="MTF_NETWORK_IDENTIFIER_TYPE_PATTERN" select="'NetworkID'"/>	 																																						<!-- [\-\.,\(\)\?A-Z0-9]{9,12} -->
	<xsl:variable name="MTF_NETWORK_PROTOCOL_STANDARD_TYPE_PATTERN" select="'CombatNetRadioName'"/>																																			<!-- 188-220[A-Z]{0,1} -->
	<xsl:variable name="MTF_NUMBER_AND_TYPE_OF_ORDER_OF_BATTLE_TYPE_PATTERN" select="'NumberAndTypeOfOrderOfBattleText'"/>																													<!-- [\-\.,\(\)\?A-Z0-9 ]{13,47} -->
	<xsl:variable name="MTF_NUMBER_OF_BLADES_TYPE_PATTERN" select="'BladesNumber'"/>  																																						<!-- [2-9]{1,1}-->
	<xsl:variable name="MTF_OIL_TYPE_PATTERN" select="'OilName'"/> 																																											<!-- [\-\.,\(\)\?A-Z0-9]{5,6} -->
	<xsl:variable name="MTF_ONE_DEGREE_QUADRILATERAL_GEO_REF_TYPE_PATTERN" select="'OneDegreeQuadrilateralGeoRefName'"/>																													<!-- [A-HJ-NPQ]{2,2} -->
	<xsl:variable name="MTF_OPERATING_SYSTEM_NAME_TYPE_PATTERN" select="'OperatingSystemName'"/>  																																			<!-- [A-Z0-9]{3,30} -->
	<xsl:variable name="MTF_OPERATIONAL_TASKING_MESSAGE_NAME_TYPE_PATTERN" select="'OperationalTaskingMessageName'"/> 																														<!-- [\-\.,\(\)\?A-Z0-9 ]{1,69} -->
	<xsl:variable name="MTF_ORIGINATING_UNIT_IDENTIFIER_TYPE_PATTERN" select="'OriginatingUnitID'"/> 																																		<!-- [\-\.,\(\)\?A-Z0-9]{1,9} -->
	<xsl:variable name="MTF_OTHER_SAR_UNIT_COMMENTS_TYPE_PATTERN" select="'OtherSarUnitCommentText'"/>																																		<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,14} -->
	<xsl:variable name="MTF_PADDING_TYPE_PATTERN" select="'PaddingValue'"/>																																									<!-- [0-4]{1,1} -->
	<xsl:variable name="MTF_PERCENTAGE_TYPE_PATTERN" select="'Percent'"/>																																									<!-- [0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|\.[0-9]{3} -->
	<xsl:variable name="MTF_PLAN_MAJOR_EQUIPMENT_TYPE_CODE_TYPE_PATTERN" select="'PlanMajorEquipmentCode'"/> 																																<!-- [\-\.,\(\)\?A-Z0-9]{1,13} -->
	<xsl:variable name="MTF_PLATFORM_TYPE_SYMBOL_TYPE_PATTERN" select="'PlatformSymbolCode'"/> 																																				<!-- [A-Z0-9]{4,6} -->
	<xsl:variable name="MTF_POINT_IDENTIFIER_TYPE_PATTERN" select="'PointID'"/>																																								<!-- [\-\.,\(\)\?A-Z0-9 ]{2,17} -->
	<xsl:variable name="MTF_PRODUCER_SERIAL_NUMBER_TYPE_PATTERN" select="'ProducerSerialNumber'"/>																																			<!-- [0-9A-F]{3,3} -->
	<xsl:variable name="MTF_PRODUCT_NUMBER_TYPE_PATTERN" select="'ProductNumber'"/>																																							<!-- [0-9A-F]{6,6} -->
	<xsl:variable name="MTF_PRODUCTION_DATE_TIME_TYPE_PATTERN" select="'ProductionDateTime'"/>																																				<!-- [0-9A-F]{8,8}-->
	<xsl:variable name="MTF_PULSE_DURATION_IN_MICROSECONDS_TYPE_PATTERN" select="'PulseDuration'"/>																																			<!-- [0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{2}\.[0-9]{2}|[0-9]{3}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|[0-9]{2}\.[0-9]{3}|[0-9]{3}\.[0-9]{3} -->
	<xsl:variable name="MTF_PULSE_REPETITION_INTERVAL_STABILITY_TYPE_PATTERN" select="'PulseRepetitionIntervalStabilityDuration'"/> 																										<!-- [0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|[0-9]{2}\.[0-9]{4} -->
	<xsl:variable name="MTF_Q_ROUTE_WIDTH_IN_YARDS_TYPE_PATTERN" select="'QRouteWidth'"/>																																					<!-- [0-9]{1,5}\.[0-9]{1} -->
	<xsl:variable name="MTF_RECIEVERS_PACKAAGE_IDENTIFIER_TYPE_PATTERN" select="'ReceiversPackageID'"/> 																															<!-- [\-\.,\(\)\?A-Z0-9]{1,3} -->
	<xsl:variable name="MTF_RECORD_ORIGINATOR_BE_NUMBER_TYPE_PATTERN" select="'RecordOriginatorBeNumber'"/>	 																																<!-- [\-\.,\(\)\?A-Z0-9]{2,2} -->
	<xsl:variable name="MTF_REFERENCE_SERIAL_NUMBER_TYPE_PATTERN" select="'ReferenceSerialNumber'"/>																																		<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|]{1,30} -->
	<xsl:variable name="MTF_REMARKS_TYPE_PATTERN" select="'RemarkText'"/>																																									<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,12} -->
	<xsl:variable name="MTF_REQUIREMENT_NUMBER_TYPE_PATTERN" select="'RequirementNumber'"/>																																					<!--[\-\.,\(\)\?A-Z0-9 ]{6,6}-->
	<xsl:variable name="MTF_RESTRICTED_TRACK_QUALITY_TQ_TYPE_PATTERN" select="'RestrictedTrackQualityTq'"/>  																																<!-- [2-6]{1,1} -->
	<xsl:variable name="MTF_REVISION_CYCLE_NUMBER_TYPE_PATTERN" select="'RevisionCycleNumber'"/> 																																			<!-- [\-\.,\(\)\?A-Z0-9]{7,8} -->
	<xsl:variable name="MTF_ROE_CONSTRAINTS_TYPE_PATTERN" select="'RoeConstraintText'"/>																																					<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,62} -->
	<xsl:variable name="MTF_ROLE_LOSS_TIMEOUT_TYPE_PATTERN" select="'RoleLossTimeoutDuration'"/>  																																			<!-- [2-9]|1[0-5]{1,2} -->
	<xsl:variable name="MTF_RUNWAY_DESIGNATOR_TYPE_PATTERN" select="'RunwayDesignatorName'"/>																																				<!-- [0-9]{2,2}(C|L|R){0,1} -->
	<xsl:variable name="MTF_SADL_AIR_KEY_95_TO_99_TYPE_PATTERN" select="'SadlAirKey95To99Number'"/>																																			<!-- [5-9]{1,1} -->
	<xsl:variable name="MTF_SADL_GATEWAY_KEY_TYPE_PATTERN" select="'SadlGatewayKeyNumber'"/>																																				<!-- [1-8]{1,1} -->
	<xsl:variable name="MTF_SCHEDULE_COMMENTS_TYPE_PATTERN" select="'ScheduleCommentText'"/> 																																				<!-- [\-\.,\(\)\?A-Z0-9 ]{1,49} -->
	<xsl:variable name="MTF_SEARCH_PROBABILITY_TYPE_PATTERN" select="'SearchProbability'"/>  																																				<!-- [0]{1}\.[0-9]{1}|[0]{1}\.[0-9]{2} -->
	<xsl:variable name="MTF_SEASONAL_TIME_RANGE_TYPE_PATTERN" select="'SeasonalTimeRange'"/>																																				<!-- [0-9,]{1,26} -->
	<xsl:variable name="MTF_SHIP_PENNANT_PREFIX_TYPE_PATTERN" select="'ShipPennantPrefixID'"/> 																																				<!-- [A-Z]{1,4} -->
	<xsl:variable name="MTF_SHIP_TARGET_COMMENTS_TYPE_PATTERN" select="'ShipTargetCommentText'"/> 																																			<!-- [\-\.,\(\)\?A-Z0-9 ]{1,37} -->
	<xsl:variable name="MTF_SHIP_TYPE_PATTERN" select="'ShipQuantity'"/>  																																									<!-- [A-Z]{1,6} -->
	<xsl:variable name="MTF_SORTS_ORG_ID_TYPE_PATTERN" select="'SortsOrgID'"/>																																								<!-- [A-HJ-NP-Z0-9]{1,1} -->
	<xsl:variable name="MTF_SPACE_OBJECT_IDENTIFIER_TYPE_PATTERN" select="'SpaceObjectID'"/> 																																				<!-- [0-9]{3,6} -->
	<xsl:variable name="MTF_SPECIAL_CAVEATS_TYPE_PATTERN" select="'SpecialCaveatText'"/> 																																					<!-- [\-\.,\(\)\?A-Z ]{4,25} -->
	<xsl:variable name="MTF_SPECIAL_INTEREST_CARGO_COMMENTS_TYPE_PATTERN" select="'SpecialInterestCargoCommentText'"/> 																														<!-- [\-\.,\(\)\?A-Z0-9 ]{1,62} -->
	<xsl:variable name="MTF_SPECIAL_OPERATIONAL_ELINT_REQUIREMENT_SPOER_TYPE_PATTERN" select="'SpecialOperationalElintRequirementSpoerNumber'"/> 																							<!-- [\-\.,\(\)\?0-9]{6,6} -->
	<xsl:variable name="MTF_SPECIAL_TRACK_NUMBER_DESCRIPTION_TYPE_PATTERN" select="'SpecialTrackNumberDescriptionText'"/>																													<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,40} -->
	<xsl:variable name="MTF_SPECIFIC_AREA_TYPE_PATTERN" select="'SpecificAreaText'"/>	 																																					<!-- [A-Z]{2,10} -->
	<xsl:variable name="MTF_SPEED_OF_SOUND_IN_WATER_TYPE_PATTERN" select="'SpeedOfSoundInWater'"/> 																																			<!-- [0-9]{4}\.[0-9]{1} -->
	<xsl:variable name="MTF_SQUADRON_NUMBER_TYPE_PATTERN" select="'SquadronNumber'"/>  																																						<!-- [A-Z0-9 ]{4,4} -->
	<xsl:variable name="MTF_STANAG_TYPE_PATTERN" select="'StanagNumber'"/>																																									<!-- [0-9]{4,4}ED[0-9]{1,2} -->
	<xsl:variable name="MTF_STANDARD_NETWORK_SETTINGS_SNS_TABLE_TYPE_PATTERN" select="'StandardNetworkSettingsSnsTableVersionNumber'"/> 																									<!-- [\-\.,\(\)\?A-Z0-9 ]{9,9} -->
	<xsl:variable name="MTF_STANDARD_OF_MESSAGE_TEXT_FORMAT_TYPE_PATTERN" select="'StandardOfMessageTextFormat'"/> 																															<!-- [\-A-Z0-9\(\)]{20,20} -->
	<xsl:variable name="MTF_STANDARDS_REQUIREMENT_CODE_TYPE_PATTERN" select="'StandardRequirementCode'"/>																																	<!-- [\-\.,\(\)\?A-Z0-9 ]{12,12} -->
	<xsl:variable name="MTF_STANDING_REQUEST_FOR_ARTILLERY_TARGET_INFO_NUMBER_TYPE_PATTERN" select="'StandingRequestForArtilleryTargetInformationNumber'"/> 																				<!-- [1-3]{1,1} -->
	<xsl:variable name="MTF_STRAIT_OF_JUAN_DE_FUCA_OPERATING_AREA_TYPE_PATTERN" select="'StraitOfJuanDeFucaOperatingAreaName'"/>																											<!-- (PP|QQ|RR|SS|TT|UU|VV|WW|XX|YY|ZZ){2,2} -->
	<xsl:variable name="MTF_SUBMARINE_CLASS_DESIGNATOR_TYPE_PATTERN" select="'SubmarineClassDesignatorName'"/> 																																<!-- [\-\.,\(\)\?A-Z]{1,7} -->
	<xsl:variable name="MTF_SUPPORTING_ADDRESS_PREFIX_TYPE_PATTERN" select="'SupportingUnitAddressPrefixID'"/>																																<!-- [A-NP-Q]{1,1}[B-H]{1,1} -->
	<xsl:variable name="MTF_SURNAME_TYPE_PATTERN" select="'SurName'"/> 																																										<!-- [\-\.,\(\)\?A-Z ]{3,20} -->
	<xsl:variable name="MTF_TACAN_IDENTIFIER_TYPE_PATTERN" select="'TacanID'"/> 																																							<!-- [A-Z]{2,3} -->
	<xsl:variable name="MTF_TARGET_MATERIAL_REFERENCE_IDENTIFICATION_TYPE_PATTERN" select="'TargetMaterialReferenceID'"/>																													<!-- [\-\.,\(\)\?A-Z0-9 ]{5,15} -->
	<xsl:variable name="MTF_TARGET_NICKNAME_TYPE_PATTERN" select="'TargetNickName'"/> 																																						<!-- [A-Z0-9]{3,10} -->
	<xsl:variable name="MTF_TASK_ORGANIZATION_NUMERICAL_DESIGNATOR_TYPE_PATTERN" select="'TaskOrganizationNumericalDesignatorName'"/>  																										<!-- [\-\.,\(\)\?0-9 ]{2,13} -->
	<xsl:variable name="MTF_TELEX_NUMBER_TYPE_PATTERN" select="'TelexNumber'"/> 																																							<!-- [\-\.,\(\)\?A-Z0-9]{5,10} -->
	<xsl:variable name="MTF_THREAT_NAME_TYPE_PATTERN" select="'ThreatName'"/>																																								<!-- [\-\.,\(\)\?A-Z0-9 ]{3,50} -->
	<xsl:variable name="MTF_TIME_AMPLIFICATION_COMMENT_TYPE_PATTERN" select="'TimeAmplificationCommentText'"/>																																<!-- [\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,11} -->
	<xsl:variable name="MTF_T1AM_AIMPOINT_SUFFIX_TYPE_PATTERN" select="'TlamAimpointSuffixText'"/>	 																																		<!-- [\-\.,\(\)\?A-Z0-9]{3,3} -->
	<xsl:variable name="MTF_TMD_SENSOR_ASSET_TYPE_PATTERN" select="'TmdSensorAssetID'"/>  																																					<!-- [\-;\.,\(\)\?A-Z0-9 ]{1,20} -->
	<xsl:variable name="MTF_TOTAL_TIME_HOURS_TYPE_PATTERN" select="'TotalSearchTime'"/>																																						<!-- [0-9]{1}\.{1}|[0-9]{2}\.{1}|[0-9]{3}\.{1}|[0-9]{4}\.{1}|[0-9]{5}\.{1}|[0-9]{1}\.{2}|[0-9]{2}\.{2}|[0-9]{3}\.{2}|[0-9]{4}\.{2}|[0-9]{5}\.{2} -->
	<xsl:variable name="MTF_TRACK_AMPLIFICATION_TYPE_PATTERN" select="'TrackAmplificationText'"/>																																			<!-- [\-\.,\(\)\?A-Z0-9 ]{2,15} -->
	<xsl:variable name="MTF_TRACK_END_DESIGNATOR_TYPE_PATTERN" select="'TrackEndDesignatorID'"/>																																			<!-- [A-Z]{1,1}|[A-D]{1,1}[A-Z]{1,1} -->
	<xsl:variable name="MTF_TRACK_OFFSET_TYPE_PATTERN" select="'TrackOffsetMeasure'"/>																																						<!-- [\-0-9]{1,7}\.[0-9]{1} -->
	<xsl:variable name="MTF_TRACK_START_DESIGNATOR_TYPE_PATTERN" select="'TrackStartDesignatorID'"/>																																		<!-- [A-Z]|[A-D][A-Z]{1,2} -->
	<xsl:variable name="MTF_TRACK_UNIQUE_IDENTIFIER_TYPE_PATTERN" select="'TrackUniqueID'"/> 																																				<!-- [\-\.,\(\)\?A-Z0-9]{1,18} -->
	<xsl:variable name="MTF_TRADEMARK_TYPE_PATTERN" select="'TrademarkName'"/>																																								<!-- [A-Z0-9 \.,\(\)&amp;\?\-!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,30} -->
	<xsl:variable name="MTF_TRANSMISSION_TYPE_PATTERN" select="'TransmissionText'"/>																																						<!-- [\-\.,\(\)\?A-Z0-9 ]{4,35} -->
	<xsl:variable name="MTF_TRANSPORTATION_CONTROL_NUMBER_TYPE_PATTERN" select="'TransportationControlNumber'"/> 																															<!-- [A-Z0-9]{17,17} -->
	<xsl:variable name="MTF_TROOP_PROGRAM_SEQUENCE_NUMBER_TYPE_PATTERN" select="'TroopProgramSequenceNumber'"/> 																															<!-- [0-9]{5,7} -->
	<xsl:variable name="MTF_TYPE_OF_CODING_TYPE_PATTERN" select="'CodingTypeName'"/>																																						<!-- [\-\.,\(\)\?A-Z0-9 ]{4,14} -->
	<xsl:variable name="MTF_US_ROE_NUMBER_TYPE_PATTERN" select="'USRoeNumber'"/>  																																							<!-- [A-Z ]{3,26} -->
	<xsl:variable name="MTF_UNEXPLODED_ORDNANCE_INFORMATION_TYPE_PATTERN" select="'UnexplodedOrdnanceInformationText'"/> 																													<!-- [A-Z ]{4,10} -->
	<xsl:variable name="MTF_UNEXPLODED_ORDNANCE_WEAPON_IDENTIFICATION_OR_TYPE_TYPE_PATTERN" select="'UnexplodedOrdnanceWeaponIdentificationOrCategoryText'"/> 																				<!-- [A-Z0-9]{2,25} -->
	<xsl:variable name="MTF_UNIT_LINE_NUMBER_TYPE_PATTERN" select="'UnitLineNumber'"/> 																																						<!-- [A-Z0-9]{7,8} -->
	<xsl:variable name="MTF_UNIT_REFERENCE_NUMBER_TYPE_PATTERN" select="'UnitReferenceNumber'"/> 																																			<!-- [0-9]{1,8} -->
	<xsl:variable name="MTF_UPRIGHT_SEQUENCE_TYPE_PATTERN" select="'UprightSequenceCode'"/>																																					<!-- [CFGKM]{1,11} -->
	<xsl:variable name="MTF_VEHICLE_DEPTH_OR_ALTITUDE_TYPE_PATTERN" select="'VehicleDepthOrAltitudeMeasure'"/>																																<!-- ' {1,2}'-->
	<xsl:variable name="MTF_VERSION_OF_MESSAGE_TEXT_FORMAT_TYPE_PATTERN" select="'MessageVersionTextFormat'"/>																																<!-- [A-Z0-9\.]{9,9} -->
	<xsl:variable name="MTF_VISUAL_CHARACTERISTIC_TYPE_PATTERN" select="'VisualCharacteristicText'"/> 																																		<!-- [A-Z]{3,12} -->
	<xsl:variable name="MTF_VOLUME_NUMBER_TYPE_PATTERN" select="'VolumeNumber'"/> 																																							<!-- [\-\.,\(\)\?A-Z]{1,8} -->
	<xsl:variable name="MTF_WATER_DEPTH_TYPE_PATTERN" select="'WaterDepthMeasure'"/> 																																						<!-- [0-9]{3,4}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1} -->
	<xsl:variable name="MTF_WEAPON_SYSTEM_SHORT_NAME_TYPE_PATTERN" select="'WeaponSystemShortName'"/> 																																		<!-- [\-\.,\(\)\?A-Z0-9 ]{3,13} -->
	<xsl:variable name="MTF_WEBSITE_ADDRESS_TYPE_PATTERN" select="'WebsiteAddressText'"/>																																					<!-- [\-A-Za-z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,45} -->
	<xsl:variable name="MTF_WEBSITE_NAME_OR_TITLE_TYPE_PATTERN" select="'WebsiteNameOrTitleText'"/>																																			<!-- [\-A-Za-z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\"';&gt;&lt;~`\|a-z]{1,40} -->
	<xsl:variable name="MTF_WORK_UNIT_CODE_STANDARD_REFERENCE_DESIGNATOR_TYPE_PATTERN" select="'WorkUnitCodeStandardReferenceDesignatorName'"/> 																							<!-- [A-Z0-9]{5,10} -->
	<xsl:variable name="MTF_100K_METER_GRID_NORTH_SOUTH_DESIGNATION_TYPE_PATTERN" select="'TenThousandMeterGridNorthSouthDesignationName'"/>																									<!-- [A-HJ-NP-V]{1,1} -->
																																												 
	
	<!--<xsl:variable name="mtf_fields_xsd" select="document('../Baseline_Schemas/fields.xsd')"/>-->
	<xsl:variable name="mtf_fields_xsd" select="document('FixRegExFieldsWithMissingRangesOut.xml')"/>

	<xsl:variable name="types">
		<TYPES>
			<Regex>
				<xsl:apply-templates select="$mtf_fields_xsd/xsd:schema/xsd:simpleType[xsd:restriction/xsd:pattern]">
					<xsl:sort select="./@value"/>
					<xsl:sort select="./@minInclusive" order="ascending" data-type="number"/>
					<xsl:sort select="./@maxInclusive" order="ascending" data-type="number"/>
					<xsl:sort select="./@name" order="ascending" data-type="text"/>
				</xsl:apply-templates>
			</Regex>
		</TYPES>
	</xsl:variable>
	
	<xsl:template match="/">
		<xsl:result-document href="../RegEx/FindRegExFieldsAndProposeNewNamesOut.xml">
			<xsl:apply-templates select="$types/*" mode="sort">
				<xsl:sort select="@occurrence" order="descending" data-type="number"/>
				<xsl:sort select="./@minInclusive" order="ascending" data-type="number"/>
				<xsl:sort select="./@maxInclusive" order="ascending" data-type="number"/>
				<xsl:sort select="./@name" order="ascending" data-type="text"/>
			</xsl:apply-templates>
		</xsl:result-document>
	</xsl:template>
	
	<xsl:template match="*" mode="sort">
		<xsl:copy>
			<xsl:apply-templates select="@*" mode="sort"/>
			<xsl:apply-templates select="*" mode="sort">
				<xsl:sort select="@occurrence" order="descending" data-type="number"/>
				<xsl:sort select="./@minInclusive" order="ascending" data-type="number"/>
				<xsl:sort select="./@maxInclusive" order="ascending" data-type="number"/>
				<xsl:sort select="./@name" order="ascending" data-type="text"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	
	<xsl:template match="@*" mode="sort">
		<xsl:copy-of select="."/>
	</xsl:template>
	

	<xsl:template match="xsd:schema/xsd:simpleType[xsd:restriction/xsd:pattern]">
		<xsl:variable name="regex">
			<xsl:value-of select="string(xsd:restriction/xsd:pattern/@value)"/>
		</xsl:variable>
		<xsl:variable name="occurrence">
			<xsl:value-of
				select="count(//xsd:schema/xsd:simpleType[xsd:restriction/xsd:pattern/@value=$regex])"
			/>
		</xsl:variable>
		<xsl:if
			test="not(preceding-sibling::xsd:simpleType[xsd:restriction/xsd:pattern/@value=$regex])">
			<xsl:element name="RegexType">
				<xsl:attribute name="regex">
					<xsl:value-of select="$regex"/>
				</xsl:attribute>
				<xsl:attribute name="occurrence">
					<xsl:value-of select="$occurrence"/>
				</xsl:attribute>
				<!--<xsl:apply-templates select="xsd:restriction/xsd:pattern[@value=$regex]"/>-->
				<xsl:apply-templates
					select="//xsd:schema/xsd:simpleType[xsd:restriction/xsd:pattern/@value=$regex]"
					mode="group">
					<xsl:sort select="xsd:restriction/xsd:pattern/@value"/>
				</xsl:apply-templates>
			</xsl:element>
		</xsl:if>
	</xsl:template>
	 
	
	<xsl:template match="xsd:schema/xsd:simpleType[xsd:restriction/xsd:pattern]" mode="group">
		<xsl:variable name="regex">
			<xsl:value-of select="string(xsd:restriction/xsd:pattern/@value)"/>
		</xsl:variable>
		
		<xsl:variable name="outputPattern">
			<xsl:element name="SType">
				<xsl:copy-of select="@name"/>
				<xsl:apply-templates select="xsd:restriction/xsd:pattern[@value=$regex]"/>
				<xsl:attribute name="minInclusive">
					<xsl:copy-of select="descendant::xsd:minInclusive/@value"/>
				</xsl:attribute>
				<xsl:attribute name="maxInclusive">
					<xsl:copy-of select="descendant::xsd:maxInclusive/@value"/>
				</xsl:attribute>
				<xsl:attribute name="minLength">
					<xsl:copy-of select="descendant::xsd:minLength/@value"/>
				</xsl:attribute>
				<xsl:attribute name="maxLength">
					<xsl:copy-of select="descendant::xsd:maxLength/@value"/>
				</xsl:attribute>
				<xsl:attribute name="length">
					<xsl:copy-of select="descendant::xsd:length/@value"/>
				</xsl:attribute>
			</xsl:element>
		</xsl:variable>
		
		<xsl:element name="SType">
			<xsl:copy-of select="$outputPattern/SType/@name"/>
			
			<xsl:copy-of select="$outputPattern/xsd:restriction/xsd:pattern/@value"/>
			
			<xsl:if test="not(exists($outputPattern/SType/@ProposedTypeName))">
				<xsl:copy-of select="cust:addSimpleTypeName($outputPattern/SType/@name)"/>
			</xsl:if>
			
			<xsl:if test="exists($outputPattern/SType/@ProposedTypeName)">
				<xsl:copy-of select="$outputPattern/SType/@ProposedTypeName"/>
			</xsl:if>
			
			<xsl:if test="exists($outputPattern/SType/@ProposedExtensionType)">
				<xsl:copy-of select="$outputPattern/SType/@ProposedExtensionType"/>
			</xsl:if>
			
			<!--<xsl:if test="exists($outputPattern/SType/@ProposedRegExPattern)">
				<xsl:copy-of select="$outputPattern/SType/@ProposedRegExPattern"/>
			</xsl:if>
			<xsl:copy-of select="$outputPattern/SType/@minInclusive"/>
			<xsl:copy-of select="$outputPattern/SType/@maxInclusive"/>
			<xsl:copy-of select="$outputPattern/SType/@minLength"/>
			<xsl:copy-of select="$outputPattern/SType/@maxLength"/>
			<xsl:copy-of select="$outputPattern/SType/@length"/>-->
		</xsl:element>
	</xsl:template>
	
	<xsl:template match="xsd:pattern">
		<xsl:attribute name="regex">
			<xsl:value-of select="@value"/>
		</xsl:attribute>
	</xsl:template>
	
	<xsl:template match="xsd:length">
		<xsl:attribute name="length">
			<xsl:value-of select="@value"/>
		</xsl:attribute>
	</xsl:template>
	
	<xsl:template match="xsd:minLength">
		<xsl:attribute name="minlength">
			<xsl:value-of select="@value"/>
		</xsl:attribute>
	</xsl:template>
	
	<xsl:template match="xsd:maxLength">
		<xsl:attribute name="maxLength">
			<xsl:value-of select="@value"/>
		</xsl:attribute>
	</xsl:template>
	
	<xsl:template match="xsd:minInclusive">
		<xsl:attribute name="minInclusive">
			<xsl:value-of select="@value"/>
		</xsl:attribute>
	</xsl:template>
	
	<xsl:template match="xsd:maxInclusive">
		<xsl:attribute name="maxInclusive">
			<xsl:value-of select="@value"/>
		</xsl:attribute>
	</xsl:template>
	
	<!-- Proposed RegEx Names -->
	<xsl:template match="xsd:pattern[@value='[0-9]{1,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AccuracyOfReportedTargetLocationInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACCURACY_OF_REPORTED_TARGET_LOCATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AcousticTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACOUSTIC_TRACK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ActiveGuardReservePersonnelAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACTIVE_GUARD_RESERVE_PERSONNEL_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AllocatedMajorEquipmentCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALLOCATED_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AngleEitherSideOfAxisType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANGLE_EITHER_SIDE_OF_AXIS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ApproachSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_APPROACH_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AuthorizedMajorEquipmentCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHORIZED_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AverageAmbientNoiseLevelInDecibelsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVERAGE_AMBIENT_NOISE_LEVEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DECIBEL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AverageHandlingTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVERAGE_HANDLING_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BasicHelicopterVehicleAmmunitionLoadType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BASIC_HELICOPTER_VEHICLE_AMMUNITION_LOAD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BridgeMilitaryLoadClassificationInTonsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BRIDGE_MILITARY_LOAD_CLASSIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BurnBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BURN_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BurnBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BURN_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BurnPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BURN_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CloseTetheredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CLOSE_TETHERED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CohortE4sCountedAsE5sType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COHORT_E4S_COUNTED_AS_E5S_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ColdMissileInventoryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COLD_MISSILE_INVENTORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CombatEffectivenessType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMBAT_EFFECTIVENESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ConventionalOperationallyReadyMajorEquipmentCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONVENTIONAL_OPERATIONAL_READY_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ConventionalReadyPrimaryDutyCrewsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONVENTIONAL_READY_PRIMARY_DUTY_CREWS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ConvoyGroupTimeIntervalMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONVOY_GROUP_TIME_INTERVAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ConvoyPassTimeMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONVOY_PASS_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ConvoySerialTimeIntervalMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONVOY_SERIAL_TIME_INTERVAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfAircraftAllottedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_AIRCRAFT_ALLOTTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfAircraftType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_AIRCRAFT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfAssets1To999Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_ASSESTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfCrewsAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_CREWS_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfCrewsAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_CREWS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfEquipmentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_EQUIPMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfNonreportableLineItemsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_NONREPORTABLE_LINE_ITEMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfPersonnelByStatusType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_PERSONNEL_BY_STATUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfVehiclesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_VEHICLES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CrystalCountdownType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CRYSTAL_COUNTDOWN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CurrentUnitStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CURRENT_UNIT_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CycleRateType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CYCLE_RATE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DaysOfClassViiiSuppliesOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAYS_OF_CLASS_VIII_SUPPLIES_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DaysOfCombatSupportType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAYS_OF_COMBAT_SUPPORT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DaysOfSupplyOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAYS_OF_SUPPLY_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DaysOfSupplyOnHandDirectSupportType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAYS_OF_SUPPLY_ON_HAND_DIRECT_SUPPORT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DaysOfSupplyOnHandGeneralSupportType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAYS_OF_SUPPLY_ON_HAND_GENERAL_SUPPORT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DaysOfSupplyOrDaysOfSustainabilityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAYS_OF_SUPPLY_OR_DAYS_OF_SUSTAINABILITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DefendedAssetPriorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DEFENDED_ASSET_PRIORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DistanceBetweenConvoyVehiclesInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_BETWEEN_CONVOY_VEHICLES,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DistanceInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_TYPE,concat($MTF_ONE,concat('To',concat($max,concat($MTF_DIGIT,concat('Measure',$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DiverMeasuredPercentOfBurialType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIVER_MEASURED_PERCENT_OF_BURIAL_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DistanceInYardsFromReferenceTrackType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_FROM_REFERENCE_TRACK_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DistanceToTargetInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_TO_TARGET_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat($MTF_DIGIT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DualOperationallyReadyMajorEquipmentCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DUAL_OPERATIONALLY_READY_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DualReadyPrimaryDutyCrewsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DUAL_READY_PRIMARY_DUTY_CREWS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DwellTimeInMillisecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DWELL_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MILLISECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EmergencyStoresEnduranceInDaysType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMERGENCY_STORE_ENDURANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EmitterTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMITTER_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EobTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EOB_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentItemCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_ITEM_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentOnHandReserveStocksAboveToeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_ON_HAND_RESERVE_STOCKS_ABOVE_TOE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'EquipmentTearDownTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_TEAR_DOWN_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EstimatedStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ESTIMATED_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FacilityTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FACILITY_TRACK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FcsTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FCS_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FireSupportUnitNuclearResponseTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FIRE_SUPPORT_UNIT_NUCLEAR_RESPONSE_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FlashToBangTimeInSecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FLASH_TO_BANG_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GeneralSurgeryBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GENERAL_SURGERY_BEDS_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GeneralSurgeryBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GENERAL_SURGERY_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GeneralSurgeryPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GENERAL_SURGERY_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GeneralTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GENERAL_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GradingOfMessageReportType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GRADING_OF_MESSAGE_REPORT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HotMissileInventoryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOT_MISSILE_INVENTORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HoursInReportingPeriodType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOURS_IN_REPORTING_PERIOD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HoursScheduledOffTaskType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOURS_SCHEDULED_OFF_TASK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'IdentificationSafetyRangeInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IDENTIFICATION_SAFETY_RANGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InternetProtocolAddressOctetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTERNET_PROTOCOL_ADDRESS_OCTET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LateralDisplacementFromAQRouteTrackInTensOfYardsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LATERAL_DISPLACEMENT_FROM_AQ_ROUTE_TRACK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Link22TransmissionSlotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_22_TRANSMISSION_SLOTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LinkTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaintenanceDownTimeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAINTENANCE_DOWNTIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MajorEquipmentActualCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAJOR_EQUIPMENT_ACTUAL_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MajorEquipmentRequiredCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAJOR_EQUIPMENT_REQUIRED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumAmbientNoiseLevelInDecibelsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_AMBIENT_NOISE_LEVEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DECIBEL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MediumFieldOfViewInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEDIUM_FIELD_OF_VIEW_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat($MTF_DIGIT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinefieldLifeInDaysType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINEFIELD_LIFE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumAcceptablePercentageOfRemainingFuelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_ACCEPTABLE_PERCENTAGE_OF_REMAINING_FUEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumAmbientNoiseLevelInDecibelsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_AMBIENT_NOISE_LEVEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DECIBEL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissileTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSILE_TRACK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NarrowFieldOfViewInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NARROW_FIELD_OF_VIEW_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat($MTF_DIGIT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NeurosurgeryBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NEUROSURGERY_BED_COUNT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat($MTF_DIGIT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NeurosurgeryBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NEUROSURGERY_BEDS_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NeurosurgeryPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NEUROSURGERY_PATIENT_REQUIRED_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NuclearMissionReadyPrimaryDutyCrewsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUCLEAR_MISSION_READY_PRIMARY_DUTY_CREWS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NuclearOperationallyReadyMajorEquipmentCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUCLEAR_OPERATIONALLY_READY_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NuclearWeaponsQuantityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUCLEAR_WEAPONS_QUANTITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberExpendedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_EXPENDED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberNeededToRaiseToC3Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_NEEDED_TO_RAISE_C3_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAdditionalVesselsInAreaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ADDITIONAL_VESSELS_IN_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAgentContainersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AGENT_CONTAINERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAirForcePatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIR_FORCE_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftOrMissilesAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_OR_MISSILES_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftOrMissilesAuthorizedOrRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_OR_MISSILES_AUTHORIZED_OR_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftOrMissilesMissionReadyAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_OR_MISSILES_READY_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftOrMissilesPossessedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_OR_MISSILES_POSSESSED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAmbulatoryPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AMBULATORY_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfArmyPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ARMY_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAttendantsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ATTENDANTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfBattlefieldAirInterdictionSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_BATTLEFIELD_AIR_INTERDICTION_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfBedsOccupiedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_BEDS_OCCUPIED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfBedsOperatingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_BEDS_OPERATING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfBurstsInAMultipleStrikeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_BURSTS_IN_A_MULTIPLE_STRIKE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCiviliansAboardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CIVILIANS_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCiviliansOffNextStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CIVILIANS_OFF_NEXT_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCloseAirSupportSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CLOSE_AIR_SUPPORT_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCodeAItemsAuthorizedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CODE_A_ITEMS_AUTHORIZED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCodeAItemsOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CODE_A_ITEMS_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCodeAItemsRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CODE_A_ITEMS_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCrewsAuthorizedOrRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CREWS_AUTHROZIED_OR_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDefensiveCounterairSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DEFENSIVE_COUNTERAIR_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDeliverySystemsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DELIVERY_SYSTEMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDistinguishedVisitorsAboardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DISTINGUISHED_VISITORS_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDistinguishedVisitorsOffNextStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DISTINGUISHED_VISITORS_OFF_NEXT_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDmpisPassedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DMPIS_PASSED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfElectronicWarfareSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ELECTRONIC_WARFARE_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfEnemyPrisonerOfWarPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ENEMY_PRISONER_OF_WAR_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfEnemyWeaponSystemsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ENEMY_WEAPON_SYSTEMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfExcessSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_EXCESS_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'NumberOfFireControlUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_FIRE_CONTROL_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfForeignNationalsAboardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_FOREIGN_NATIONALS_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfForeignNationalsOffNextStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_FOREIGN_NATIONALS_OFF_NEXT_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfInterdictionSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_INTERDICTION_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfLinesAtLevel1Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_LINES_AT_LEVEL_ONE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfLinesAtLevel2Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_LINES_AT_LEVEL_TWO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfLinesAtLevel3Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_LINES_AT_LEVEL_THREE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfLinesAtLevel4Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_LINES_AT_LEVEL_FOUR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfLitterPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_LITTER_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMailUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MAIL_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMarineCorpsPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MARINE_CORPS_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMinesByTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MINES_BY_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMinesDetectedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MINES_DETECTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMinesLaidType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MINES_LAID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMinesToBeLaidType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MINES_TO_BE_LAID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMissilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MISSILES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMissingMissionsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MISSING_MISSIONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMunitionsOrAircraftType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MUNITIONS_OR_AIRCRAFT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfNavyPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_NAVY_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfNetworkEnabledWeaponsAboardPlatformType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_NETWORK_ENABLED_WEAPONS_ABOARD_PLATFORM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfOffensiveCounterairSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_OFFENSIVE_COUNTERAIR_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfOtherCivilianPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_OTHER_CIVILIAN_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfOtherPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_OTHER_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfOtherSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_OTHER_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPassengersOffNextStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PASSENGERS_OFF_NEXT_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPassengersOnThisStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PASSENGERS_ON_THIS_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfProfessionalFillersAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PROFESSIONAL_FILLERS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfProfessionalFillersRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PROFESSIONAL_FILLERS_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfReceivingAircraftType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_RECEIVING_AIRCRAFT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfReceivingChannelsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_RECEIVING_CHANNELS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfReconnaissanceSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_RECONNAISSANCE_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSearchAndRescueSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SEARCH_AND_RESCUE_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSeatsAvailableThisStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SEATS_AVAILABLE_THIS_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSortiesAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SORTIES_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSortiesFlownType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SORTIES_FLOWN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSortiesScheduledType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SORTIES_SCHEDULED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSortiesSuccessfulType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SORTIES_SUCCESSFUL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpaceAvailablePassengersAboardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPACE_AVAILABLE_PASSENGERS_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpaceAvailablePassengersOffNextStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPACE_AVAILABLE_PASSENGERS_OFF_NEXT_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpaceRequiredPassengersOffNextStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPACE_REQUIRED_PASSENGERS_OFF_NEXT_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpaceRequiredPassengersThisStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPACE_REQUIRED_PASSENGERS_THIS_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTargetsDescribedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TARGETS_DESCRIBED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTransmittingChannelsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TRANSMITTING_CHANNELS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfUSCivilianPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_US_CIVILIAN_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfVehiclesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_VEHICLES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfWeaponsRoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_WEAPON_ROUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOrderedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ORDERED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberRemainingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_REMAINING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberTlamRemainingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_TLAM_REMAINING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObGynBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBGYN_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObGynBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBGYN_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObGynPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBGYN_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OperatingFrequencyMeasuredInHertzType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATING_FREQUENCY_MEASURED_IN_HERTZ_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HERTZ_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OphthalmologyBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPTHALMOLOGY_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OphthalmologyBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPTHALMOLOGY_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OphthalmologyPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPTHALMOLOGY_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OralMaxillofacialBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORAL_MAXILLOFACIAL_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OralMaxillofacialBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORAL_MAXILLOFACIAL_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OralMaxillofacialPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORAL_MAXILLOFACIAL_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrderOfEventsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORDER_OF_EVENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrthopedicBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORTHOPEDIC_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrthopedicBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORTHOPEDIC_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrthopedicPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORTHOPEDIC_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OtherOperationallyReadyMajorEquipmentCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_OPERATIONALLY_READY_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OtherReadyPrimaryDutyCrewsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_READY_PRIMARY_DUTY_CREWS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OverrunWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OVERRUN_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PassengerCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PASSENGER_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PeakGustsInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PEAK_GUSTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PediatricBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PEDIATRIC_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PediatricBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PEDIATRIC_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PediatricPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PEDIATRIC_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentDamagedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_DAMAGED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentDestroyedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_DESTROYED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentIlluminationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_ILLUMINATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentInRepairPowerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_IN_REPAIR_POWER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentNonoperationalPowerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_NONOPERATIONAL_POWER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfCoverageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_COVERAGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfMineBuriedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_MINE_BURIED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfRequiredBaseWingWrmFuelOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_REQUIRED_BASE_WING_WRM_FUEL_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfRequiredChaffAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_REQUIRED_CHAFF_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfRequiredFlaresAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_REQUIRED_FLARES_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfRequiredLantirnNavPodsAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_REQUIRED_LANTIRN_NAV_PODS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfRequiredLantirnTargetPodsAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_REQUIRED_LANTIRN_TARGET_PODS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfRequiredLaserPodsAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_REQUIRED_LASER_PODS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfRequiredMissilesAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_REQUIRED_MISSLES_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOperationalPowerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OPERATIONAL_POWER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentRepairablePowerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_REPAIRABLE_POWER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentRequiredTanksRacksAdaptersPylonsAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_REQUIRED_TANK_RACKS_ADAPTERS_PYLONS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfAreaSearchedCoveredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AREA_SEARCHED_COVERED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfAuthorizedNbcEquipmentOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_AUTHORIZED_NBC_EQUIPMENT_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfBreakersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_BREAKERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfDataType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_DATA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfJammingEffectivenessType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_JAMMING_EFFECTIVENESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfMinefieldCompletedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_MINE_FIELD_COMPLETED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfOnHandEquipmentMissionCapableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_ON_HAND_EQUIPMENT_MISSION_CAPABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfOnHandPacingItemsMissionCapableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_ON_HAND_PACING_ITEMS_MISSION_CAPABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfOperationalBedsDeployableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_OPERATIONAL_BEDS_DEPLOYED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfRequiredPacingItemsMissionCapableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_REQUIRED_PACING_ITEMS_MISSION_CAPABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfRequiredEquipmentMissionCapableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_REQUIRED_EQUIPMENT_MISSION_CAPABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfTotalCapacityHeldType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_TOTAL_CAPACITY_HELD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfWeaponsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_WEAPONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PersonnelOnBoardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONNEL_ONBOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PersonnelRecoveredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONNEL_RECOVERED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PersonnelTurnoverPercentageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONNEL_TURNOVER_PERCENTAGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PlanNavigationErrorInYardsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLAN_NAVIGATION_ERROR_IN_YARDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PlannedSustainedThreatOfMinefieldInDaysType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLANNED_SUSTAINED_THREAT_OF_MINE_FIELD_IN_DAYS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PossessedMajorEquipmentCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POSSESSED_MAJOR_EQUIPMENT_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PrimaryDutyCrewsAllocatedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_DUTY_CREWS_ALLOCATED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PrimaryDutyCrewsAuthorizedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_DUTY_CREWS_AUTHORIZED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PrimaryDutyCrewsFormedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_DUTY_CREWS_FORMED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ProbabilityOfDetectionInPercentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROBABILITY_OF_DETECTION_IN_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PsychiatricBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PSYCHIATRIC_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PsychiatricBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PSYCHIATRIC_BED_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PsychiatricPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PSYCHIATRIC_PATIENTS_REQUIRING_BED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfItemsAuthorizedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_ITEMS_AUTHORIZED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfItemsOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_ITEMS_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfItemsRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_ITEMS_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfNbcShortfallEquipmentAuthorizedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_NBC_SHORTFALL_EQUIPMENT_AUTHORIZED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfNbcShortfallEquipmentItemsOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_NBC_SHORTFALL_EQUIPMENT_ITEMS_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfNbcShortfallEquipmentRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_NBC_SHORTFALL_EQUIPMENT_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfOrdnanceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_ORDNANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfPacingItemAuthorizedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_PACING_ITEM_AUTHORIZED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfPacingItemOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_PACING_ITEM_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfPacingItemRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_PACING_ITEM_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityReportedUtilizedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_REPORTED_UTILIZED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RangeFromNavaidInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RANGE_FROM_NAVID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RangeProbableErrorInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RANGE_PROBABLE_ERROR_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RaycasVTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RAY_CAS_VTRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainingNumberOfMineDisposalWeaponsChargesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_DISPOSAL_WEAPONS_CHARGES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RepetitionNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPETITION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RunwayLengthInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RUNWAY_LENGTH_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RunwayWeightBearingCapacityInThousandsOfPoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RUNWAY_WEIGHT_BEARING_CAPACITY_IN_THOUANDS_OF_POUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RunwayWidthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RUNWAY_WIDTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SerialNumberOfQualifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SERIAL_NUMBER_OF_QUALIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SerialNumberOfRequestType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SERIAL_NUMBER_OF_REQUEST_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SiTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SI_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SonarDepthOrAltitudeFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SONAR_DEPTH_OR_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SortieGenerationCapabilityPercentageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SORTIE_GENERATION_CAPABILITY_PERCENTAGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SortieIdentificationNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SORTIE_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Spa25TracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPA_TWENTY_FIVE_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpaceTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPACE_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpeedOfWindInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIND_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpinalCordInjuryBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPINAL_CORD_INJURY_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpinalCordInjuryBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPINAL_CORD_INJURY_BED_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpinalCordInjuryPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPINAL_CORD_INJURY_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StationNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SterilizationTimeInDaysType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STERILIZATION_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SurfZoneWidthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURF_ZONE_WIDTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TablePositionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TABLE_POSITION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ThoracicSurgeryBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THORACIC_SURGERY_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ThoracicSurgeryBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THORACIC_SURGERY_BED_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ThoracicSurgeryPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THORACIC_SURGERY_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ThreatAngleType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THREAT_ANGLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ThreatInPercentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THREAT_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ThreatMunitionsPercentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THREAT_MUNITIONS_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TimeLateMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_LATE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalNumberOfPassengersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PASSENGER_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalNumberOfSerialsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_NUMBER_OF_SERIALS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalNumberOfSlotBuoysCarriedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_NUMBER_OF_SLOTS_BOUYS_CARRIED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalNumberOfTurnsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_NUMBER_OF_TURNS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalPassengersAboardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_PASSENGERS_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalPersonnelPercentageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_PERSONNEL_PERCENTAGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalReportableEquipmentLineItemsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_REPORTABLE_EQUIPMENT_LINE_ITEMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalSeatsAboardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_SEATS_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalSpaceRequiredPassengersAboardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_SPACE_REQUIRED_PASSENGERS_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalTimeToRecoverGearInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_TIME_TO_RECOVER_GEAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalTimeToStreamGearInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_TIME_TO_STREAM_GEAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalTransitTimeToAndFromOpareaInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_TRANSIT_TIME_TO_AND_FROM_OPAREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalTurnTime1To999MinType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_TURN_TIME_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UniqueCommunicationsChannelNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIQUE_COMMUNICATIONS_CHANNEL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'VictuallingStoresEnduranceInDaysType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VICTUALLING_STORES_ENDURANCE_IN_DAYS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WaterDepthMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WATER_DEPTH_METERS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WaypointTimeOnStationInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WAYPOINT_TIME_ON_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WeatherDownTimeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEATHER_DOWN_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WrskBlssFillPercentageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WRSK_BLSS_FILL_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WideFieldOfViewInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIDE_FIELD_OF_VIEW_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat($MTF_DIGIT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="((contains(string($fieldName),'Percent')) and compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProprosedRegEx"><xsl:value-of select="$MTF_PROPOSED_REG_EX_PATTERN"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="((contains(string($fieldName),'Percent')) and compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ONE,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AbsoluteHumidityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ABSOLUTE_HUMIDITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CUBIC_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AewBarrierDesignator0To99Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AEW_BARRIER_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AircraftAllocatedToAMissionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_ALLOCATED_TO_A_MISSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AverageNumberOfWordsPerMessageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVERAGE_NUMBER_OF_WORDS_PER_MESSAGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfDetectingSensorsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_DETECTING_SENSORS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfMajorEquipmentAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_MAJOR_EQUIPMENT_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfMajorEquipmentDeployableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_MAJOR_EQUIPMENT_DEPLOYABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfMajorEquipmentDeployedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_MAJOR_EQUIPMENT_DEPLOYED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfMajorEquipmentOperationalReadyAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_MAJOR_EQUIPMENT_OPERATIONAL_READY_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfMarchGroupsInAConvoyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_MAJOR_MARCH_GROUPS_IN_A_CONVOY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfSerialsInAConvoyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_SERIALS_IN_A_CONVOY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>	
				<xsl:when test="(contains(string($fieldName),'CountOfShipsPassedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_SHIPS_PASSED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfSonobuoyRowsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_SONOBOUY_ROWS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>	
				<xsl:when test="(contains(string($fieldName),'CountOfSonobuoysPerRowType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_SONOBOUYS_PER_ROW_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfUnexplodedOrdnanceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_UNEXPLODED_ORDNANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CrossoverZoneWidthInNmType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CROSSOVER_ZONE_WIDTH_IN_NM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DaysRequiredToCompleteTrainingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAYS_REQUIRED_TO_COMPLETE_TRAINING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DaysSupportableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAYS_SUPPORTABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DieselSubmarineSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIESEL_SUBMARINE_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DiveAngleOfAttackType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIVE_ANGLE_OF_ATTACK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DurationOfFireType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DURATION_OF_FIRE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EffectsPercentDamageRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EFFECTS_PERCENT_DAMAGE_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ElintNotationConfidencePrimaryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELINT_NOTATION_CONFIDENCE_PRIMARY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentOperationPlansCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_OPERATION_PLANS_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EstimatedCountOfShipsFromType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ESTIMATED_COUNT_OF_SHIP_FROM_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EstimatedCountOfShipsToType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ESTIMATED_COUNT_OF_SHIP_TO_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EstimatedNumberNonMineMineLikeObjectsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ESTIMATED_NUMBER_NON_MINE_MINE_LIKE_OBJECTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_SQUARE_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FirePlanPhaseLengthInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FIRE_PLAN_PHASE_LENGTH_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FrequencySeparationInPercentageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREQUENCY_SEPARATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FurthestOnCircleSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FURTHEST_ON_CIRCLE_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GmfSatelliteAntennaSizeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GMF_SATELLITE_ANTENNA_SIZE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'HelicopterLandingAreaSlopeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HELICOPTER_LANDING_AREA_SLOPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LanguageIndicatorCodeAssignedStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANGUAGE_INDICATOR_CODE_ASSIGNED_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LanguageIndicatorCodeQualifiedStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANGUAGE_INDICATOR_CODE_QUALIFIED_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LanguageIndicatorCodeRequiredStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANGUAGE_INDICATOR_CODE_REQUIRED_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Link22MiniSlotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_22_MINI_SLOT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LowRateMultiplexerRateInKilobitsPerSecondType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOW_RATE_MULTIPLEXER_RATE_IN_KILOBITS_PER_SECOND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOBITS_PER_SECOND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MadSenseSettingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAD_SENSE_SETTING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MasnIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MASN_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaritimeWeaponsTypeSerialNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MARITIME_WEAPON_TYPE_SERIAL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumAllowableChemicalEffectsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_ALLOWABLE_CHEMICAL_EFFECT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumGeodeticPositionQualityQpgType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_GEODETIC_POSITION_QUALITY_QPG_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumNumberOfDataLinkTrackBlocksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_NUMBER_OF_DATA_LINK_TRACK_BLOCKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumOperationalMissilesAvailableThisSalvoType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_OPERATIONAL_MISSILES_AVAILABLE_THIS_SALVO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumOperationalMissilesByTypeThisSalvoType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_OPERATIONAL_MISSILES_BY_TYPE_THIS_SALVO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumTrackQualityTqType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_TRACK_QUALITY_TQ_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MeasuredSignalStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEASURED_SIGNAL_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DECIBEL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'MinimumAllowableChemicalEffectsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_ALLOWABLE_CHECMICAL_EFFECTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NearSurfaceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NEAR_SURFACE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NuclearSubmarineSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUCLEAR_SUBMARINE_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftAvailableForSpecialMissionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_AVAILABLE_FOR_SPECIAL_MISSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftEmbarkedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_EMBARKED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftInCellType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_IN_CELL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftReportedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_REPORTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftRequiredForSpecialMissionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_REQUIRED_FOR_SPECIAL_MISSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfBreakersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_BREAKERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfBridgesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_BRIDGES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfContactsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CONTACTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCooperatingForcesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_COOPERATING_FORCES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCrewsDeployedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CREWS_DEPLOYED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCryptographicEquipmentItemsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CRYPTOGRAPHIC_EQUIPMENT_ITEMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCulvertsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CULVERTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfCylindersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_CYLINDERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDanbuoysType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DANBUOYS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDevicesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DEVICES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDualPurposeIcmWarheadsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DUAL_PURPOSE_ICM_WARHEADS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfEwoWsosAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_EWO_WSOS_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfFailuresType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_FAILURES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfFerriesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_FERRIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfFireUnitsInEffectType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_FIRE_UNITS_IN_EFFECT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfGraduatedCombatCapabilityLevelACrewsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_GRADUATED_COMBAT_CAPABILITY_LEVEL_A_CREWS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfGraduatedCombatCapabilityLevelBCrewsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_GRADUATED_COMBAT_CAPABILITY_LEVEL_B_CREWS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfGraduatedCombatCapabilityLevelCCrewsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_GRADUATED_COMBAT_CAPABILITY_LEVEL_C_CREWS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfHelosInOperationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_HELOS_IN_OPERATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfHighExplosiveWarheadsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_HIGH_EXPLOSIVE_WARHEADS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfHighInterestContactsDetectedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_HIGH_INTEREST_CONTACTS_DETECTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfInitialSalvosVolleysType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_INITIAL_SALVOS_VOLLEYS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMainMissileAssembliesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MAIN_MISSILE_ASSEMBLIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMessagesReceivedByGroundStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MESSAGES_RECEIVED_BY_GROUND_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMessagesReceivedByUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MESSAGES_RECEIVED_BY_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMessagesSentToGroundStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MESSAGES_SENT_TO_GROUND_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMessagesSentToUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MESSAGES_SENT_TO_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMinelayingUnitsAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MINE_LAYING_UNITS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMissingUpdateSequenceNumbersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MISSING_UPDATE_SEQUENCE_NUMBERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMissionReadyCrewsAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MISSION_READY_CREWS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfNuclearWarheadsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_NUCLEAR_WARHEADS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfNonAircraftWeaponLaunchPlatformsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_NONAIRCRAFT_WEAPON_LAUNCH_PLATFORMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfOrbitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ORBITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfOverheadMissionCrewsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_OVERHEAD_MISSION_CREWS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPalletPositionsAvailableNextStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PALLET_POSITIONS_AVAILABLE_NEXT_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPalletPositionsUsedThisStationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PALLET_POSITIONS_USED_THIS_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPiecesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PIECES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPilotsAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PILOTS_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfProductsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PRODUCTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfRadioEquipmentItemsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_RADIO_EQUIPMENT_ITEMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfRetaskedInFlightTargetsImagedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_RETASKED_INFLIGHT_TARGETS_IMAGED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfRunsAlongTrackType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_RUNS_ALONG_TRACK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSatelliteEquipmentItemsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SATELLITE_EQUIPMENT_ITEMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSecureVoiceEquipmentItemsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SECURE_VOICE_EQUIPMENT_ITEMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfShipTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SHIP_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfShipsInGroupType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SHIPS_IN_GROUP_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfShipsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SHIPS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpareEnginesAuthorizedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPARE_ENGINES_AUTHORIZED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpareEnginesOnHandToTheUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPARE_ENGINES_ON_HAND_TO_THE_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpareEnginesRequiredByUtcType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPARE_ENGINES_REQUIRED_BY_UTC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpareEnginesServiceableToTheUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPARE_ENGINES_SERVICEABLE_TO_THE_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpecialAircraftFlightCrewsAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPECIAL_AIRCRAFT_FLIGHT_CREWS_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpecialAircraftMissionCrewsAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPECIAL_AIRCRAFT_MISSION_CREWS_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpecialMissionCrewsAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPECIAL_MISSION_CREWS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSpecialMissionCrewsRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SPECIAL_MISSION_CREWS_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSubordinateUnitsAtC5Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SUBORDINATE_UNITS_ATC5_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSubsequentSalvosVolleysType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SUBSEQUENT_SALVOS_VOLLEYS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTankersRequestedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TANKERS_REQUESTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTargetsImagedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TARGETS_IMAGED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTargetsOfOpportunityImagedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TARGETS_OF_OPPORTUNITY_IMAGED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTargetsOfOpportunityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TARGETS_OF_OPPORTUNITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTargetsRetaskedInFlightType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TARGETS_RETASKED_IN_FLIGHT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTargetsTaskedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TARGETS_TASKED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTunnelsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TUNNELS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfVulnerablePointsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_VULNERABLE_POINTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfWeaponsPerWeaponSystemOrPlatformType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_WEAPONS_PER_WEAPONS_YSTEM_OR_PLATFORM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfWeaponsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_WEAPONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OperatingSuitesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATING_SUITES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentEffectiveType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_EFFECTIVE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>	
				<xsl:when test="(contains(string($fieldName),'PercentageConsumedDailyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_CONSUMED_DAILY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PlatformTurnTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLATFORM_TURN_TIME_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RecceDaysPriorOkType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECCE_DAYS_PRIOR_OK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RequestNumberTargetCriteriaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUEST_NUMBER_TARGET_CRITERIA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RequisitionPriorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUISITION_PRIORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SadlAirKey0To89Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SADLAIRKEYZEROTOEIGHTYNINE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SalvoIntervalInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SALVO_INTERVAL_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ShipCountOfMineType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_COUNT_OF_MINE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SquareSegmentSizeInNmType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SQUARE_SEGMENT_SIZE_IN_NM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SubareaNumericalIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBAREA_NUMERICAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SurgicalBacklogType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURGICAL_BACKLOG_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetBdarepCounterType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_BDAREP_COUNTER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TaskHoursLostDuringSortieType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TASK_HOURS_LOST_DURING_SORTIE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ToneKeyIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TONE_KEY_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalNumberOfContactsDetectedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_NUMBER_OF_CONTACTS_DETECTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalNumberOfSortiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_NUMBER_OF_SORTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalPalletPositionsAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_PALLET_POSITIONS_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalPalletsAboardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_PALLETS_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalSonobuoysInPatternType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_SONOBUOYS_IN_PATTERN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalTurnTime1To30MinType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_TURN_TIME_ONE_TO_THIRTY_MIN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TorpedoSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TORPEDO_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrackQualityDeltaTimeInSecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_QUALITY_DELTA_TIME_IN_SECONDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TransitDistanceInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRANSIT_DISTANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WavePeriodInSecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WAVE_PERIOD_IN_SECONDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat($MTF_QUANTITY_TYPE,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AbsentWithoutLeaveType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ABSENT_WITHOUT_LEAVE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ActualKiaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACTUAL_KIA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ActualMiaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACTUAL_MIA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ActualWiaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACTUAL_WIA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AmmunitionExpendedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AMMUNITION_EXPENDED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ArmingDelayInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ARMING_DELAY_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ArrestingGearPositionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ARRESTING_GEAR_POSITION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AssignedNumberOfPersonnelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ASSIGNED_NUMBER_OF_PERSONNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AssignedStrengthAdditionalSkillIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ASSIGNED_STRENGTH_ADDITIONAL_SKILL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AuthorizedNumberOfPersonnelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHORIZED_PERSONNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AuthorizedStrengthAdditionalSkillIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHORIZED_STRENGTH_ADDITIONAL_SKILL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AuthorizedTableOfEquipmentAUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHORIZED_TABLE_OF_EQUIPMENT_A_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AuthorizedTableOfEquipmentBUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHORIZED_TABLE_OF_EQUIPMENT_B_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AuthorizedTableOfEquipmentCUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHORIZED_TABLE_OF_EQUIPMENT_C_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AvailableNumberOfPersonnelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVAILABLE_NUMBER_OF_PERSONNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AvailableNumberOfPersonnelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVAILABLE_NUMBER_OF_PERSONNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CapturedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CAPTURED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CaseDepthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CASE_DEPTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ColumnLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COLUMN_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CombatAirPatrolCapStationLengthInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMBAT_AIR_PATROL_CAPS_STATION_LENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfCargoItemsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_CARGO_ITEMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfCommunicationsElectronicsEquipmentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_COMMUNICATIONS_ELECTRONICS_EQUIPMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfEnemyAircraftType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_ENEMY_AIRCRAFT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfEnemyEquipmentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_ENEMY_EQUIPMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfEnemyTargetsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_ENEMY_TARGETS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfEquipmentReportedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_EQUIPMENT_REPORTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfEquipmentRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_EQUIPMENT_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfItemsInADesignatedStatusType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_ITEMS_IN_A_DESIGNATED_STATUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfNoncombatantEpwDetainedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_NONCOMBATANT_EPW_DETAINED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfPersonnelInAShipSCompanyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_PERSONNEL_IN_A_SHIP_S_COMPANY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfPersonnelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_PERSONNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfShipsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_SHIPS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfSortiesFlownType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_SORTIES_FLOWN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfTargetsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_TARGETS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfUnitsOrFacilitiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_UNITS_OR_FACILITIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CubicFeetOfMailAndOrCargoAboardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CUBIC_FEET_OF_MAIL_AND_OR_CARGO_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CUBIC_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DesertersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESERTERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DiseaseNonbattleInjuryLossType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISEASE_NONBATTLE_INJURY_LOSS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DistanceBetweenReferenceMarksInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_BETWEEN_REFERENCE_MARKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DropZoneLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DROP_ZONE_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DropZoneWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DROP_ZONE_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EpwGainsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EPW_GAINS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EpwLossesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EPW_LOSSES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EpwPreviouslyOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EPW_PREVIOUSLY_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentOnHandAUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_ON_HAND_A_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentOnHandBUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_ON_HAND_B_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentOnHandCUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_ON_HAND_C_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EscapeBuoyDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ESCAPE_BUOY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EstimatedKiaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ESTIMATED_KIA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EstimatedWiaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ESTIMATED_WIA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ExpectedNumberOfTransitorsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXPECTED_NUMBER_OF_TRANSITORS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FemalesAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FEMALES_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FemalesPregnantType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FEMALES_PREGNANT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'JtidsNetworkLibraryIdentificationNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_JTIDS_NETWORK_LIBRARY_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LandingSiteLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANDING_SITE_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LandingSiteWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANDING_SITE_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LandingSiteWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANDING_SITE_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LegIdentificationNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEG_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LowerLengthLimitInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOWER_LENGTH_LIMIT_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LowerStrengthLimitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOWER_STRENGTH_LIMIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LowerWidthLimitInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOWER_WIDTH_LIMIT_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumStorageCapacityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_STORAGE_CAPACITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_GALLON_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MedicalBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEDICAL_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MedicalBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEDICAL_BED_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MedicalPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEDICAL_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MooredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MOORED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NoncombatantKilledType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NONCOMBATANT_KILLED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NoncombatantMissingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NONCOMBATANT_MISSING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'NoncombatantWoundedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NONCOMBATANT_WOUNDED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberInControlledMovementType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_IN_CONTROLLED_MOVEMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberInUncontrolledMovementType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_IN_UNCONTROLLED_MOVEMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDislocatedFemalesOver60YrsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DISLOCATED_FEMALES_OVER_60_YRS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDislocatedFemalesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DISLOCATED_FEMALES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDislocatedFemalesUnder16YrsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DISLOCATED_FEMALES_UNDER_16_YRS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDislocatedMalesOver60YrsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DISLOCATED_MALES_OVER_60_YRS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDislocatedMalesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DISLOCATED_MALES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDislocatedMalesUnder16YrsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DISLOCATED_MALES_UNDER_16_YRS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDislocatedUnaccompaniedFemalesUnder16YrsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_UNACCOMPANIED_FEMALES_UNDER_16_YRS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDislocatedUnaccompaniedMalesUnder16YrsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_UNACCOMPANIED_MALES_UNDER_16_YRS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfEpwAwaitingEvacuationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_EPW_AWAITING_EVACUATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfEpwEvacuatedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_EPW_EVACUATED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfEpwInIntelligenceChannelsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_EPW_IN_INTELLIGENCE_CHANNELS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfEpwInMedicalChannelsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_EPW_IN_MEDICAL_CHANNELS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfHostCountryCiviliansTyp'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_HOST_COUNTRY_CIVILIANS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfItemsOfEquipmentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ITEMS_OF_EQUIPMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMarriedFemalesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_MARRIED_FEMALES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMarriedMalesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_MARRIED_MALES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMessagesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MESSAGES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMetersShiftedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_METERS_SHIFTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMinesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MINES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPartsRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PARTS_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPersonnelAffectedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PERSONNEL_AFFECTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPersonsOnBoardType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PERSONS_ON_BOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfReplacementsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_REPLACEMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSingleFemalesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SINGLE_FEMALES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSingleMalesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SINGLE_MALES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfSonobuoyInThePatternGainingContactType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SONOBUOY_IN_THE_PATTERN_GAINING_CONTACT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTargetElementCasualtiesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TARGET_ELEMENT_CASUALTIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTargetElementsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TARGET_ELEMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfTdlJMessagesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_TDLJ_ELEMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfThirdCountryCiviliansType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_THIRD_COUNTRY_CIVILIANS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfUSCiviliansType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_US_CIVILIANS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberRequestedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_REQUESTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberReturnedToDutyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_RETURNED_TO_DUTY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleDistanceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_DISTANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OffloadFuelInHundredsOfPoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OFFLOAD_FUEL_IN_HUNDREDS_OF_POUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OffloadSupportEquipmentCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OFFLOAD_SUPPORT_EQUIPMENT_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OnHandInventoryInMbblsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ON_HAND_INVENTORY_IN_MBBLS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MBBLS_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OnHandNumberOfPersonnelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ON_HAND_NUMBER_OF_PERSONNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OnloadSupportEquipmentCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ONLOAD_SUPPORT_EQUIPMENT_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OtherPersonnelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_PERSONNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OverrunLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OVERRUN_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OverrunWidthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OVERRUN_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PassengersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PASSENGERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PersonnelDeployedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONNEL_DEPLOYED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PersonnelGainsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONNEL_GAINS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ProsecutionsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROSECUTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityAllocatedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_ALLOCATED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityAuthorizedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_AUTHORIZED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityByLoadTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_BY_LOAD_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityCapturedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_CAPTURED_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityDamagedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_DAMAGED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityDestroyedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_DESTROYED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityDueInType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_DUE_IN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityNonOperationalType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_NON_OPERATIONAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfLoadTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_LOAD_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfOrdnanceWeaponsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_ORDNANCE_WEAPONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfPartsShippedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_PARTS_SHIPPED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfPetroleumProductsInMbblsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_PETROLEUM_PRODUCTS_IN_MBBLS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MBBLS_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfProductsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_PRODUCTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOperationalType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATIONAL_QUANTITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityReceivedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_RECEIVED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainsAwaitingBurialType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINS_AWAITING_BURIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainsAwaitingTransferType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINS_AWAITING_TRANSFER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainsBuriedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINS_BURIED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainsOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINS_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainsReceivedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINS_RECEIVED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainsTransferredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINS_TRANSFERRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'RequiredStrengthAdditionalSkillIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUIRED_STRENGTH_ADDITIONAL_SKILL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'SearchWidthYardsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEARCH_WIDTH_YARDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SearchZoneWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEARCH_ZONE_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SiteCapacityRemainingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SITE_CAPACITY_REMAINING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SiteCapacityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SITE_CAPACITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SummaryTotalOfInternedCiviliansType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUMMARY_TOTAL_OF_INTERNED_CIVILIANS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SurfaceDuctHeightInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_DUCT_HEIGHT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SystemKillRequirementType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SYSTEM_KILL_REQUIREMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetOrFriendlyUnitLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_OR_FRIENDLY_UNIT_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetOrFriendlyUnitWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_OR_FRIENDLY_UNIT_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalBedCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_BED_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalBeginningBalanceOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_BEGINNING_BALANCE_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalCountOfBloodProductUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_COUNT_OF_BLOOD_PRODUCT_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalDislocatedPersonsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_DISLOCATED_PERSONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalEndingBalanceOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_ENDING_BALANCE_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalEpwOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_EPW_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalEpwRecapturedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_EPW_RECAPTURED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalExpenditureLossType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_EXPENDITURE_LOSS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalExpendituresConsumedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_EXPENDITURES_CONSUMED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalExpendituresFromOtherIssuesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_EXPENDITURES_FROM_OTHER_ISSUES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalFuelRequiredInHundredsOfPoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_FUEL_REQUIRED_IN_HUNDREDS_OF_POUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalLossesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_LOSSES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalNumberOfCiviliansType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_NUMBER_OF_CIVILIANS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalNumberOfPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_NUMBER_OF_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalQuantityOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_QUANTITY_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalQuantityRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_QUANTITY_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalRepairedReceiptsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_REPAIRED_RECEIPTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalResupplyFromConusType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_RESUPPLY_FROM_CONUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalTransferFromUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_TRANSFER_FROM_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalVolumeInCubicFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_VOLUME_IN_CUBIC_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CUBIC_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrueAirspeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRUE_AIRSPEED_IN_KNOTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UpperLengthLimitInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPPER_LENGTH_LIMIT_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UpperStrengthLimitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPPER_STRENGTH_LIMIT_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UpperWidthLimitInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPPER_WIDTH_LIMIT_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UsableStorageCapacityInMbblsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_USABLE_STORAGE_CAPACITY_IN_MBBLS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MBBLS_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'WaterDepthFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WATER_DEPTH_FEET_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIDTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WorksheetSearchOrSweepWidthInYardsAType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WORKSHEET_SEARCH_OR_SWEEP_WIDTH_IN_YARDS_A_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,20}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare(string($fieldName),'ActionUnitAddresseesType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACTION_UNIT_ADDRESSEES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AdditionalGroupInstructionsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ADDITIONAL_GROUP_INSTRUCTIONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AdditionalSymbolInformationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ADDITIONAL_SYMBOL_INFORMATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AirToAirRefuelingAarTrackAreaType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_TO_AIR_REFUELING_AAR_TRACK_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AircraftCommanderSNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_COMMANDERS_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'BrandType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BRAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CALLSIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CallsignLineNumberDocumentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CALLSIGN_LINE_NUMBER_DOCUMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ChatModeratorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHAT_MODERATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CircuitCallsignUseType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CIRCUIT_CALL_SIGN_USE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CodeNameOfStartPositionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CODE_NAME_OF_START_POSITION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CodeNameOfStopPositionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CODE_NAME_OF_STOP_POSITION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ContactCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_CALLSIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ConvoyTitleType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONVOY_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CulvertTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CULVERT_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'EmbarkationHarborType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMBARKATION_HARBOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ExpandedPlatformTypeDescriptionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXPANDED_PLATFORM_TYPE_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'FuelStoresPodsJettisonedType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FUEL_STORES_PODS_JETTISONED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'GroundsiteNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GROUND_SITE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'HimezDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HIMEZ_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'HoldingPointIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOLDING_POINT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'IdNumberType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ID_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'IdentificationGateNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IDENTIFICATION_GATE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ImageryReceiverCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IMAGERY_RECEIVER_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'InfoUnitAddresseesType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INFO_UNIT_ADDRESSEES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'LastNameOfCrewCommanderOrMissionCrewDirectorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LAST_NAME_OF_CREW_COMMANDER_OR_MISSION_CREW_DIRECTOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'LocationOfEventPlaceNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOCATION_OF_EVENT_PLACE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MaritimeEquipmentDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MARITIME_EQUIPMENT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MaritimeRadiationHazardEquipmentDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MARITIME_RADIATION_HAZARD_EQUIPMENT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MaritimeSensorOtherThanRadarSonarAndEsmType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MARITIME_SENSOR_OTHER_THAN_RADAR_SONAR_AND_ESM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MaritimeTacticalDataSystemDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MARITIME_TACTICAL_DATA_SYSTEM_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MaritimeWeaponsEquipmentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MARITIME_WEAPONS_EQUIPMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MessageTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MineCountermeasureUnitIdentificationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_COUNTER_MEASURE_UNIT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MineWarfareCountermeasuresUnitNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_COUNTER_MEASURE_UNIT_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MinefieldDesignationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_FIELD_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MinefieldIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_FIELD_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NameOfAirRefuelingTrackType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_AIR_REFUELING_TRACK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NameOfDeceasedType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_DECEASED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NameOfEscortingPersonnelType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_ESCORTING_PERSONNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NameOfNavigationLightType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_NAVIGATION_LIGHT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NextOfKinBookHolderType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NEXT_OF_KIN_BOOK_HOLDER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NotifyWhoType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NOTIFY_WHO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NuclearWeaponTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUCLEAR_WEAPON_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'OccupationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OCCUPATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'OperationalCommandType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATIONAL_COMMAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'OperationalControlAuthorityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATIONAL_CONTROL_AUTHORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'OperatorPositionEquipmentAffectedType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATOR_POSITION_EQUIPMENT_AFFECTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'OtherChatRoomsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_CHAT_ROOMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'OtherSourceSOfGainType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_SOURCES_OF_GAIN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'PartNumberSubAssemblyType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PART_NUMBER_SUB_ASSEMBLY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'PersonalTitleType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONAL_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'PointOfContactCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POINT_OF_CONTACT_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'PortOfDestinationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PORT_OF_DESTINATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ProtectedIndividualSNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROTECTED_INDIVIDUALS_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ReceiverAircraftCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECEIVER_AIRCRAFT_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ReceivingCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECEIVING_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'RegionalSpaceSupportCenterPointOfContactType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REGIONAL_SPACE_SUPPORT_CENTER_POINT_OF_CONTACT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'RendezvousContactCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RENDEZVOUS_CONTACT_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'RequestingAuthorityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUESTING_AUTHORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'RequisitionStatusType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUISITION_STATUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ResponsibleCommandType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RESPONSIBLE_COMMAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SavowCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SAVOW_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ScrambleAgencyCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SCRAMBLE_AGENCY_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SectorAntiAirWarfareCoordinatorSaawcType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECTOR_ANTIAIR_WARFARE_COORDINATOR_SAAWC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ShipCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SourceIdType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SOURCE_ID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SpecificEquipmentTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIFIC_EQUIPMENT_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'StaffCommentsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STAFF_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'StockNumberOfPartType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STOCK_NUMBER_OF_PART_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'StockNumberOfSubAssemblyType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STOCK_NUMBER_OF_SUB_ASSEMBLY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'StoresTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STORES_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SubmarineRangeAreaType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBMARINE_RANGE_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SubmarineTransitLaneType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBMARINE_TRANSIT_LANE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SupportEquipmentRequiredType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUPPORT_EQUIPMENT_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SurfaceActionPlanType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_ACTION_PLAN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SurfaceShipGunnerySystemType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_SHIP_GUNNERY_SYSTEM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SurfaceShipSubmarineSonarDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_SHIP_SUBMARINE_SONAR_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SurfaceToAirMissileTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_TO_AIR_MISSILE_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SurfaceToAirWeaponSystemTypeOtherType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_TO_AIR_WEAPON_SYSTEM_TYPE_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TacticalCommandAuthorityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TACTICAL_COMMAND_AUTHORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TacticalControlAuthorityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TACTICAL_CONTROL_AUTHORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TargetIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TargetTheaterIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_THEATER_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TaskPlatformTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TASK_PLATFORM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TaskedUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TASKED_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TimeSeparationOperatingAreaOffsetParameterType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_SEPARATION_OPERATING_AREA_OFFSET_PARAMETER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TowlineIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOWLINE_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TransmitCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRANSMIT_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TunnelTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TUNNEL_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TypeOfCommandAndControlAgencyOtherType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_COMMAND_AND_CONTROL_AGENCY_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TypeOfMineZoneType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_MINE_ZONE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TypeOfNetworkEnabledWeaponOtherType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_NETWORK_ENABLED_WEAPON_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'UnitLineNumberDocumentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_LINE_NUMBER_DOCUMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'UnitSupportedType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_SUPPORTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'UserCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_USER_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'VulnerablePointTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VULNERABLE_POINT_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ZoneIdentificationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ZONE_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'_9UnitCommentsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NINE_UNIT_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AcuteBreakerAngleInDegreesRelativeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACUTE_BREAKER_ANGLE_IN_DEGREES_RELATIVE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AircraftDataLinkAddressType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_DATA_LINK_ADDRESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AircraftSearchAltitudeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_SEARCH_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AltitudeInHundredsOfFeetObservedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTITUDE_IN_HUNDREDS_OF_FEET_OBSERVED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AntennaAzimuthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANTENNA_AZIMUTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AntiairWarfareAxisInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANTI_AIR_WARFARE_AXIS_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ApnRadarBeaconCodeSettingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_APN_RADAR_BEACON_CODE_SETTING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BaseRefuelingAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BASE_REFUELING_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BearingFromAircraftInDegreesMagneticType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BEARING_FROM_AIRCRAFT_IN_DEGREES_MAGNETIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MAGNETIC_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BearingFromBullseyeInDegreesMagneticType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BEARING_FROM_BULLSEYE_IN_DEGREES_MAGNETIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MAGNETIC_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CenterBearingInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CENTER_BEARING_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ClosestApproachPointInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CLOSEST_APPROACH_POINT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CloudBaseAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CLOUD_BASE_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CloudBaseHeight001To160Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CLOUD_BASE_HEIGHT_001_TO_160_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CloudBaseHeight301To460Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CLOUD_BASE_HEIGHT_301_TO_460_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CloudBaseHeight501To660Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CLOUD_BASE_HEIGHT_501_TO_660_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'CloudTopAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CLOUD_TOP_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfAssetsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_ASSETS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CourseDegreesMagneticType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COURSE_DEGREES_MAGNETIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MAGNETIC_DEGREE_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CourseDegreesTrueType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COURSE_DEGREEE_TRUE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'DeconflictedFlightLevelInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DECONFLICTED_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DirectionInDegreesInTrueType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIRECTION_IN_DEGREES_IN_TRUE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DirectionOfMovementInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIRECTION_OF_MOVEMENT_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DirectionOfWeatherEventMovementType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIRECTION_OF_WEATHER_EVENT_MOVEMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DownwindDirectionInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DOWNWIND_DIRECTION_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DueHomeJulianDayType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DUE_HOME_JULIAN_DAY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_JULIAN_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EcmResistantVoiceErvNetNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ECM_RESISTANT_VOICE_ERV_NET_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EventNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EVENT_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FirstSerialNumberCopiedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FIRST_SERIAL_NUMBER_COPIED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ForwardAirControllerDataLinkAddressType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FORWARD_AIR_CONTROLLER_DATA_LINK_ADDRESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HeightOfStationInTensOfMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HEIGHT_OF_STATION_IN_TENS_OF_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HighestRunwayBearingInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HIGHEST_RUNWAY_BEARING_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InterceptSerialNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTERCEPT_SERIAL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ItemNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ITEM_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'JulianDayType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_JULIAN_DAY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LastSerialNumberCopiedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LAST_SERIAL_NUMBER_COPIED_DAY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LeftRadialLineOrientationInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEFT_RADIAL_LINE_ORIENTATION_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LongitudeDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LONGITUDE_DEGREES_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'LowerAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOWER_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LowerFlightLevelInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOWER_FLIGHT_LEVEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LowestRunwayBearingInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOWEST_RUNWAY_BEARING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MagneticBearingInDegreesFromNavaidType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAGNETIC_BEARING_IN_DEGREES_FROM_NAVAID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MagneticBearingInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAGNETIC_BEARING_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MagneticHeadingInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAGNETIC_HEADING_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MainIjmsNetNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAIN_IJMS_NET_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaxAltitudeHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MeanRefractiveIndexType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEAN_REFRACTIVE_INDEX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MessageNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MetCfWindSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MET_CF_WIND_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MetLatitudeInTenthsOfDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MET_LATITUDE_IN_TENTHS_OF_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MetLongitudeInTenthsOfDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MET_LONGITUDE_IN_TENTHS_OF_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MetStationPressureInMillibarsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MET_STATION_PRESSURE_IN_MILLIBARS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MILLIBAR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MetWindDirectionTensOfMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MET_WIND_DIRECTION_TENS_OF_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MILLIBAR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MetWindSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MET_WIND_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MgrsUtm100MeterEastingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MGRS_UTM_100_METER_EASTING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MgrsUtm100MeterNorthingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MGRS_UTM_100_METER_NORTHING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'MinAltitudeHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumCeilingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CEILING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumFlightLevelInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumFreezingLevelInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_FREEZING_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumSafeDistance1InHundredsOfMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_SAFE_DISTANCE_1_IN_HUNDREDS_OF_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumSafeDistance2InHundredsOfMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_SAFE_DISTANCE_2_IN_HUNDREDS_OF_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissionIdentificationNumberPart2Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_IDENTIFICATION_NUMBER_PART_2_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissionIdentificationNumberPartIType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_IDENTIFICATION_NUMBER_PART_1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MviSerialNumberPart2Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MVI_SERIAL_NUMBER_PART_2_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NationalNetworkIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MVI_NATIONAL_NETWORK_IDENTIFIER_2_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NavalAmphibiousCommunicationsNetLineNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVAL_AMPHIBIOUS_COMMUNICATIONS_NET_LINE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NpgStackNetNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NPG_STACK_NET_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfIncidentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_INCIDENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrientationOfEquipmentInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORIENTATION_OF_EQUIPMENT_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PartsSequenceNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARTS_SEQUENCE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PossibleAboveAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POSSIBLE_ABOVE_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PostureAttainmentTimeInDaysType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POSTURE_ATTAINMENT_TIME_IN_DAYS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ProbableAboveAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROBABLE_ABOVE_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RadiusOfZone1Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADIUS_OF_ZONE_1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReactionTimeInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REACTION_TIME_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReasonForAirliftMissionDelayType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REASON_FOR_AIRLIFT_MISSION_DELAY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReceiverDataLinkAddressType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECEIVER_DATA_LINK_ADDRESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RelativeBearingInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RELATIVE_BEARING_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'RendezvousAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RENDEZVOUS_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RendezvousFlightLevelInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RENDEZVOUS_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RightRadialLineOrientationInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RIGHT_RADIAL_LINE_ORIENTATION_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RoeNumericIndicatorThreeDigitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ROE_NUMERIC_INDICATOR_THREE_DIGITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RunInHeadingInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RUN_IN_HEADING_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SearchTrackDistanceInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEARCH_TRACK_DISTANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SectorLimitStartType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECTOR_LIMIT_START_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SectorLimitStopType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECTOR_LIMIT_STOP_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SectorWidthInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECTOR_WIDTH_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SectorWidthInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECTOR_WIDTH_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SubmarineDeploymentDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBMARINE_DEPLOYMENT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetOrientationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_ORIENTATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ThousandthOfMinuteOfLatitudeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THOUSANDTH_OF_MINUTE_OF_LATITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ThousandthOfMinuteOfLongitudeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THOUSANDTH_OF_MINUTE_OF_LONGITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TimeToControlPointType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_TO_CONTROL_POINT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TlamDataIdentificationNumberPart1Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TLAM_DATA_IDENTIFICATION_NUMBER_PART_1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TlamDataIdentificationNumberPart2Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TLAM_DATA_IDENTIFICATION_NUMBER_PART_2_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrueBearingInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRUE_BEARING_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UpperAltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPPER_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UpperFlightLevelInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPPER_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WindDirectionInDegreesRelativeToTrueNorthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIND_DIRECTION_IN_DEGREES_RELATIVE_TO_TRUE_NORTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WindSpeedUnspecifiedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIND_SPEED_UNSPECIFIED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WindSpeedUnspecifiedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIND_SPEED_UNSPECIFIED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ZoneAngleInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ZONE_ANGLE_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AltitudeInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTITUDE_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BearingInDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BEARING_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FlightLevelInHundredsOfFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FLIGHT_LEVEL_IN_HUNDREDS_OF_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NetNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NET_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 0">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(string-length(string($length)) &gt; 0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_THREE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,30}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare(string($fieldName),'AgencyDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AGENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AgencyType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AGENCY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AirCommandAndControlSystemAccsDesignationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_COMMAND_AND_CONTROL_SYSTEM_ACCS_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AirdropTypeOtherType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRDROP_TYPE_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AreaOfValidityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AREA_OF_VALIDITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AuthorizationUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHORIZATION_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'AvailableUnitsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVAILABLE_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CapturingUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CAPTURING_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ChatRoomType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHAT_ROOM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ChildNodeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHILD_NODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CollectionUnitDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COLLECTION_UNIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CommercialOwnerType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMERCIAL_OWNER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ControlPositionReadinessStatusType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTROL_POSITION_READINESS_STATUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'CoordinatingUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COORDINATING_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'DesiredMeanPointOfImpactDmpiIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESIRED_MEAN_POINT_OF_IMPACT_DMPI_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(compare(string($fieldName),'DesiredMeanPointOfImpactType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESIRED_MEAN_POINT_OF_IMPACT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'DestinationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESTINATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'DirectionFindingFacilityDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIRECTION_FINDING_FACILITY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'EmergencyDisablementEvacuationUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMERGENCY_DISABLEMENT_EVACUATION_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'EventType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EVENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ForceOrUnitRequiredToAcknowledgeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FORCE_OR_UNIT_REQUIRED_TO_ACKNOWLEDGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'FotcCtCommandType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FOT_CCT_COMMAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'FriendlyUnitDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FRIENDLY_UNIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'InformationSourceType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INFORMATION_SOURCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'IntelligenceProductTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTELLIGENCE_PRODUCT_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'JointDesiredPointOfImpactJdpiType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_JOINT_DESIRED_POINT_OF_IMPACT_JDPI_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'KillBoxType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_KILL_BOX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'LaunchModeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LAUNCH_MODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MasterNodeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MASTER_MODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MineCountermeasureEquipmentModeConfigurationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_COUNTER_MEASURE_EQUIPMENT_MODE_CONFIGURATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MineCountermeasureEquipmentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_COUNTER_MEASURE_EQUIPMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MineCountermeasureUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_COUNTER_MEASURE_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MinefieldMaintenanceUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINEFIELD_MAINTENANCE_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MinelayingUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_LAYING_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MissileOrderType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSILE_ORDER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MissionLaunchRegionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_LAUNCH_REGION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MissionPayloadType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_PAYLOAD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MissionVerificationIndexOriginatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_VERIFICATION_INDEX_ORIGINATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MixOfWeaponsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MIX_OF_WEAPONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ModelType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MODEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'MovingUnitIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MOVING_UNIT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NameOfAreaOfValidityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_AREA_OF_VALIDITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NameOfFirstLastNumberCoordinatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_FIRST_LAST_NUMBER_COORDINATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NameOfLeadShipInGroupType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_LEAD_SHIP_IN_GROUP_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NameOfMissingNumberCoordinatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_MISSING_NUMBER_COORDINATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NameOfShipClassType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_SHIP_CLASS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NavigationHazardWarningType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVIGATION_HAZARD_WARNING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'NetUsageFunctionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NET_USAGE_FUNCTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ObserverSLocationNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSERVERS_LOCATION_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ObserverSLocationNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSERVERS_LOCATION_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'OriginalReportingCommandType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORIGINAL_REPORTING_COMMAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'OriginatorOfDiplomaticMissionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORIGINATOR_OF_DIPLOMATIC_MISSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'OriginatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORIGINATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'PlatformIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLATFORM_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'RadarAntennaModelType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADAR_ANTENNA_MODEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ReasonForCancellationOfSatelliteAccessType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REASON_FOR_CANCELLATION_OF_SATELLITE_ACCESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ReasonForChangeOfSatelliteAccessType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REASON_FOR_CHANGE_OF_SATELLITE_ACCESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ReasonForTerminationOfSatelliteAccessType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REASON_FOR_TERMINATION_OF_SATELLITE_ACCESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ReportingUnitNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTING_UNIT_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ReportingUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTING_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'RequestingAgencyDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUESTING_AGENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SearchAttackUnitOrSurfaceActionGroupCommanderType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEARCH_ATTACK_UNIT_OR_SURFACE_ACTION_GROUP_COMMANDER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SecurityClearanceCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECURITY_CLEARANCE_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SeekerPatternType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEEKER_PATTERN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SensorAssetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SENSOR_ASSET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ShipNameOfAgencyAssumingControlType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_NAME_OF_AGENCY_ASSUMING_CONTROL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ShipNameToProvideHelosFuelingCapacityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_NAME_TO_PROVIDE_HELOS_FUELING_CAPACITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ShipNameToProvideHelosType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_NAME_TO_PROVIDE_HELOS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SolidCargoAmmunitionTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SOLID_CARGO_AMMUNITION_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SpaceMissionTaskingType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPACE_MISSION_TASKING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'SubOrganizationIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUB_ORGANIZATION_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TacticalBattleManagementFunctionTbmfAreaDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TACTICAL_BATTLE_MANAGEMENT_FUNCTION_TBMF_AREA_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TacticalUnitTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TACTICAL_UNIT_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TaskedUnitDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TASKED_UNIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TechnicalPubIdType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TECHNICAL_PUB_ID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TlamMissionDataUpdateOriginatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TLAM_MISSION_DATA_UPDATE_ORIGINATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TumOriginatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TUM_ORIGINATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'TypeVesselType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_VESSEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'UnitAffectedType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_AFFECTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'UnitDesignationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'UnitIdType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_ID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'UnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'ViceCommodoreSShipNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VICE_COMMODORES_SHIP_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'WeaponInitializationKeySplitWiksShortTitleType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEAPON_INITIALIZATION_KEY_SPLIT_WIKS_SHORT_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'WeaponTypeGenericType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEAPON_TYPE_GENERIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_TEXT,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AirTemperatureMeasurementType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_TEMPERATURE_MEASUREMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AntennaElevationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANTENNA_ELEVATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AutoReadySpareMissileType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTO_READY_SPARE_MISSILE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BackupMissileType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BACKUP_MISSILE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BasicEncyclopediaSuffixType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BASIC_ENCYCLOPEDIA_SUFFIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CentiminuteAngularType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CENTIMINUTE_ANGULAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ChannelConnectorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHANNEL_CONNECTOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DataEntryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DATA_ENTRY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DayType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DurationInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DURATION_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DurationInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DURATION_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EssentialElementsOfInformationCategoryIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ESSENTIAL_ELEMENTS_OF_INFORMATION_CATEGORY_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HourTimeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOUR_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ImageType01To99Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IMAGE_TYPE_01_TO_99_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InnerRangeInThousandsOfYardsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INNER_RANGE_IN_THOUSANDS_OF_YARDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LatitudeCentisecondAngularType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LATITUDE_CENTISECOND_ANGULAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CENTISECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LatitudeDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LATITUDE_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LatitudeMinuteAngularType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LATITUDE_MINUTE_ANGULAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LatitudeSecondAngularType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LATITUDE_SECOND_ANGULAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LeftAreaBoundaryInTensOfDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEFT_AREA_BOUNDARY_IN_TENS_OF_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LevelOfAssuranceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEVEL_OF_ASSURANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LongitudeCentisecondAngularType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LONGITUDE_CENTISECOND_ANGULAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CENTISECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LongitudeMinuteAngularType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LONGITUDE_MINUTE_ANGULAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LongitudeSecondAngularType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LONGITUDE_SECOND_ANGULAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaintenancePriorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAINTENANCE_PRIORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MajorEquipmentBlockNumberFieldOneType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAJOR_EQUIPMENT_BLOCK_NUMBER_FIELD_ONE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MajorEquipmentBlockNumberFieldTwoType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAJOR_EQUIPMENT_BLOCK_NUMBER_FIELD_TWO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MetRelativeHumidityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MET_RELATIVE_HUMIDITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MgrsUtm1000MeterEastingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MGRS_UTM_1000_METER_EASTING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MgrsUtm1000MeterNorthingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MGRS_UTM_1000_METER_NORTHING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MgrsUtmGridZoneColumnType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MGRS_UTM_GRID_ZONE_COLUMN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinuteEastingGeorefType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINUTE_EASTING_GEOREF_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinuteNorthingGeorefType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINUTE_NORTHING_GEOREF_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinuteTimeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINUTE_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissileAlignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSILE_ALIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissionAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MviSerialNumberPart1Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MVI_SERIAL_NUMBER_PART_1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NationalImageryInterpretationRatingScaleNiirsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NATIONAL_IMAGERY_INTERPRETATION_RATING_SCALE_NIIRS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberEscortedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_ESCORTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraft00To99Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_00_TO_99_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftControllersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_CONTROLLERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftInvolvedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_INVOLVED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfDaysFromRequisitionDateType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_DAYS_FROM_REQUISITION_DATE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfFemaleEnlistedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_FEMALE_ENLISTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfFemaleOfficersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_FEMALE_OFFICERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMaleEnlistedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MALE_ENLISTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfMaleOfficersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MALE_OFFICERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfObjectsInATrackNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_OBJECTS_IN_A_TRACK_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfRunsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_RUNS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OuterRangeInThousandsOfYardsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OUTER_RANGE_IN_THOUSANDS_OF_YARDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentOfMinefieldMixType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_OF_MINE_FIELD_MIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentPartialCoverageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_PARTIAL_COVERAGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentProbabilityOfDetectionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENT_PROBABILITY_OF_DETECTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfDemineralizedWaterRemainingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_DEMINERALIZED_WATER_REMAINING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfDieselFuelRemainingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_DIESEL_FUEL_REMAINING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfFreshWaterRemainingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_FRESH_WATER_REMAINING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfHydraulicOilRemainingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_HYDRAULIC_OIL_REMAINING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PercentageOfTaskCompletedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_TASK_COMPLETED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PostureAttainmentTimeInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POSTURE_ATTAINMENT_TIME_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PrimaryMissileType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_MISSILE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReactionTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REACTION_TIME_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReadySpareMissileType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_READY_SPARE_MISSILE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RecoveryTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECOVERY_TIME_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainingAmmunitionInPercentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINING_AMMUNITION_IN_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainingFuelOilInPercentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINING_FUEL_OIL_IN_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainingLubeOilInPercentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINING_LUBE_OIL_IN_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainingProvisionsInPercentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINING_PROVISIONS_IN_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemainingWaterInPercentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMAINING_WATER_IN_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RightAreaBoundaryInTensOfDegreesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RIGHT_AREA_BOUNDARY_IN_TENS_OF_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RoeNumericIndicatorTwoDigitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ROE_NUMERIC_INDICATOR_TWO_DIGITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SalvoSizeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SALVO_SIZE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SecondTimeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECOND_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StaggerLegsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STAGGER_LEGS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StreamTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STREAM_TIME_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TimeInSecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_IN_SECONDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrackLegType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_LEG_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrueWindspeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRUE_WINDSPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeOfContourType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_CONTOUR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_SPEED_IN_KNOTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UtmFalseNorthingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UTM_FALSE_NORTHING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UtmGridZoneColumnType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UTM_GRID_ZONE_COLUMN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 0">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'_2DigitYearType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TWO_DIGIT_YEAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat('TwoDigit',concat(string($min),concat('To',concat(string($max),concat('Number',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,38}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'ActivityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACTIVITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AircraftNameNatoType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_NAME_NATO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AircraftWeaponLoadType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_WEAPON_LOAD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AreaNameEstimatedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AREA_NAME_ESTIMATED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ArrivalPlaceNameType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ARRIVAL_PLACE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ArrivalPlaceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ARRIVAL_PLACE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BaseOfDeploymentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BASE_OF_DEPLOYMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CallSignBookType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CALL_SIGN_BOOK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CityOfOwnerRegistrationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CITY_OF_OWNER_REGISTRATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CommunicationsCenterType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATIONS_CENTER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ContactShipTaskedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_SHIP_TASKED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DeparturePlaceNameType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DEPARTURE_PLACE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DeparturePlaceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DEPARTURE_PLACE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DeparturePointType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DEPARTURE_POINT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EwCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EW_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GeographicAreaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GEOGRAPHIC_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GroundsiteCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GROUND_SITE_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HomeportType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOME_PORT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InportPlaceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INPORT_PLACE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LocalityOfBirthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOCALITY_OF_BIRTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NadgeStationCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NADGE_STATION_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfJoiningShipType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_JOINING_SHIP_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfShipBeingJoinedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_SHIPBEING_JOINED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfUnitInCommandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_UNIT_IN_COMMAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrganizationTitleType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORGANIZATION_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OtherPlatformCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_PLATFORM_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ParentUnitIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARENT_UNIT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PocLinkFunctionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POC_LINK_FUNCTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PortOfRegistrationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PORT_OF_REGISTRATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReferencePointNameExpandedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REFERENCE_POINT_NAME_EXPANDED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SearchAttackUnitCommanderType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEARCH_ATTACK_UNIT_COMMANDER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SecondaryGuardShipType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECONDARY_GUARD_SHIP_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SensorDiscriminationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SENSOR_DISCRIMINATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ShipNameOrAgencyAssumingControlType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_NAME_OR_AGENCY_ASSUMING_CONTROL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ShipNameSpecificType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_NAME_SPECIFIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpecificAircraftCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIFIC_AIRCRAFT_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpecificCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIFIC_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StandbyUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STANDBY_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StayBackUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STAY_BACK_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StrikeLocationNameDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STRIKE_LOCATION_NAME_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SubjectIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBJECT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UniqueNameOfShipType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIQUE_NAME_OF_SHIP_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitBeingJoinedOrDetachedFromType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_BEING_JOINED_OR_DETACHED_FROM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitCallSign'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitCommanderEmbarkedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_COMMANDER_EMBARKED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UsageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_USAGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WeatherAreaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEATHER_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				
				
				
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AdjustedTrackSpacingYardsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ADJUSTED_TRACK_SPACING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AirfieldElevationInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRFIELD_ELEVATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AltitudeInFeetAboveGroundLevelAglType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTITUDE_IN_FEET_ABOVE_GROUND_LEVEL_AGL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AssignedStrengthPersonnelCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ASSIGNED_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AssignedStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ASSIGNED_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AuthorizedStrengthPersonnelCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHORIZED_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AuthorizedStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHORIZED_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AvailableStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVAILABLE_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BerthLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BERTH_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CoordinationLevelInFeetBeyondTheIffOffLineType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COORDINATION_LEVEL_IN_FEET_BEYOND_THE_IFF_OFF_LINE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CoordinationLevelInFeetUpToTheIffOffLineType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COORDINATION_LEVEL_IN_FEET_UP_TO_THE_IFF_OFF_LINE_TYPE_PATTERN,concat(string($MTF_ONE),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfBloodProductUnitsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_BLOOD_PRODUCT_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfCriticalPersonnelAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_CRITICAL_PERSONNEL_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfCriticalPersonnelAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_CRITICAL_PERSONNEL_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfTotalPersonnelAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_TOTAL_PERSONNEL_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfTotalPersonnelAvailableType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_TOTAL_PERSONNEL_AVAILABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CriticalPersonnelAuthorizedOrRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CRITICAL_PERSONNEL_AUTHORIZED_OR_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DeployableStrengthPersonnelCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DEPLOYABLE_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DistanceBetweenLeadingEdgeImpactPointInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_BETWEEN_LEADING_EDGE_IMPACT_POINT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EngineHorsepowerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENGINE_HORSE_POWER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HORSEPOWER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EntranceLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTRANCE_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EntranceWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTRANCE_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HazardDistanceInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HAZARD_DISTANCE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HeightAboveTheGroundInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HEIGHT_ABOVE_THE_GROUND_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HeightInCentimetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HEIGHT_IN_CENTIMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CENTIMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HelicopterLandingAreaElevationInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HELICOPTER_LANDING_AREA_ELEVATION_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HelicopterLandingAreaLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HELICOPTER_LANDING_AREA_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HelicopterLandingAreaWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HELICOPTER_LANDING_AREA_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HoursAwaitingPartsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOURS_AWAITING_PARTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HoursBetweenFailuresType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOURS_BETWEEN_FAILURES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HoursToRepairType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOURS_TO_REPAIR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InterimSupplyAllowanceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTERIM_SUPPLY_ALLOWANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LengthInCentimetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LENGTH_IN_CENTIMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CENTIMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LexitDistanceInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEXIT_DISTANCE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LexitWidthInMeters'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEXIT_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MadOperationalEffectivenessAreaIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAD_OPERATIONAL_EFFECTIVENESS_AREA_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumDeckLoadCapacityInKilogramsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAD_MAXIMUM_DECK_LOAD_CAPACITY_IN_KILOGRAMS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOGRAM_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumDistanceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_DISTANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumHandlingCapacityInTonsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_HANDLING_CAPACITY_IN_TONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumRangeInTensOfMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_RANGE_IN_TENS_OF_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumDistanceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_DISTANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumRangeInTensOfMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_RANGE_IN_TENS_OF_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPartsReceivedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PARTS_RECEIVED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstructionDistanceInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTRUCTION_DISTANCE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OnboardQuantityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ONBOARD_QUANTITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OverflowHoldingBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OVERFLOW_HOLDING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OverrunLengthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OVERRUN_LENGTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ParkingAreaLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARKING_AREA_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ParkingAreaWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARKING_AREA_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PlatformTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLATFORM_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PortDistanceInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PORT_DISTANCE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PossessedStrengthPersonnelCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POSSESSED_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PrecisionLocationStrikeSystemNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRECISION_LOCATION_STRIKE_SYSTEM_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfOrdnanceExpendedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_ORDNANCE_EXPENDED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOrderedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_ORDERED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityRequiredForCasualtyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_REQUIRED_FOR_CASUALTY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RangeInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RANGE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RequiredStrengthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUIRED_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RunwayLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RUNWAY_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RunwayWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RUNWAY_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ShaftHorsepowerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHAFT_HORSEPOWER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HORSEPOWER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SourceLinkDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SOURCE_LINK_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StructuredStrengthPersonnelCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STRUCTURED_STRENGTH_PERSONNEL_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SurfZoneWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURF_ZONE_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TaskedDeployablePersonnelCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TASKED_DEPLOYABLE_PERSONNEL_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TaxiwayLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TAXIWAY_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TaxiwayWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TAXIWAY_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalBedsAssignedToPatientsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_BEDS_ASSIGNED_TO_PATIENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalPatientsRequiringBedsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_PATIENTS_REQUIRING_BEDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalPersonnelAuthorizedOrRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_PERSONNEL_AUTHORIZED_OR_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalTracksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_TRACKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WidthInCentimetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIDTH_IN_CENTIMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CENTIMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{4,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AngleTInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANGLE_T_IN_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AttitudeInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ATTITUDE_IN_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AzimuthOfFireInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AZIMUTH_OF_FIRE_IN_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AzimuthOfLeftTraverseLimitInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AZIMUTH_OF_LEFT_TRAVERSE_LIMIT_IN_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AzimuthOfRightTraverseLimitInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AZIMUTH_OF_RIGHT_TRAVERSE_LIMIT_IN_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BarometricPressureInMillibarsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BAROMETRIC_PRESSURE_IN_MILLIBARS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MILLIBAR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CommercialFaxExtensionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMERCIAL_FAX_EXTENSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DownwindDirectionInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DOWNWIND_DIRECTION_IN_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DsnFaxExtensionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DSN_FAX_EXTENSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DsnStuIiiExtensionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DSN_STUIII_EXTENSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EndYearType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_END_YEAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FederalSupplyClassType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FEDERAL_SUPPLY_CLASS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GunTargetLineInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GUN_TARGET_LINE_IN_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InetPortType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INET_PORT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LeftRadialLineOrientationInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEFT_RADIAL_LINE_ORIENTATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MetAirPressureInMillibarsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MET_AIR_PRESSURE_IN_MILLIBARS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MILLIBAR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MetAirVirtualTemperatureInTenthsOfDegreesKelvinType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MET_AIR_VIRTUAL_TEMPERATURE_IN_TENTHS_OF_DEGREES_KELVIN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KELVIN_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MgrsUtm10MeterEastingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MGRS_UTM_10_METER_EASTING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MgrsUtm10MeterNorthingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MGRS_UTM_10_METER_NORTHING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissionYearType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_YEAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YEAR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumericDesignationOfUnit'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_DESIGNATION_OF_UNIT_TYPE_PATTERN,concat($min,concat('To',concat($max,concat('Number',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumericalTargetDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERICAL_TARGET_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObserverTargetAzimuthInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSERVER_TARGET_AZIMUTH_IN_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OperatorAssistedExtensionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATOR_ASSISTED_EXTENSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrderOfBattleCountType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORDER_OF_BATTLE_COUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RightRadialLineOrientationInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RIGHT_RADIAL_LINE_ORIENTATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SequenceSortKeyNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEQUENCE_SORT_KEY_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpeedOfSoundInWaterMetersPerSecondType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPEED_OF_SOUND_IN_WATER_METERS_PER_SECOND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METERS_PER_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StartYearType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_START_YEAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YEAR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TenThousandthOfMinuteOfLatitudeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TEN_THOUSANDTH_OF_MINUTE_OF_LATITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TenThousandthOfMinuteOfLongitudeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TEN_THOUSANDTH_OF_MINUTE_OF_LONGITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TransmissionPowerWattsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRANSMISSION_POWER_WATTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_WATT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'VehicleYearType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VEHICLE_YEAR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YEAR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WindDirectionInMilsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIND_DIRECTION_IN_MILS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MIL_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'YearType'))">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YEAR_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(string-length($length) &gt; 0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AllowableCabinLoadInPoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALLOWABLE_CABIN_LOAD_IN_POUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AmountOfAmmunitionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AMOUNT_OF_AMMUNITION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BerthLengthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BERTH_LENGTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ContactAltitudeFeetAboveMslType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_ALTITUDE_FEET_ABOVE_MSL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountOfEntitiesInvolvedInEventType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNT_OF_ENTITIES_INVOLVED_IN_EVENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EntranceWidthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTRANCE_WIDTH_IN_FEET_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat('Measure',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EntranceLengthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTRANCE_LENGTH_IN_FEET_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat('Measure',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FuelConsumptionUnitInCubicMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FUEL_CONSUMPTION_UNIT_IN_CUBIC_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CUBIC_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FuelUsedGallonsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FUEL_USED_GALLONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_GALLON_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HazardDistanceInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HAZARD_DISTANCE_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HeightAboveTheGroundInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HEIGHT_ABOVE_GROUND_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HelicopterLandingAreaElevationInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HELICOPTER_LANDING_AREA_ELEVATION_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HelicopterLandingAreaLengthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HELICOPTER_LANDING_AREA_LENGTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HelicopterLandingAreaWidthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HELICOPTER_LANDING_AREA_WIDTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LexitDistanceInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEXIT_DISTANCE_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LexitWidthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEXIT_WIDTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MailAndOrCargoOffNextStationInPoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAIL_AND_OR_CARGO_OFF_NEXT_STATION_IN_POUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MilitaryPortCapacityInMetricTonsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MILITARY_PORT_CAPACITY_IN_METRIC_TONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METRIC_TON_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleLengthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_LENGTH_IN_FEET_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat('Measure',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleWidthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_WIDTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstructionDistanceInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTRUCTION_DISTANCE_IN_FEET_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat('Measure',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OperatingWeightInPoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATING_WEIGHT_IN_POUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OptimumReceiverAltitudeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPTIMUM_RECEIVER_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ParkingAreaLengthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARKING_AREA_LENGTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ParkingAreaWidthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARKING_AREA_WIDTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PortDistanceInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PORT_DISTANCE_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityTableOfEntitlementType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_TABLE_OF_ENTITLEMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RoundsOfAmmunitionMissilesOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ROUNDS_OF_AMMUNITION_MISSILES_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RunwayLengthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RUNWAY_LENGTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TaxiwayLengthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TAXIWAY_LENGTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TaxiwayWidthInFeetType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TAXIWAY_WIDTH_IN_FEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TonnageCapacityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TONNAGE_CAPACITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalMailAndOrCargoAboardInPoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_MAIL_AND_OR_CARGO_ABOARD_IN_POUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalWeightAboardInPoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_WEIGHT_ABOARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WeightOfSpecialInterestCargoInPoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEIGHT_OF_SPECIAL_INTEREST_CARGO_IN_POUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,15}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AcousticSourceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACOUSTIC_SOURCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AdditionalSpaceSystemIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ADDITIONAL_SPACE_SYSTEM_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AdditionalSpaceSystemIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ADDITIONAL_SPACE_SYSTEM_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AreaDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AREA_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AswWeaponTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ASW_WEAPON_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CallSignOfControlAgencyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CALL_SIGN_OF_CONTROL_AGENCY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CircuitNomenclatureType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CIRCUIT_NOMENCLATURE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ComplyingComponentCommandOrUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMPLYING_COMPONENT_COMMAND_OR_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ComponentCommandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMPONENT_COMMAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DeliveryUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DELIVERY_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EgressRouteIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EGRESS_ROUTE_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EmitterEvaluationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMITTER_EVALUATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'IngressRouteIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INGRESS_ROUTE_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LinkManagementCodeWordType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_MANAGEMENT_CODE_WORD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OtherInformationManagementServicesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_INFORMATION_MANAGEMENT_SERVICES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OwnWeaponsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OWN_WEAPONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PartNomenclatureType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PART_NOMENCLATURE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RequestingComponentCommandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUESTING_COMPONENT_COMMAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RequestingUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUESTING_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SensorQualifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SENSOR_QUALIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SystemCircuitOrFacilityDesignationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SYSTEM_CIRCUITOR_FACILITY_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetMaterialPageType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_MATERIAL_PAGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetObjectiveType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_OBJECTIVE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrackDataSourceOtherType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_DATA_SOURCE_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeOfMaintenanceEquipmentRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_MAINTENANCE_EQUIPMENT_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UniqueDesignation2Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIQUE_DESIGNATION_2_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UniqueDesignationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIQUE_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($minLength,'1') = 0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,24}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'ArbitraryUnitIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ARBITRARY_UNIT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DeliveryAddressType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DELIVERY_ADDRESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EmitterDesignationSpecialType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMITTER_DESIGNATION_SPECIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EmitterDesignationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMITTER_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EnemyParentUnitDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENEMY_PARENT_UNIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EvacuatedToUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EVACUATED_TO_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FireUnitDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FIRE_UNIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GainingOperationalAuthorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GAINING_OPERATIONAL_AUTHORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LaunchCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LAUNCH_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LoadTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOAD_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LosingOperationalAuthorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOSING_OPERATIONAL_AUTHORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MethodOfOperationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_METHOD_OF_OPERATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissionOperationsTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_OPERATIONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PacingItemNounDescriptionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PACING_ITEM_NOUN_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PersonnelSkillTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONNEL_SKILL_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PetroleumFacilityIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PETROLEUM_FACILITY_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SatelliteAccessAuthorizationAgencyDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SATELLITE_ACCESS_AUTHORIZATION_AGENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SearchAndRescueSarUnitSruIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEARCH_AND_RESCUE_SAR_UNIT_SRU_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SecurityClearanceGrantingAgencyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECURITY_CLEARANCE_GRANTING_AGENCY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SupportRequestTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUPPORT_REQUEST_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SupportingUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUPPORTING_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TerminalAreaModelIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TERMINAL_AREA_MODEL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeOfEquipmentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_EQUIPMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeOfSubjectType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_SUBJECT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitIdentityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_IDENTITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,12}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AirTaskingOrderType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_TASKING_ORDER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AircraftCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AreaAndSegmentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AREA_AND_SEGMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CommonIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMON_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>				
				<xsl:when test="(contains(string($fieldName),'ComponentTargetIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMPONENT_TARGET_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ComsecKeyingMaterialType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMSEC_KEYING_MATERIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DiplomaticCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIPLOMATIC_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EmitterCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMITTER_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EscortedCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ESCORTED_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'IntegratedTaskingOrderType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTEGRATED_TASKING_ORDER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InternationalPostalZipCodeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTERNATIONAL_POSTAL_ZIP_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MasterAirAttackPlanType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MASTER_AIR_ATTACK_PLAN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MasterAttackPlanType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MASTER_ATTACK_PLAN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OtherTaskingSourceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_TASKING_SOURCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReceiverCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECEIVER_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReconnaissanceReportRequestType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECONNAISSANCE_REPORT_REQUEST_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReferenceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REFERENCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RendezvousCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RENDEZVOUS_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReserveComponentRoundoutUnitNameAbbreviatedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RESERVE_COMPONENT_ROUND_OUT_UNIT_NAME_ABBREVIATED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SarObjectiveCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SAR_OBJECTIVE_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TankerCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TANKER_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrackChangeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_CHANGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrackLinkType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_LINK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WorksheetIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WORKSHEET_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WorksheetVersionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WORKSHEET_VERSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{4,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AirRefuelingShortTrackIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_REFUELING_SHORT_TRACK_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AlphanumericUniqueItemIdentifier4DigitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALPHA_NUMERIC_UNIQUE_ITEM_IDENTIFIER_4_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CommunicationsEquipmentIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATIONS_EQUIPMENT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'IcaoLocationIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ICAO_LOCATION_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'KqIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_KQ_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Link16AbbreviatedCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK16_ABBREVIATED_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OperatingLocationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATING_LOCATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SecondaryOrSubordinateDocidType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECONDARY_OR_SUBORDINATE_DOC_ID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TheArmyReportingInstallationForstatType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THE_ARMY_REPORTING_INSTALLATION_FOR_STAT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FOUR,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AlternateCommunicationsNetDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTERNATE_COMMUNICATIONS_NET_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CasFrequencyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CAS_FREQUENCY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CommunicationsElectronicsEquipmentModelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATIONS_ELECTRONICS_EQUIPMENT_MODEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CommunicationsNetDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATIONS_NET_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CoordinatingEstablishingAuthorityIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COORDINATING_ESTABLISHING_AUTHORITY_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DataSourceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DATA_SOURCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FrequencyJammedDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREQUENCY_JAMMED_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrdnanceWeaponSystemTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORDNANCE_WEAPON_SYSTEM_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PlaceLocationIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLACE_LOCATION_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PrimaryCommunicationsNetDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_COMMUNICATIONS_NET_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SequenceNumberAlfaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEQUENCE_NUMBER_ALFA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpecialSymbolIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIAL_SYMBOL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StationDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STATION_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StorageCapacityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STORAGE_CAPACITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TailNumberAircraftType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TAIL_NUMBER_AIRCRAFT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WeaponTypeExpendedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEAPON_TYPE_EXPENDED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:if test="(compare($minLength,'1') = 0)">
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AlphabeticIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALPHABETIC_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AnnotationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANNOTATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AviationUnitIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVIATION_UNIT_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CapStationIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CAP_STATION_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CargoClassificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CARGO_CLASSIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EmissionControlPlanType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMISSION_CONTROL_PLAN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FrequencyPlanType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREQUENCY_PLAN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InitialLetterType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INITIAL_LETTER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LineItemNumberAlphabeticType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINE_ITEM_NUMBER_ALPHABETIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'McmOperationSuffixType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MCM_OPERATION_SUFFIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinefieldSegmentIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_FIELD_SEGMENT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PacingItemUnitIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PACING_ITEM_UNIT_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PointAlphabeticIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POINT_ALPHABETIC_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PolarizationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POLARIZATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PrefixAToZType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PREFIX_A_TO_Z_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QRoutePointDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QROUTE_POINT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RequisitionSerialNumberSuffixType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUISITION_SERIAL_NUMBER_SUFFIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SatelliteAccessSupportSegmentIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SATELLITE_ACCESS_SUPPORT_SEGMENT_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SerialIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SERIAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SerialLetterType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SERIAL_LETTER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ShipAlphabeticIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_ALPHABETIC_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SuffixAToZType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUFFIX_A_TO_Z_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TaskingPriorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TASKING_PRIORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TpsnIdentifierCodeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TPSN_IDENTIFIER_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-7]{5,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:if test="string-length($min) > 0 and string-length($max) > 0">
				<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($fieldName,concat($MTF_OCTAL_TYPE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_FIVE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,68}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AreaWeaponControlAircraftType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AREA_WEAPON_CONTROL_AIRCRAFT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AreaWeaponControlSurfaceToAirWeaponsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AREA_WEAPON_CONTROL_SURFACE_TO_AIR_WEAPONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BdaResultsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BDA_RESULTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ChatMembersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHAT_MEMBERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ChatPurposeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHAT_PURPOSE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DiscrepancyDescriptionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISCREPANCY_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentTrackingCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_TRACKING_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FreehandStaffCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREEHAND_STAFF_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GeneralDescriptionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GENERAL_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HandlingInstructionsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HANDLING_INSTRUCTIONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaintenanceResponseTeamTrackingCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAINTENANCE_RESPONSE_TEAM_TRACKING_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MessageSubjectContinuedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_SUBJECT_CONTINUED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissionHighlightsSummaryOrAnalysisType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_HIGHLIGHTS_SUMMARY_OR_ANALYSIS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfApproverType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_APPROVER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameSOfReportSRequiredType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAMES_OF_REPORTS_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObEquipmentCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OB_EQUIPMENT_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PartsTrackingCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARTS_TRACKING_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ScheduleRequestCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SCHEDULE_REQUEST_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetActivityRemarksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_ACTIVITY_REMARKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetAndOrInstallationDescriptionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_AND_OR_INSTALLATION_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetDefensesSecurityCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_DEFENSES_SECURITY_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UserIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_USER_IDENTIFICATION_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'VdsMovingHavenCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VDS_MOVING_HAVEN_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="contains(@name,'BattalionLogicalChannelNumber0To9Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BATTALION_LOGICAL_CHANNEL_NUMBER_0_TO_9_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'BrigadeLogicalChannelNumber0To9Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BRIGADE_LOGICAL_CHANNEL_NUMBER_0_TO_9_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LastCLevelType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LAST_C_LEVEL_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LatitudeIndicatorDegreesType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LATITUDE_INDICATOR_DEGREES_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LongitudeIndicatorDegreesType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LONGITUDE_INDICATOR_DEGREES_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ModifiedSurfIndexMsiType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MODIFIED_SURF_INDEX_MSI_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					
				</xsl:when>
				<xsl:when test="contains(@name,'NumberOfCoordinatedMissionsType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_COORDINATED_MISSIONS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NumberOfEnginesSightedType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ENGINES_SIGHTED_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NumberOfMastsType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_MASTS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NumberOfRadiosType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_RADIOS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NumberOfShaftsPropsType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SHAFTS_PROPS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NumberOfStacksType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_STACKS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NumberOfSubmarinesEmployedType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SUBMARINES_EMPLOYED_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'StatusOfAviatorTrainingType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STATUS_OF_AVIATOR_TRAINING_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'TenthOfHourType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TENTH_OF_HOUR_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'TenthOfSecondOfLatitudeType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TENTH_OF_SECOND_OF_LATITUDE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'TenthOfSecondOfLongitudeType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TENTH_OF_SECOND_OF_LONGITUDE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'TimeInHoursType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_IN_HOURS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_HOUR_MEASURE,concat($MTF_THREE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'UtmFalseEastingType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UTM_FALSE_EASTING_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'YearDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_YEAR_DESIGNATOR_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="contains(@name,'CodeForOriginatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CODE_FOR_ORIGINATOR_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'EquipmentModelType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_MODEL_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'FirePlanDesignationType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FIRE_PLAN_DESIGNATION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NameOfUnitCreatingTrackType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_UNIT_CREATING_TRACK_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NameOfUnitSchedulingTrackType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_UNIT_SCHEDULING_TRACK_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ReportingUnitCodeType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTING_UNIT_CODE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SamStatusCommentType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SAM_STATUS_COMMENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SeriesDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SERIES_DESIGNATOR_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'TypeOfContainerType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_CONTAINER_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'UnitIdentifierOfMaintenanceRecoveryTeamType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_IDENTIFIER_OF_MAINTENANCE_RECOVERY_TEAM_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'UnitNameAmcType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_NAME_AMC_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'WeaponCaliberType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEAPON_CALIBER_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,8}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6}|\.[0-9]{7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="decimalCnt" select="string-length(substring-after($min,'.'))"/>
			<xsl:choose>
				<xsl:when test="contains(@name,'AgencyContactFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AGENCY_CONTACT_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'CrystalFrequencyInKilohertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CRYSTAL_FREQUENCY_IN_KILOHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ForceMarshallerFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FORCE_MARSHALLER_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'GuidanceFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GUIDANCE_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ImageryDataLinkFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IMAGERY_DATA_LINK_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LandingSitePrimaryFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANDING_SITE_PRIMARY_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LandingSiteSecondaryFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANDING_SITE_SECONDARY_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LowerFrequencyInPulsesPerSecondType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOWER_FREQUENCY_IN_PULSES_PER_SECOND_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LowerFrequencyLimitInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOWER_FREQUENCY_LIMIT_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavigationalAidFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVIGATIONAL_AID_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'OptimumFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPTIMUM_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'PrimaryFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'RadioFrequencyBandwidthInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADIO_FREQUENCY_BANDWIDTH_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ReceiverSBandwidthInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECEIVER_BANDWIDTH_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SecondaryFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECONDARY_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SpareFrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPARE_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'UpperFrequencyInPulsesPerSecondType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPPER_FREQUENCY_IN_PULSES_PER_SECOND_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'UpperFrequencyLimitInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPPER_FREQUENCY_LIMIT_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'FrequencyInMegahertzType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREQUENCY_IN_MEGAHERTZ_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(compare($min,'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains($min,'.')">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(string($max),concat($MTF_DECIMAL,concat($decimalCnt,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{5,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="contains(@name,'LineItemNumberNumericType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINE_ITEM_NUMBER_NUMERIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'MissionIdentificationNumberPart3Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_IDENTIFICATION_NUMBER_PART_3_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NosicIdNumberType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NOSIC_ID_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SigintNumericalTaskingRegisterSnutrType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SIGINT_NUMERICAL_TASKING_REGISTER_SNUTR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'TargetIdentificationType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'TlamDataIdentificationNumberPart3Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TLAM_DATA_IDENTIFICATION_NUMBER_PART_3_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'UnitIdDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_ID_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'Utm1MeterEastingType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UMT_1_METER_EASTING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'Utm1MeterNorthingType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UMT_1_METER_NORTHING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'WorldPortIndexType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WORLD_PORT_INDEX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('Quantity',$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(string-length(string($length)) &gt; 0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FIVE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{3,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="contains(@name,'AlternateSortsMonitorGradeOrRankType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTERNATE_SORTS_MONITOR_GRADE_OR_RANK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'AudioIdentifierType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUDIO_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'HfdfTargetSetIdentifierType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HFDF_TARGET_SET_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'MobilePlaDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MOBILE_PLA_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyCodedReasonEquipmentConditionNotC1Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_CODED_REASON_EQUIPMENT_CONDITION_NOT_C1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyCodedReasonEquipmentSuppliesNotC1Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_CODED_REASON_EQUIPMENT_SUPPLIES_NOT_C1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyCodedReasonPersonnelNotC1Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_CODED_REASON_PERSONNEL_NOT_C1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyCodedReasonReservePersonnelNotC1Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_CODED_REASON_RESERVE_PERSONNEL_NOT_C1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyCodedReasonTrainingNotC1Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_CODED_REASON_TRAINING_NOT_C1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyCodedReasonUnitNotC1Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_CODED_REASON_UNIT_NOT_C1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyCodedSecondaryReasonUnitNotC1Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_CODED_SECONDARY_REASON_UNIT_NOT_C1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyCodedTertiaryReasonUnitNotC1Type')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_CODED_TERTIARY_REASON_UNIT_NOT_C1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyPrimaryResourceCategoryType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_PRIMARY_RESOURCE_CATEGORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavySecondaryResourceCategoryType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_SECONDARY_RESOURCE_CATEGORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavyTertiaryResourceCategoryType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVY_TERTIARY_RESOURCE_CATEGORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'PrimarySortsMonitorGradeOrRankType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_SORTS_MONITOR_GRADE_OR_RANK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'UnitMissionType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_MISSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,2}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'BottomBounceContactTimeInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BOTTOM_BOUNCE_CONTACT_TIME_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ConvergenceZoneContactTimeInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONVERGENCE_ZONE_CONTACT_TIME_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DirectPathContactTimeInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIRECT_PATH_CONTACT_TIME_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HoursAttemptedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOURS_ATTEMPTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HoursSuccessfulType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOURS_SUCCESSFUL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InWaterSurvivalTimeWithImmersionSuitInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IN_WATER_SURVIVAL_TIME_WITH_IMMERSION_SUIT_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InWaterSurvivalTimeWithoutImmersionSuitInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IN_WATER_SURVIVAL_TIME_WITHOUT_IMMERSION_SUIT_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissionDurationTimeInHoursAndTenths'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_DURATION_TIME_IN_HOURS_AND_TENTHS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SalinityPartsPerThousandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SALINITY_PARTS_PER_THOUSAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSAND,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SonarFrequencyInKilohertzType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SONAR_FREQUENCY_IN_KILOHERTZ_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOHERTZ_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SurfaceWindSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_WIND_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TimeOnTrackInHoursToTheTenthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_ON_TRACK_IN_HOURS_TO_THE_TENTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TimeToEstablishLinkInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_TO_ESTABLISH_LINK_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalContactTimeInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_CONTACT_TIME_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'VehicleSpeedKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VEHICLE_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WaterTemperatureFahrenheitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WATER_TEMPERATURE_FAHRENHEIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FARENHEIT_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:if test="(contains($min,'.') or contains($max,'.'))">
							<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
						</xsl:if>
						<xsl:if test="((not(contains($min,'.')) and not(contains($max,'.'))))">
							<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
						</xsl:if>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="contains(@name,'AirEvacuationMissionPriorityType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_EVACUATION_MISSION_PRIORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'AlphanumericUniqueItemIdentifier3DigitType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALPHA_NUMERIC_UNIQUE_ITEM_IDENTIFIER_3_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'EmissionsDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMISSIONS_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LanguageIndicatorCodeMilitaryOccupationalSpecialtyType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANGUAGE_INDICATOR_CODE_MILITARY_OCCUPATIONAL_SPECIALTY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LogisticsRoutingIndicatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOGISTICS_ROUTING_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'PrimaryResourceCategoryType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_RESOURCE_CATEGORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ReconnaissanceMissionAssessmentType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECONNAISSANCE_MISSION_ASSESSMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SecondaryResourceCategoryType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECONDARY_RESOURCE_CATEGORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SignalStrengthType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SIGNAL_STRENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'TertiaryResourceCategoryType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TERTIARY_RESOURCE_CATEGORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'UniqueIdentifierUidType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIQUE_IDENTIFIER_UID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="contains(@name,'AgencyContactFrequencyDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AGENCY_CONTACT_FREQUENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ControlUnitDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTROL_UNIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'DataElementLabelType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DATA_ELEMENT_LABEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'EmissionControlPlanIdentifierType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMISSION_CONTROL_PLAN_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ForceMarshallerFrequencyDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FORCE_MARSHALLER_FREQUENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'GuidanceFrequencyDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GUIDANCE_FREQUENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ImageryDataLinkDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IMAGERY_DATA_LINK_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LandingSitePrimaryFrequencyDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANDING_SITE_PRIMARY_FREQUENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LandingSiteSecondaryFrequencyDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANDING_SITE_SECONDARY_FREQUENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'NavigationalAidFrequencyDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVIGATIONAL_AID_FREQUENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'PrimaryFrequencyDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_FREQUENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SecondaryFrequencyDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECONDARY_FREQUENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SpecificShipTypeType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIFIC_SHIP_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'FrequencyDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREQUENCY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{2,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="contains(@name,'AdditionalSkillIdentifierType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ADDITIONAL_SKILL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'AimpointSuffixType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIMPOINT_SUFFIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'BodyOfWaterType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BODY_OF_WATER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'CognizanceSymbolType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COGNIZANCE_SYMBOL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'CorrelationIndexType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CORRELATION_INDEX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'HfdfTaskerUnitDigraphType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HFDF_TASKER_UNIT_DIGRAPH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'InstallationTheArmyAuthorizationDocumentsType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INSTALLATION_THE_ARMY_AUTHORIZATION_DOCUMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'LineDesignatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINE_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'PersinsProcessingActivityType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSINS_PROCESSING_ACTIVITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'PersonnelGradeType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONNEL_GRADE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ReferencePointIdentifierType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REFERENCE_POINT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_THREE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{5,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CommercialAndGovernmentEntityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMERCIAL_AND_GOVERNMENT_ENTITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ContactPlotDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_PLOT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ElintNotationPrimaryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELINT_NOTATION_PRIMARY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ElintNotationSecondaryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELINT_NOTATION_SECONDARY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ElintNotationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELINT_NOTATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PlanUnitTypeCodeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLAN_UNIT_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RadioFrequencyCodeLowerLimitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADIO_FREQUENCY_CODE_LOWER_LIMIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RadioFrequencyCodeUpperLimitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADIO_FREQUENCY_CODE_UPPER_LIMIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitTypeCodeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FIVE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,14}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="contains(@name,'CargoNameTypeOrNomenclatureType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CARGO_NAME_TYPE_OR_NOMENCLATURE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ContactOriginatorType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_ORIGINATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ContactShapeType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_SHAPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'DatabaseKeyType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DATABASE_KEY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'DestinationMedicalTreatmentElementType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESTINATION_MEDICAL_TREATMENT_ELEMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'FriendlyTroopsCommentType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FRIENDLY_TROOPS_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ItemDesignationCartographicType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ITEM_DESIGNATION_CARTOGRAPHIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'MineCountermeasureOfficerInTacticalCommandOtcType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_COUNTER_MEASURE_OFFICER_IN_TACTICAL_COMMAND_OTC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'ParentMasterKeyType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARENT_MASTER_KEY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="contains(@name,'SheetType')">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHEET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{0,3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'BulkCargoWeightInLongTonsInTenthsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BULK_CARGO_WEIGHT_IN_LONG_TONS_IN_TENTHS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BulkCargoWeightInShortTonsInTenthsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BULK_CARGO_WEIGHT_IN_SHORT_TONS_IN_TENTHS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ChartedMinimumBerthingDepthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHARTED_MINIMUM_BERTHING_DEPTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumBerthingDepthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_BERTHING_DEPTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumChartedEntranceDepthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_CHARTED_ENTRANCE_DEPTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumReportedEntranceDepthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_REPORTED_ENTRANCE_DEPTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumWidthInMetersToTheTenthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_WIDTH_IN_METERS_TO_THE_TENTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OutsizeCargoWeightInLongTonsInTenthsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OUTSIZE_CARGO_WEIGHT_IN_LONG_TONS_IN_TENTHS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OutsizeCargoWeightInShortTonsInTenthsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OUTSIZE_CARGO_WEIGHT_IN_SHORT_TONS_IN_TENTHS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OversizeCargoWeightInLongTonsInTenthsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OVERSIZE_CARGO_WEIGHT_IN_LONG_TONS_IN_TENTHS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OversizeCargoWeightInShortTonsInTenthsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OVERSIZE_CARGO_WEIGHT_IN_SHORT_TONS_IN_TENTHS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PortDepthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PORT_DEPTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReportedMinimumBerthingDepthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTED_MINIMUM_BERTHING_DEPTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StraightLineDistanceInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STRAIGHT_LINE_DISTANCE_IN_NAUTICAL_MILES_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalLengthInKilometersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_LENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WeightInShortTonsInTenthsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEIGHT_IN_SHORT_TONS_IN_TENTHS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_TON_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(substring-after($min,'.'),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,13}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AirliftCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRLIFT_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EnemyUnitIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENEMY_UNIT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentStatusReportCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_STATUS_REPORT_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FriendlyUnitIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FRIENDLY_UNIT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LandingSiteCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANDING_SITE_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LeftAdjacentUnitIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEFT_ADJACENT_UNIT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrdnanceWeaponTypeNameNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORDNANCE_WEAPON_TYPE_NAME_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReportingUnitIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTING_UNIT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RequestingUnitIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUESTING_UNIT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RightAdjacentUnitIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RIGHT_ADJACENT_UNIT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,25}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'BirthplaceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BIRTHPLACE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountermeasureProgramType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNTERMEASURE_PROGRAM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CountermeasuresTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COUNTERMEASURE_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HardwareConfigurationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HARDWARE_CONFIGURATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfCountryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_COUNTRY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrdnanceWeaponTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORDNANCE_WEAPON_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RecceMissionCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECCE_MISSION_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReceivingAgencyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECEIVING_AGENCY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RefuelingCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REFUELING_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpecialConfigurationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIAL_CONFIGURATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StreetAddressType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STREET_ADDRESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TowedArraySystemTasContactInvestigationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOWED_ARRAY_SYSTEM_TAS_CONTACT_INVESTIGATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'_5UnitCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FIVE_UNIT_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AirRefuelingTrackIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_REFUELING_TRACK_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BroadcastCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BROADCAST_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BroadcastDesignator'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BROADCAST_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OperatingMomentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATING_MOMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RequestNumberOfLegType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUEST_NUMBER_OF_LEG_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeOfChaffType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_CHAFF_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitIdentificationCodeSpecificType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_IDENTIFICATION_CODE_SPECIFIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,18}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'EncryptionDeviceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENCRYPTION_DEVICE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EnemyUnitDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENEMY_UNIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfCrewCommanderOrMissionCrewDirectorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_CREW_COMMANDER_OR_MISSION_CREW_DIRECTOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReportCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORT_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SarObjectCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SAR_OBJECT_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ShipclassNavalType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_CLASS_NAVAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SoftwareReleaseType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SOFTWARE_RELEASE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StateOrProvinceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STATE_OR_PROVINCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeEwSystemType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_EW_SYSTEM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,50}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CircuitTitleType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CIRCUIT_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DutiesAndExperienceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DUTIES_AND_EXPERIENCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EntityOperatingAreaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTITY_OPERATING_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LinkManagementCodeWordMeaningType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_MANAGEMENT_CODE_WORD_MEANING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MessageSecurityClassificationOtherType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_SECURITY_CLASSIFICATION_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MilitaryCommandAuthorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MILITARY_COMMAND_AUTHORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfShipSCommandingOfficerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_SHIPS_COMMANDING_OFFICER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOrIdentificationOfControllingAgencyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OR_IDENTIFICATION_OF_CONTROLLING_AGENCY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrganizationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORGANIZATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReasonForDueHomeDateType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REASON_FOR_DUE_HOME_DATE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SkillsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SKILLS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetTypeOtherType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_TYPE_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AverageMaximumSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVERAGE_MAXIMUM_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BottomCurrentInTenthsOfKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BOTTOM_CURRENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DecorrelationWindowMultiplierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DECORRELATION_WINDOW_MULTIPLIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumPeakEbbSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_PEAK_EBB_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumPeakFloodSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_PEAK_FLOOD_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MeanPeakEbbSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEAN_PEAK_EBB_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MeanPeakFloodSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEAN_PEAK_FLOOD_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MeanSpeedInKnotsType'))">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEAN_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SandRidgeHeightInTenthsOfMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SAND_RIDGE_HEIGHT_IN_TENTHS_OF_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpeedInKnotsAtMeasurementLocationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEASUREMENT_LOCATION_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TowTimeOutOfTrackType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOW_TIME_OUT_OF_TRACK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WindowSizeMultiplierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WINDOW_SIZE_MULTIPLIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AirMissionPriorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_MISSION_PRIORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BattalionRegimentDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BATTALION_REGIMENT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CollectorTrigraphType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COLLECTOR_TRIGRAPH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GridCenterIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GRID_CENTER_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaritimeRearLinkDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MARITIME_REAR_LINK_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RegimentBrigadeDivisionDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REGIMENT_BRIGADE_DIVISION_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TacticalBattleManagementFunctionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TACTICAL_BATTLE_MANAGEMENT_FUNCTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TransferStationIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRANSFER_STATION_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrpDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRP_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{2,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AewBarrierDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AEW_BARRIER_DESIGNATOR_ALPHA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MineCountermeasureOperationSuffixType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_COUNTER_MEASURE_OPERATION_SUFFIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrganizationIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORGANIZATION_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AirfieldElevationInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRFIELD_ELEVATION_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DewpointTemperatureInDegreesCelsiusType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DEWPOINT_TEMPERATURE_IN_DEGREES_CELSIUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CELSIUS_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ElevationInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELEVATION_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HeightOfBurstInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HEIGHT_OF_BURST_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MaximumTemperatureCelsiusType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_TEMPERATURE_CELSIUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CELSIUS_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumTemperatureInDegreesCelsiusType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_TEMPERATURE_CELSIUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CELSIUS_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PhaseStartTimeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PHASE_START_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,concat('Measure',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>			
				<xsl:when test="(contains(string($fieldName),'ReportedTemperatureCelsiusType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTED_TEMPERATURE_CELSIUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CELSIUS_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReservationStartTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RESERVATION_START_TIME_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReservationStopTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RESERVATION_STOP_TIME_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TimeInMinutesRelativeToHHourType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_IN_MINUTES_RELATIVE_TO_H_HOUR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(contains($min,'-'))">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,16}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CrossReferenceCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CROSS_REFERENCE_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InternalUseCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTERNAL_USE_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NomenclatureType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NOMENCLATURE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PostStrikeAssessmentCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POST_STRIKE_ASSESSMENT_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RankOrPositionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RANK_OR_POSITION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetCallSignType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeOfCryptographicEquipmentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_CRYPTOGRAPHIC_EQUIPMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{0,2}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'EntranceLengthInKilometersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTRANCE_LENGTH_IN_KILOMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EntranceWidthInKilometersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTRANCE_WIDTH_IN_KILOMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EntranceLengthInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTRANCE_LENGTH_IN_NAUTICAL_MILES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EntranceWidthInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTRANCE_WIDTH_IN_NAUTICAL_MILES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EntranceWidthInKilometersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENTRANCE_WIDTH_IN_KILOMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleLengthInKilometersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_LENGTH_IN_KILOMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleLengthInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_LENGTH_IN_NAUTICAL_MILES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleWidthInKilometersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_WIDTH_IN_KILOMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleWidthInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_WIDTH_IN_NAUTICAL_MILES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstructionDistanceInKilometersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTRUCTION_DISTANCE_IN_KILOMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstructionDistanceInNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTRUCTION_DISTANCE_IN_NAUTICAL_MILES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StraightLineDistanceInKilometersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STRAIGHT_LINE_DISTANCE_IN_KILOMETERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(substring-after($min,'.'),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AircraftConfigurationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_CONFIGURATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AircraftRoleGeneralType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_ROLE_GENERAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AirliftRequestPriorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRLIFT_REQUEST_PRIORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AirspaceControlMeansIdentifyingDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRSPACE_CONTROL_MEANS_IDENTIFYING_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SerialNumberOfWayPointType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SERIAL_NUMBER_OF_WAYPOINT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetPriorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_PRIORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ToneKeyTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TONE_KEY_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitOrShopResponsibleForMaintenanceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_OR_SHOP_RESPONSIBLE_FOR_MAINTENANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,55}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CommandAffectedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMAND_AFFECTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CommanderOfTaskOrganizationPlainLanguageAddressPlaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMANDER_OF_TASK_ORGANIZATION_PLAIN_LANGUAGE_ADDRESS_PLA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GeneralMessageSubjectTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GENERAL_MESSAGE_SUBJECT_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfGainedFacilityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_GAINED_FACILITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OnBoardCommandsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ON_BOARD_COMMANDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PlainLanguageAddressPlaOfCollectiveType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLAIN_LANGUAGE_ADDRESS_PLA_OF_COLLECTIVE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitDesignationToScreenForType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_DESIGNATION_TO_SCREEN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{0,4}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ChartedMinimumBerthingDepthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHARTED_MINIMUM_BERTHING_DEPTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DepthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DEPTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'LengthInTenthsOfMetersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LENGTH_IN_TENTHS_OF_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MaximumBerthingDepthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_BERTHING_DEPTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MinimumChartedEntranceDepthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_CHARTED_ENTRANCE_DEPTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MinimumReportedEntranceDepthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_REPORTED_ENTRANCE_DEPTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MinimumWidthInFeetToTheTenthType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_WIDTH_IN_FEET_TO_THE_TENTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ReportedMinimumBerthingDepthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTED_MINIMUM_BERTHING_DEPTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TotalLengthInStatuteMilesType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_LENGTH_IN_STATUTE_MILES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_STATUTE_MILE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'WidthInTenthsOfMetersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIDTH_IN_TENTHS_OF_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(substring-after($min,'.'),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AreaInSquareMetersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AREA_IN_SQUARE_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_SQUARE_METER_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'AverageBackshoreWidthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVERAGE_BACKSHORE_WIDTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ContinuousUsableLengthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTINUOUS_USABLE_LENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ExitDistanceInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXIT_DISTANCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ExitWidthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXIT_WIDTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TotalAreaInSquareMetersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_AREA_IN_SQUARE_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_SQUARE_METER_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TotalLengthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_LENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'UsableLengthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_USABLE_LENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'VisibleForeshoreWidthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VISIBLE_FORESHORE_WIDTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'WidthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIDTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'NumberOfStorageUnitsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_STORAGE_UNITS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_SQUARE_METER_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'OncsEfficiencyType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ONCS_EFFICIENCY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_SQUARE_METER_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SatelliteExtendedTimeOutFramesType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SATELLITE_EXTENDED_TIMEOUT_FRAMES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat($MTF_SQUARE_METER_MEASURE,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
			</xsl:choose>
			
			<xsl:if test="not(contains(string($fieldName),'Context'))">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>

			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AzimuthOrientationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AZIMUTH_ORIENTATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'BearingOfMajorAxisType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BEARING_OF_MAJOR_AXIS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DirectionInDegreesTrueOfCurrentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIRECTION_IN_DEGREES_TRUE_OF_CURRENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DirectionOfPeakEbbSpeedInDegreesTrueType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIRECTION_OF_PEAK_EBB_SPEED_IN_DEGREES_TRUE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DirectionOfPeakFloodSpeedType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIRECTION_OF_PEAK_FLOOD_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ErrorAngleInDegreesRelativeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ERROR_ANGLE_IN_DEGREES_RELATIVE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ReferenceLineRotationInRelativeBearingType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REFERENCE_LINE_ROTATION_IN_RELATIVE_BEARING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SurfaceWindDirectionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_WIND_DIRECTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TrackRotationRelativeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_ROTATION_RELATIVE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'WindDirectionInDegreesType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIND_DIRECTION_IN_DEGREES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,11}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AirliftScheduleCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRLIFT_SCHEDULE_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'LaneDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANE_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ParentUnitOneType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARENT_UNIT_ONE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ParentUnitTwoType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARENT_UNIT_TWO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PersonnelIdentificationNumberOfDeceasedType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONNEL_IDENTIFICATION_NUMBER_OF_DECEASED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ReportingMedicalTreatmentElementType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTING_MEDICAL_TREATMENT_ELEMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SpecialCargoCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIAL_CARGO_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ChaffCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHAFF_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'LandingSiteContactCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LANDING_SITE_CONTACT_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MissionNumberSupportedType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_NUMBER_SUPPORTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'OtherSarMissionActivityCommentsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_SAR_MISSION_ACTIVITY_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TransportationRequirementIdentificationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRANSPORTATION_REQUIREMENT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'EffectiveTimeOnTaskInTheLapInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EFFECTIVE_TIME_ON_TASK_IN_THE_LAP_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MineCountermeasureUnitSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_COUNTER_MEASURE_UNIT_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PlanSpeedKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLAN_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TidalAmountInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIDAL_AMOUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TimeOfFlightInSecondsToTheTenthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_OFF_LIGHT_IN_SECONDS_TO_THE_TENTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_SECOND_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalOffloadFuelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_OFF_LOAD_FUEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WaterConductivityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WATER_CONDUCTIVITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MILLI_MHOS_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:if test="(contains($min,'.'))">
							<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
						</xsl:if>
						
						<xsl:if test="(not(contains($min,'.')))">
							<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
						</xsl:if>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	
	<!-- Requires Naming Resolution -->
	<xsl:template match="xsd:pattern[@value='[0-9]{1,4}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
					
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DistanceInNauticalMilesFromAQRoutePointType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_IN_NAUTICAL_MILES_FROM_AQ_ROUTE_POINT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DistanceInNauticalMilesFromFinishPointType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_IN_NAUTICAL_MILES_FROM_FINISH_POINT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DistanceInNauticalMilesFromStartPointType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_IN_NAUTICAL_MILES_FROM_START_POINT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DiveSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DIVE_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RevolutionsPerMinuteType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REVOLUTIONS_PER_MINUTE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpeedInKnotsDecimalPtPermittedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPEED_TYPE_PATTERN,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SurfaceSpeedInKnotsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_SPEED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TimeDurationInHoursType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_DURATION_IN_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(compare($min,'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CargoCategoryTypeCodeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CARGO_CATEGORY_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CollectorDigraphType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COLLECTOR_DIGRAPH_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NetIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NET_IDENTIFIER_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PostalFootnoteCodesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_POSTAL_FOOTNOTE_CODES_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpaceObjectPriorityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPACE_OBJECT_PRIORITY_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrackRegionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_REGION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{6,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'Category4EquipmentLineItemNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CATEGORY_4_EQUIPMENT_LINE_ITEM_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NonreportableLineItemNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NON_REPORTABLE_LINE_ITEM_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReceiverCoordinationIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECEIVER_COORDINATION_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TankerCoordinationIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TANKER_COORDINATION_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,28}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AlternateOtcCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTERNATE_OTC_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ClassTypeNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CLASS_TYPE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ConvoyCommodoreCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONVOY_COMMODORE_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ConvoyViceCommodoreCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONVOY_VICE_COMMODORE_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'NavalForceCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVAL_FORCE_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'OtcCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTC_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,40}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'ActionAddresseeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACTION_ADDRESSEE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AddressResidentialType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ADDRESS_RESIDENTIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AircraftUnitDesignationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_UNIT_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DutyOtherType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DUTY_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InfoAddresseeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INFO_ADDRESSEE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'JtidsPlatformTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_JTIDS_PLATFORM_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ManufacturerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MANUFACTURER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ObstacleCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OBSTACLE_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TlamEventType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TLAM_EVENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,54}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AssemblyAreaTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ASSEMBLY_AREA_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CollateralDamageDescriptionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COLLATERAL_DAMAGE_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PlaceNameExtendedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLACE_NAME_EXTENDED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RegisteredOwnerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REGISTERED_OWNER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TitleOfDocumentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TITLE_OF_DOCUMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="PlaceNameExtendedType"><xsl:value-of select="concat($MTF_PLACE_NAME_EXTENDED_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-7]{4,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DataLinkTrackNumber0200To7776Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DATA_LINK_TRACK_NUMBER_0200_TO_7776_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_FOUR_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DiscreteIdentifierCodeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISCRETE_IDENTIFIER_CODE_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_FOUR_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Link1111BTrackNumberBlockLowerLimitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_1111B_TRACK_NUMBER_BLOCK_LOWER_LIMIT_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_FOUR_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Link1111BTrackNumberBlockUpperLimitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_1111B_TRACK_NUMBER_BLOCK_UPPER_LIMIT_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_FOUR_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_FOUR_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,7}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1}|[0-9]{5}\.[0-9]{1}|[0-9]{6}\.[0-9]{1}|[0-9]{7}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AverageBackshoreWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVERAGE_BACK_SHORE_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ContinuousUsableLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTINUOUS_USABLE_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ExitDistanceInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXIT_DISTANCE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ExitWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXIT_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TotalLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UsableLengthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_USABLE_LENGTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'VisibleForeshoreWidthInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VISIBLE_FORE_SHORE_WIDTH_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($MTF_ONE,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'NetInUseIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NET_IN_USE_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SetInUseIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SET_IN_USE_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TacanChannelSpecialType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TACAN_CHANNEL_SPECIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{12,12}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AirRefuelingEventKeyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_REFUELING_EVENT_KEY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWELVE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AmcMissionUniqueKeyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AMC_MISSION_UNIQUE_KEY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWELVE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ExploitationRequirementIdentificationNumberTerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXPLOITATION_REQUIREMENT_IDENTIFICATION_NUMBER_TER_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWELVE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissionIdentificationNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_IDENTIFICATION_NUMBER_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWELVE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWELVE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AltitudeInMetersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTITUDE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_NEGATIVE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'BeaconElevationInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BEACON_ELEVATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_NEGATIVE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DropZoneElevationInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DROP_ZONE_ELEVATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_NEGATIVE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ElevationInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELEVATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_NEGATIVE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'GroundZeroAltitudeInMetersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GROUND_ZERO_ALTITUDE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_NEGATIVE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MaximumAltitudeInMetersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_ALTITUDE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_NEGATIVE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MinimumAltitudeInMetersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_ALTITUDE_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_NEGATIVE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(contains($min,'-'))">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="((string-length($min) &gt; 1) and not(contains($min,'-')))">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Percent'))">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_NEGATIVE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_FOUR_DIGIT_TYPE_PATTERN,concat($MTF_NEGATIVE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
			
			<!--<xsl:if test="(contains($min,'-') and not(contains(string($fieldName),'Context')))">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
			</xsl:if>-->
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-7]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:if test="string-length($min) > 0 and string-length($max) > 0">
				<xsl:choose>
					<xsl:when test="(compare($fieldName,'BasicBlockRecurrenceRateModifierType')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BASIC_BLOCK_RECURRENCE_RATE_MODIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_ONE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					</xsl:when>
					<xsl:when test="(compare($fieldName,'DeletionThresholdType')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DELETION_THRESHOLD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_ONE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					</xsl:when>
					<xsl:when test="(compare($fieldName,'HopCountThresholdType')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOP_COUNT_THRESHOLD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_ONE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					</xsl:when>
					<xsl:when test="(contains(string($fieldName),'Context'))">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OCTAL_ONE_DIGIT_TYPE_PATTERN,concat('Quantity',$MTF_SIMPLE_TYPE))"/></xsl:attribute>
					</xsl:when>
					<xsl:otherwise>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_ONE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'NumberOfSerialType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_SERIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOfTargetsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_OF_TARGETS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RadiusInMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADIUS_IN_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ScaleOfPrintsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SCALE_OF_PRINTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetSignalIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_SIGNAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare(string($min),'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="(compare(string($min),'2')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="number($min) &gt; 2">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
					<xsl:if test="string-length($min) &gt; 1">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($min,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<!--<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>-->
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[1-9]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DaysMetMessageSupportRequestedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAYS_MET_MESSAGE_SUPPORT_REQUESTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DAY_MEASURE,concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitResponseTimeInMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_RESPONSE_TIME_IN_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AllocationCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALLOCATION_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>	
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HfCircuitLineDesignatorPrimaryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HF_CIRCUIT_LINE_DESIGNATOR_PRIMARY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UhfCircuitLineDesignatorPrimaryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UHF_CIRCUIT_LINE_DESIGNATOR_PRIMARY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'VhfCircuitLineDesignatorPrimaryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VHF_CIRCUIT_LINE_DESIGNATOR_PRIMARY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,17}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AllocationCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALLOCATION_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CallSignOfSarUnitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CALL_SIGN_OF_SAR_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CommunicationChannelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATION_CHANNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EmbarkCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMBARK_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ForceAllotmentCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FORCE_ALLOTMENT_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PersonnelCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERSONNEL_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,23}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'BcstHeaderFromType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BCST_HEADER_FROM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'BcstHeaderToType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BCST_HEADER_TO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeVehicleType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_VEHICLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,9}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AlternateRadioCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTERNATE_RADIO_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'CategoryOfSpecialInterestCargoType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CATEGORY_OF_SPECIAL_INTEREST_CARGO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MapOrChartScaleType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAP_OR_CHART_SCALE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MilitaryRankRatingOrGradeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MILITARY_RANK_RATING_OR_GRADE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'RunwayCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RUNWAY_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SpecialC2HeadquartersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIAL_C2_HEADQUARTERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,20}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'PlanOriginatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLAN_ORIGINATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TurnSystemType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TURN_SYSTEM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WeaponSystemType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEAPON_SYSTEM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{3,11}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AllowancePartsListNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALLOWANCE_PARTS_LIST_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GmfHubTerminalIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GMF_HUB_TERMINAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GmfNodeTerminalIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GMF_NODE_TERMINAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GmfSatelliteTerminalIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GMF_SATELLITE_TERMINAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'GmfSpokeTerminalIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GMF_SPOKE_TERMINAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReceivingTerminalIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECEIVING_TERMINAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TransmittingTerminalIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRANSMITTING_TERMINAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-7]{3,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DataLinkTrackNumber001To076Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DATA_LINK_TRACK_KNUMBER_001_TO_076_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_THREE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'DataLinkTrackNumber100To175Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DATA_LINK_TRACK_NUMBER_100_TO_175_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_THREE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrackNumberReferenceSubset3Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_NUMBER_REFERENCE_SUBSET_3_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_THREE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_THREE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,4}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'TidalAmountInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIDAL_AMOUNT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TotalFlightTimeInHoursType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_FLIGHT_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TotalFuelQuantityRequiredInThousandsOfPoundsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_FUEL_QUANTITY_REQUIRED_IN_THOUSANDS_OF_POUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_POUND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TransmissionPowerInWattsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRANSMISSION_POWER_IN_WATTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_WATT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,12}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CherryPointOperatingAreaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CHERRY_POINT_OPERATING_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FilterDescriptionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FILTER_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ImageryPlatformTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IMAGERY_PLATFORM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TankerReceiverLegMissionIdentificationNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TANKER_RECEIVER_LEG_MISSION_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{2,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AircraftTypeAndModelOtherType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_TYPE_AND_MODEL_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AirspaceUsageOtherType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRSPACE_USAGE_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'OrdnanceWeaponTypeLiteralType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORDNANCE_WEAPON_TYPE_LITERAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReportingOrganizationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTING_ORGANIZATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeOfAcmOtherType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_ACM_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MilitaryOccupationalSpecialtyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MILITARY_OCCUPATIONAL_SPECIALTY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RadiationStatusIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADIATION_STATUS_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SecureVoiceEquipmentTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECURE_VOICE_EQUIPMENT_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,12}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AverageApproachGradientType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVERAGE_APPROACH_GRADIENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'CenterFlankApproachGradientType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CENTER_FLANK_APPROACH_GRADIENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LeftFlankApproachGradient'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEFT_FLANK_APPROACH_GRADIENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RightFlankApproachGradientType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RIGHT_FLANK_APPROACH_GRADIENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetSystemType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_SYSTEM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,1}|(AA|BB|CC|DD|EE|FF|GG|HH|II|JJ|KK|LL|MM|NN|OO|PP|QQ|RR|SS|TT|UU|VV|WW|XX|YY|ZZ)']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AircraftVariantType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_VARIANT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'AlphabeticIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALPHABETIC_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'McmBuoySequentialIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MCM_BUOY_SEQUENTIAL_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RemarkIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMARK_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SectorLetterType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECTOR_LETTER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:variable name="DescriptionTwentyCharRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,20}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$DescriptionTwentyCharRegExPattern]">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ControlPointDescriptionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTROL_POINT_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NINETEEN_CHAR_DESCRIPTION_TEXT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'GroundTargetCommentsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GROUND_TARGET_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NINETEEN_CHAR_DESCRIPTION_TEXT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MarkerDescriptionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MARKER_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NINETEEN_CHAR_DESCRIPTION_TEXT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TargetDescriptionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NINETEEN_CHAR_DESCRIPTION_TEXT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TargetElementDescriptionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_ELEMENT_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NINETEEN_CHAR_DESCRIPTION_TEXT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TrpDescriptionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRP_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NINETEEN_CHAR_DESCRIPTION_TEXT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NINETEEN_CHAR_DESCRIPTION_TEXT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,21}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'HigherEchelonDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HIGHER_ECHELON_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'HigherFormationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HIGHER_FORMATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MovementAndAawAxisCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MOVEMENT_AND_AAW_AXIS_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ParentUnitDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PARENT_UNIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UniqueSymbolDesignationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIQUE_SYMBOL_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UnitIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,9}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CubicMetersOnHandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CUBIC_METERS_ON_HAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CUBIC_METER_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'QuantityOnHandIncludingUblRoundsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_QUANTITY_ON_HAND_INCLUDING_UBL_ROUNDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'StorageCapacityInCubicMetersType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STORAGE_CAPACITY_IN_CUBIC_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CUBIC_METER_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SymbolQuantityOfEquipmentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SYMBOL_QUANTITY_OF_EQUIPMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetItemCategoryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_ITEM_CATEGORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				
				
				<!--<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'0')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($minLength),'1')=0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>-->
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'DistanceInKilometersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_TYPE,concat($MTF_TWO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DistanceToTargetInKilometersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_TO_TARGET_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MediumFieldOfViewInKilometersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MEDIUM_FIELD_OF_VIEW_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'NarrowFieldOfViewInKilometersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NARROW_FIELD_OF_VIEW_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'WideFieldOfViewInKilometersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIDE_FIELD_OF_VIEW_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOMETER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'FlightTimeInHoursAndTenthsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FLIGHT_TIME_IN_HOURS_AND_TENTHS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MaximumRateOfFireInRoundsPerWeaponPerMinuteType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_RATE_OF_FIRE_IN_ROUNDS_PER_WEAPON_PER_MINUTE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'OpTowTimeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OP_TOW_TIME_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SustainedRateOfFireInRoundsPerWeaponPerMinuteType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUSTAINED_RATE_OF_FIRE_IN_ROUNDS_PER_WEAPON_PER_MINUTE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ContextQuantity4CharactersWithDecimalPtType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
				<!--<xsl:when test="(not(contains(string($fieldName),'Context') and contains($min,'.') or contains($max, '.')))">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>-->
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AltimeterSettingInHundredthsOfInchesOfMercuryType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTIMETER_SETTING_IN_HUNDREDTHS_OF_INCHES_OF_MERCURY_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_INCH_MEASURE,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'BarometricPressureInchesOfMercuryType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BAROMETRIC_PRESSURE_INCHES_OF_MERCURY_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_INCH_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SixHourPrecipitationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SIX_HOUR_PRECIPITATION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TwentyFourHourPrecipitationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TWENTY_FOUR_HOUR_PRECIPITATION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TwentyFourHourSnowDepthType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TWENTY_FOUR_HOUR_SNOW_DEPTH_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains($min,'.') or contains($max, '.'))">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{7}\.[0-9]{1}|[0-9]{6}\.[0-9]{2}|[0-9]{5}\.[0-9]{3}|[0-9]{4}\.[0-9]{4}|[0-9]{8}\.[0-9]{1}|[0-9]{7}\.[0-9]{2}|[0-9]{6}\.[0-9]{3}|[0-9]{5}\.[0-9]{4}|[0-9]{9}\.[0-9]{1}|[0-9]{8}\.[0-9]{2}|[0-9]{7}\.[0-9]{3}|[0-9]{6}\.[0-9]{4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'PulseRepetitionIntervalAverageInMicrosecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_REPETITION_INTERVAL_AVERAGE_IN_MICROSECONDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat($MTF_EIGHT,concat('To',concat($max,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PulseRepetitionIntervalInMicrosecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_REPETITION_INTERVAL_IN_MICROSECONDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat($MTF_EIGHT,concat('To',concat($max,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PulseRepetitionIntervalLowerLimitInMicrosecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_REPETITION_INTERVAL_LOWER_LIMIT_IN_MICROSECONDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat($MTF_EIGHT,concat('To',concat($max,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PulseRepetitionIntervalStandardDeviationInMicrosecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_REPETITION_INTERVAL_STANDARD_DEVIATION_IN_MICROSECONDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat($MTF_EIGHT,concat('To',concat($max,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PulseRepetitionIntervalUpperLimitInMicrosecondsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_REPETITION_INTERVAL_UPPER_LIMIT_IN_MICROSECONDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat($MTF_EIGHT,concat('To',concat($max,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[1-4]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'NumberOfAircraftSadlType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_AIRCRAFT_SADL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfArmThrustsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_ARM_THRUSTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NumberOfFlightsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_FLIGHTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[1-5]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'ConsecutiveDecorrelationsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONSECUTIVE_DECORRELATIONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ElintNotationConfidenceSecondaryType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELINT_NOTATION_CONFIDENCE_SECONDARY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MinimumGeodeticPositionQualityQpgType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_GEODETIC_POSITION_QUALITY_QPG_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetPriorityAbbreviatedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_PRIORITY_ABBREVIATED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'BatteryCompanyDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BATTERY_COMPANY_DESIGNATOR_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'OneCharacterProducerCodeSequenceNumberType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ONE_CHARACTER_PRODUCER_CODE_SEQUENCE_NUMBER_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PlatoonDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLATOON_DESIGNATOR_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SectionDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECTION_DESIGNATOR_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{4,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'CodeDayNumberType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CODE_DAY_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'EquipmentPlanIdentificationNumberType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_PLAN_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PlanIdentificationNumberType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLAN_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>	
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{5,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ReconnaissanceOperatingAreaType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECONNAISSANCE_OPERATING_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FIVE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TrackIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FIVE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FIVE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{4,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'BroadcastChannelType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BROADCAST_CHANNEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FOUR,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'CommonBroadcastType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMON_BROADCAST_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FOUR,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PrimaryBroadcastType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_BROADCAST_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FOUR,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SecondaryBroadcastType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECONDARY_BROADCAST_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FOUR,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FOUR,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,19}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DepthDeterminationMeans'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DEPTH_DETERMINATION_MEANS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfAssetsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_ASSETS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RadioCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADIO_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RendezvousCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RENDEZVOUS_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ShipPositionAndMovementCommentsTyp'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_POSITION_AND_MOVEMENT_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,35}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CommercialManufacturerSPartNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMERCIAL_MANUFACTURERS_PART_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NetUsageOrAmplifyingInstructionsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NET_USAGE_OR_AMPLIFYING_INSTRUCTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UniqueBoundaryDesignation1Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIQUE_BOUNDARY_DESIGNATION_1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UniqueBoundaryDesignation2Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIQUE_BOUNDARY_DESIGNATION_2_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AirTaskUnitIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_TASK_UNIT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,20}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'CommunicationsPlanDesignationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATIONS_PLAN_DESIGNATION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'EffectivePublicationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EFFECTIVE_PUBLICATION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MessageTextFormatIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_TEXT_FORMAT_IDENTIFIER_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'OrdnanceFuzeTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORDNANCE_FUZE_TYPE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'SoftwareVersionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SOFTWARE_VERSION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,15}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CompositeAirOperationsComaoIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMPOSITE_AIR_OPERATIONS_COMAO_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MineMarkModType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_MARK_MOD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NetworkParticipantIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NETWORK_PARTICIPANT_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
			
			<xsl:if test="(compare($minLength,'1') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{0,5}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AverageWidthInMetersToTheTenthType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVERAGE_WIDTH_IN_METERS_TO_THE_TENTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DistanceFromOriginInTenthsOfMetersType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_FROM_ORIGIN_IN_TENTHS_OF_METERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'LengthInTenthsOfFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LENGTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'WidthInTenthsOfFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WIDTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'BearingErrorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BEARING_ERROR_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ONE,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ProcessorIntegrationTimeSinceDetectionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROCESSOR_INTEGRATION_TIME_SINCE_DETECTION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat($MTF_DECIMAL,$MTF_TENTHS,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TimeInStateInMinutesType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_IN_STATE_IN_MINUTES_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,concat($MTF_ONE,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat($max,concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MaximumQualificationRawScoreType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_QUALIFICATION_RAW_SCORE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($min,concat('To',concat($max,concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,5}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DistanceNauticalMilesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_NAUTICAL_MILES_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NAUTICAL_MILE_MEASURE,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>	
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:if test="(compare($min,'0')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>	
					</xsl:if>
					<xsl:if test="(compare(substring-after($min,'.'),'1')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{10,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CommercialStuIiiExtensionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMERCIAL_STU_III_EXTENSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(string-length(string($length)) &gt; 0)">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TEN_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'PulseDurationAverageInMicrosecondsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_DURATION_AVERAGE_IN_MICROSECONDS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PulseDurationLowerLimitInMicrosecondsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_DURATION_LOWER_LIMIT_IN_MICROSECONDS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PulseDurationStandardDeviationInMicrosecondsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_DURATION_STANDARD_DEVIATION_IN_MICROSECONDS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PulseDurationUpperLimitInMicrosecondsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_DURATION_UPPER_LIMIT_IN_MICROSECONDS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>

			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,15}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'InitialPointIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INITIAL_POINT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TechnicalOrderForPartType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TECHNICAL_ORDER_FOR_PART_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_LINE_NUMBER_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AntiAirWarfareCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANTI_AIR_WARFARE_CALL_SIGN_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'FormatIndexLetterType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FORMAT_INDEX_LETTER_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ReferenceSetSerialLetterType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REFERENCE_SET_SERIAL_LETTER_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SearchEffortIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEARCH_EFFORT_IDENTIFIER_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[AEGHJ-M]{2,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'Link1ReportingUnitRuType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_1_REPORTING_UNIT_RU_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'Link1TrackNumberBlockEndType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_1_TRACK_NUMBER_BLOCK_END_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'Link1TrackNumberBlockStartType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_1_TRACK_NUMBER_BLOCK_START_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE,concat($length,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z ]{1,20}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AliasType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALIAS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'FirstGivenNameOfAPersonType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FIRST_GIVEN_NAME_OF_A_PERSON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SecondGivenNameOfAPersonType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECOND_GIVEN_NAME_OF_A_PERSON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ThirdGivenNameOfAPersonType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THIRD_GIVEN_NAME_OF_A_PERSON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,26}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ArrestingGearCommentsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ARRESTING_GEAR_COMMENTS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'AttgNbrgCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ATTG_NBRG_COMMENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DesiredMeanPointOfImpactCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESIRED_MEAN_POINT_OF_IMPACT_COMMENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TargetDescriptionCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_DESCRIPTION_COMMENT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
			<!--<xsl:if test="(compare($minLength,'1') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>-->
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,32}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'OperationCodewordType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATION_CODE_WORD_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PeriodDiplomaticClearanceValidType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERIOD_DIPLOMATIC_CLEARANCE_VALID_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'UserMessageFormatOtherType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_USER_MESSAGE_FORMAT_OTHER_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'RankOrGradeOfDeceasedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RANK_OR_GRADE_OF_DECEASED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RequestCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUEST_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'XAxisGridReferenceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_X_AXIS_GRID_REFERENCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'YAxisGridReferenceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_Y_AXIS_GRID_REFERENCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,55}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'DerivativeSourceForClassificationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DERIVATIVE_SOURCE_FOR_CLASSIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DestinationUnitsPlainLanguageAddressPlaType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESTINATION_UNITS_PLAIN_LANGUAGE_ADDRESS_PLA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'OriginalClassificationAuthorityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORIGINAL_CLASSIFICATION_AUTHORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AirdropCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRDROP_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'EwCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EW_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'NavalFireSupportStationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVAL_FIRE_SUPPORT_STATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,61}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'DeclassificationInstructionsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DECLASSIFICATION_INSTRUCTIONS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DowngradeInstructionsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DOWNGRADE_INSTRUCTIONS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'GentextTextIndicatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GENTEXT_TEXT_INDICATOR_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'LegCommentsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LEG_COMMENTS_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{4,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:if test="(compare($minLength,'4') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ZoneOfFireResponsibilityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ZONE_OF_FIRE_RESPONSIBILITY_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{0}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(compare(string($fieldName),'ContextQuantityDecimalPtRequiredType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'LatitudeDecisecondAngularType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LATITUDE_DECISECOND_ANGULAR_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DESI_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($fieldName),'LongitudeDecisecondAngularType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LONGITUDE_DECISECOND_ANGULAR_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DESI_SECOND_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'MineNeutralizationEffortToBeAttainedPercentageType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_NEUTRALIZATION_EFFORT_TO_BE_ATTAINED_PERCENTAGE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PercentageOfMcmRequiredOrAccomplishedType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_OF_MCM_REQUIRED_OR_ACCOMPLISHED_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SafelaneNeutralizationAccomplishedPercentageType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SAFE_LANE_NEUTRALIZATION_ACCOMPLISHED_PERCENTAGE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,4}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'RadiationDecayRateType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADIATION_DECAY_RATE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,6}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'EstimatedNuclearYieldInKilotonsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUCLEAR_YIELD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOTON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NuclearYieldInKilotonsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUCLEAR_YIELD_IN_KILOTONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KILOTON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ProbabilityOfClassificationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROBABILITY_OF_CLASSIFICATION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ProbabilityOfReacquisitionOfMineType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROBABILITY_OF_REACQUISITION_OF_MINE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ProbabilityOfUndetectionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROBABILITY_OF_UNDETECTION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>

			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'PassiveSonarFrequencyIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PASSIVE_SONAR_FREQUENCY_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RelayDeviceIdentificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RELAY_DEVICE_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SensorIdentificationNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SENSOR_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AxisOrientationInDegreesToTheTenthType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AXIS_ORIENTATION_IN_DEGREES_TO_THE_TENTH_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'McmUnitCourseTrueType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MCM_UNIT_COURSE_TRUE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'OrientationTrueInDegreesToTheTenthType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORIENTATION_TRUE_IN_DEGREES_TO_THE_TENTH_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DownlinkFrequencyInMhzType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DOWN_LINK_FREQUENCY_IN_MHZ_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UhfFrequencyInMhzType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UHF_FREQUENCY_IN_MHZ_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UplinkFrequencyInMhzType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPLINK_FREQUENCY_IN_MHZ_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MEGAHERTZ_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{4,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AirToAirTacanSettingsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_TO_AIR_TACAN_SETTINGS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($minLength),concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ElevatedDuctAltitudeInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELEVATED_DUCT_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'EvaporativeDuctHeightInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EVAPORATIVE_DUCT_HEIGHT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{4,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MinefieldDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINEFIELD_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{9,9}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MrsCalibrationDataType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MRS_CALIBRATION_DATA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ZipApoType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ZIP_APO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_NINE_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0]{1}\.[0-9]{1}|[0]{1}\.[0-9]{2}|[0]{1}\.[0-9]{3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'FractionOfUndetectedMineType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FRACTION_OF_UNDETECTED_MINE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ProbabilityOfClassificationPercentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROBABILITY_OF_CLASSIFICATION_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ProbabilityOfNeutralizationPercentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROBABILITY_OF_NEUTRALIZATION_PERCENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENT_TYPE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{1,18}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
				<xsl:variable name="fieldName" select="@name"/>
				<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
				<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
				
				<xsl:choose>
					<xsl:when test="(compare($fieldName,'MissionNicknameType')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_NICKNAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					</xsl:when>
					<xsl:when test="(compare($fieldName,'NewNicknameType')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NEW_NICKNAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					</xsl:when>
					<xsl:when test="(compare($fieldName,'OldNicknameType')=0)">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OLD_NICKNAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					</xsl:when>
					<xsl:otherwise>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					</xsl:otherwise>
				</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{1,50}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'MessageSecurityCategoryType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_SECURITY_CATEGORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MessageSecurityPolicyType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_SECURITY_POLICY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{1,30}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'CircuitNameInOrderOfPrioritiesType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CIRCUIT_NAME_IN_ORDER_OF_PRIORITIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'CoordinationCircuitTitleType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COORDINATION_CIRCUIT_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'LocalCommandType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOCAL_COMMAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{1,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'BattlefieldGeometryTypeNameType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BATTLE_FIELD_GEOMETRY_TYPE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'EquipmentModelCommonType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_MODEL_COMMON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'UnitOperatingMissionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_OPERATING_MISSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{10,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ExploitationRequirementIdentificationNumberType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXPLOITATION_REQUIREMENT_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TEN,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ObUnitIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OB_UNIT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TEN,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TEN,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{2,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'MilitaryLoadClassificationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MILITARY_LOAD_CLASSIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{2,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'NavigationAidIdentifierCodeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVIGATION_AID_IDENTIFIER_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'RankOfCommanderType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RANK_OF_COMMANDER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{7,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_SEVEN,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{5,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'HighPrecedenceRoutingIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HIGH_PRECEDENCE_ROUTING_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FIVE,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LowPrecedenceRoutingIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOW_PRECEDENCE_ROUTING_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FIVE,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RoutingIndicatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ROUTING_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FIVE,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FIVE,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'EarthHemisphereAndGridZoneDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EARTH_HEMISPHERE_AND_GRID_ZONE_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SurfaceAirTemperatureUnspecifiedUnitOfMeasureType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_AIR_TEMPERATURE_UNSPECIFIED_UNIT_OF_MEASURE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_UNSPECIFIED_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{4,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'MaximumPressureAltitudeInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_PRESSURE_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MaximumDensityAltitudeInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_DENSITY_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(not(contains(string($fieldName),'Context')) and contains($min,'-'))">
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:variable name="RouteWeatherOrSarCommentRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,10}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$RouteWeatherOrSarCommentRegExPattern]">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minILength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
		
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'RouteCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ROUTE_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SarMissionReportCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SAR_MISSION_REPORT_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WeatherCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEATHER_COMMENTS_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:variable name="CommentsOrInstructionsRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,68}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$CommentsOrInstructionsRegExPattern]">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minILength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ContactInstructionsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_INSTRUCTIONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WeaponControlAncillaryInformation'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEAPON_CONTROL_ANCILLARY_INFORMATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z ]{1,25}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'NameIndividualType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_INDIVIDUAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PhoneticSpellingOfSurnameType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_PHONETIC_SPELLING_OFSURNAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SurnameOfPersonType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURNAME_OF_PERSON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,33}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'LocationAmplificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOCATION_AMPLIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SamUnitLocationCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SAM_UNIT_LOCATION_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'VipCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VIP_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,36}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DeliveryCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DELIVERY_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RendezvousLocationCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RENDEZVOUS_LOCATION_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SortieCommentType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SORTIE_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,60}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'ContactInformationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_INFORMATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PalletCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PALLET_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RelatedDataEntryCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RELATED_DATA_ENTRY_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{10,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DocumentNumberOfOrderedPartType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORDERED_PART_DOCUMENT_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TEN,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MtoeIdentificationNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MTOE_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TEN,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TdaIdentificationNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TDA_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TEN,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TEN,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
			
			<xsl:if test="(compare($length,'10') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TEN,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AircraftTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_TYPE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'NonNatoAircraftTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NON_NATO_AIRCRAFT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SubmarineReadingRoutineSlotType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBMARINE_READING_ROUTINE_SLOT_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'EnemyWeaponType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENEMY_WEAPON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MajorArmyCommandType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAJOR_ARMY_COMMAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TacanNomenclatureType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TACAN_NOMENCLATURE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{4,20}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:if test="(compare($minLength,'4') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{8,20}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'PrimaryBroadcastKeymatType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_BROADCAST_KEYMAT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($minLength,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SecondaryBroadcastKeymatType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECONDARY_BROADCAST_KEYMAT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($minLength,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ShipShoreKeymat')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_SHORE_KEYMAT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($minLength,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($minLength,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,12}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MapOrChartSeriesDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAP_OR_CHART_SERIES_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SpecificTypeOfTrackType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIFIC_TYPE_OF_TRACK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,14}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AutomatedTacticalTargetGraphicType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTOMATED_TACTICAL_TARGET_GRAPHIC_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'DesignationOfEnemyUnitType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESIGNATION_OF_ENEMY_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'FrequencyShiftConverterTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREQUENCY_SHIFT_CONVERTER_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{3,12}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'RequiredItemEquipmentShortTitleType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUIRED_ITEM_EQUIPMENT_SHORT_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ShortTitleType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHORT_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-1]{1}\.[0-9]{1}|\.[0-9]{2}|[0-1]{1}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ProbabilityOfNeutralizationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PROBABILITY_OF_NEUTRALIZATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'WorksheetProbabilityOfDetectionOrActuationBType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WORKSHEET_PROBABILITY_OF_DETECTIONOR_ACTUATIONB_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-5]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'LatitudeIndicatorMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LATITUDE_INDICATOR_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LongitudeIndicatorMinutesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LONGITUDE_INDICATOR_MINUTES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-7A-HJ-NP-Z]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'TrackNumberReferenceSubset1Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_NUMBER_REFERENCE_SUBSET_1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TrackNumberReferenceSubset2Type'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_NUMBER_REFERENCE_SUBSET_2_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-7]{2,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:if test="string-length($min) > 0 and string-length($max) > 0">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_OCTAL_TWO_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{0,6}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AverageWidthInFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AVERAGE_WIDTH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'DistanceFromOriginInTenthsOfFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISTANCE_FROM_ORIGIN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,11}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AreaInSquareFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AREA_SQUARED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'TotalAreaInSquareFeetType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_AREA_SQUARED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,11}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6}|\.[0-9]{7}|[0-9]{7}\.[0-9]{1}|[0-9]{6}\.[0-9]{2}|[0-9]{5}\.[0-9]{3}|[0-9]{4}\.[0-9]{4}|[0-9]{3}\.[0-9]{5}|[0-9]{2}\.[0-9]{6}|[0-9]{1}\.[0-9]{7}|\.[0-9]{8}|[0-9]{8}\.[0-9]{1}|[0-9]{7}\.[0-9]{2}|[0-9]{6}\.[0-9]{3}|[0-9]{5}\.[0-9]{4}|[0-9]{4}\.[0-9]{5}|[0-9]{3}\.[0-9]{6}|[0-9]{2}\.[0-9]{7}|[0-9]{1}\.[0-9]{8}|\.[0-9]{9}|[0-9]{9}\.[0-9]{1}|[0-9]{8}\.[0-9]{2}|[0-9]{7}\.[0-9]{3}|[0-9]{6}\.[0-9]{4}|[0-9]{5}\.[0-9]{5}|[0-9]{4}\.[0-9]{6}|[0-9]{3}\.[0-9]{7}|[0-9]{2}\.[0-9]{8}|[0-9]{1}\.[0-9]{9}|\.[0-9]{10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>	
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_ELEVEN_DIGIT_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(string($max),concat($MTF_DECIMAL,concat('Quantity',$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PulseRepetitionFrequencyNatoType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_REPETITION_FREQUENCY_NATO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_SECOND_MEASURE,concat($MTF_ONE,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ELEVEN_DIGIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
		
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'TimeInReconnaissanceReportingAreaType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_IN_RECONNAISSANCE_REPORTING_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENTAGE_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,4}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(compare(string($min),'0')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WATER_DEPTH_IN_METERS_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare(string($min),'1')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'SweepOrDetectionProbabilityType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SWEEP_OR_DETECTION_PROBABILITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'LatitudeMinutes04DecimalPlacesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LATITUDE_MINUTES_04_DECIMAL_PLACES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_LAT_LONG_MINUTE_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat(string-length(substring-after($max,'.')),$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'LongitudeMinutes04DecimalPlacesType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LONGITUDE_MINUTES_04_DECIMAL_PLACES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_LAT_LONG_MINUTE_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat(string-length(substring-after($max,'.')),$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat(string-length(substring-after($max,'.')),$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'PercentageClearanceRequiredOrAchieved'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_CLEARANCE_REQUIRED_OR_ACHIEVED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENTAGE_TYPE_PATTERN,concat($min,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'WetBulbGlobeTempIndexType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WET_BULB_GLOBE_TEMP_INDEX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENTAGE_TYPE_PATTERN,concat($min,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_PERCENTAGE_TYPE_PATTERN,concat($min,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'McmAreaDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MCM_AREA_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RadiationLevelType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RADIATION_LEVEL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ROENTGEN_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3,4}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AltimeterSettingInHectopascalsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTIMETER_SETTING_IN_HECTOPASCALS_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HECTO_PASCALS_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'AltimeterSettingInMillibarsType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTIMETER_SETTING_IN_MILLIBARS_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MILLIBAR_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="concat($MTF_ALTIMETER_SETTING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{6,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'UniversalReferenceGridType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIVERSAL_REFERENCE_GRID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Utm1MeterHigherOrderEastingType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UTM_1_METER_HIGHER_ORDER_EASTING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SIX_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{7,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'Utm1MeterHigherOrderNorthing7CharacterType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UTM_1_METER_HIGHER_ORDER_NORTHING_7_CHARACTER_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_SEVEN_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{8,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'Utm1MeterHigherOrderNorthing8CharacterType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UTM_1_METER_HIGHER_ORDER_NORTHING_8_CHARACTER_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_EIGHT_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_EIGHT_DIGIT_TYPE_PATTERN,concat(string($min),concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>			
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[1-8]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'Context'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),concat('Quantity',$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'Link22NetworkIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK_22_NETWORK_IDENTIFIER_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_ONE_DIGIT_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($max),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-F1-9]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_NUMERIC_TYPE,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-F]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'PrefixAToFType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PREFIX_A_TO_F_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-F]{1,2}']">
		<xsl:attribute name="ProposedExtensionType">
			<xsl:value-of select="concat($MTF_LOGICAL_CHANNEL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-HJ-NP-Z]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ContactSequential1LetterIdentifierType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_SEQUENTIAL_1_LETTER_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_LIMITED_TYPE,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'_100000MeterSquareColumnType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ONE_THOUSAND_METER_SQUARE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_LIMITED_TYPE,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_LIMITED_TYPE,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-HJ-NP-Z]{2,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'ContactSequential2LetterIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_SEQUENTIAL_2_LETTER_IDENTIFIER_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE,concat($MTF_TWO,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TargetOriginatorAndTargetClassificationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_ORIGINATOR_AND_TARGET_CLASSIFICATION_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE,concat($MTF_TWO,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE,concat($MTF_TWO,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Q]{1,1}[A-H]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'Atdl1TrackNumberBlockEndType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ATDL1_TRACK_NUMBER_BLOCK_END_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'Atdl1TrackNumberBlockStartType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ATDL1_TRACK_NUMBER_BLOCK_START_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{1,12}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'ReferencePointDesignationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REFERENCE_POINT_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReferencePointNameAbbreviatedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REFERENCE_POINT_NAME_ABBREVIATED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHASPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{1,24}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-7]{4,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'LowerTrackBlockLimitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOWER_TRACK_BLOCK_LIMIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UpperTrackBlockLimitType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPPER_TRACK_BLOCK_LIMIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{1,14}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:if test="string-length($minLength) > 0">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{1,15}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MickeyNetControllerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MICKEY_NET_CONTROLLER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissileShortRangeAirDefenseEngagementZoneIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSILE_SHORT_RANGE_AIR_DEFENSE_ENGAGEMENT_ZONE_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{5,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CommunicationsEmitterNotationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATIONS_EMITTER_NOTATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_FIVE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'EquipmentCodeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_FIVE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_FIVE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{6,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AssignedWingAndOrGroupType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ASSIGNED_WING_AND_OR_GROUP_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NameOfAreaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'UlnAssignedType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ULN_ASSIGNED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,9}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:if test="(compare($minLength,'1') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{2,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MissileTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSILE_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,11}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'CodesCryptoInUseType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CODES_CRYPTO_IN_USE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'LocalCommanderCollectionRequirementType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LOCAL_COMMANDER_COLLECTION_REQUIREMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ReplyToOfficeSymbolType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPLY_TO_OFFICE_SYMBOL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>

				<xsl:choose>
					<xsl:when test="(contains(string($fieldName),'AmendmentSetIdentifierType'))">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AMENDMENT_SET_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:when>
					<xsl:when test="(contains(string($fieldName),'AuthenticationSystemType'))">
						<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AUTHENTICATION_SYSTEM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:when>
					<xsl:otherwise>
						<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
					</xsl:otherwise>
				</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,9}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'InternationalRadioCallSignType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTERNATIONAL_RADIO_CALL_SIGN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SegmentParameterType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEGMENT_PARAMETER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{4,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'EquipmentIdCodeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_ID_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NatoDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NATO_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{5,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:if test="(compare($minLength,'5') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_FIVE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{8,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'OrdnanceWeaponTypeBySclCodeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORDNANCE_WEAPON_TYPE_BY_SCL_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_EIGHT,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'PrimaryRemarkKeyType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRIMARY_REMARK_KEY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_EIGHT,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERIC_TYPE_PATTERN,concat($MTF_EIGHT,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,10}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CommunicationPlanDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATION_PLAN_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ReconnaissanceTargetCategoryEeiType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECONNAISSANCE_TARGET_CATEGORY_EEI_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'GuardRequirementsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GUARD_REQUIREMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'NavigationalAidIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVIGATIONAL_AID_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MineFiringSystemType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_FIRING_SYSTEM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{2,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'SubmarineTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBMARINE_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SurfaceShipTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURFACE_SHIP_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{2,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ShipTypeIdentificationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_TYPE_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ShipTypeNavalType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_TYPE_NAVAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{4,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'NavalFireSupportAreaType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVAL_FIRE_SUPPORT_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[C-HJ-NP-X]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
		
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MgrsUtmGridZoneRowType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MGRS_UTM_GRID_ZONE_ROW_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'UtmGridZoneRowType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UTM_GRID_ZONE_ROW_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHA_TYPE_PATTERN,concat($MTF_ONE,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
					</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-,A-Z0-9]{1,14}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
		
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AdditionalImageNumberSType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ADDITIONAL_FRAME_IMAGE_NUMBERS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_IMAGE_NUMBER_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'ImageNumberType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IMAGE_FRAME_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_IMAGE_NUMBER_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_IMAGE_NUMBER_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'WaterTemperatureCelsiusType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WATER_TEMP_TYPE_PATTERN,concat(replace(replace($min,'\.',''),'\-',$MTF_NEGATIVE),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_CELSIUS_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ContextQuantityMinusDecimalPtFiveCharacterMaxType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace(replace($min,'\.',''),'\-',$MTF_NEGATIVE),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'MaxAltitudeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAX_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MinAltitudeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MIN_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{2,3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'MileMarkerEndType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MILE_MARKER_END_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace(replace($min,'\.',''),'\-',$MTF_NEGATIVE),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'MileMarkerStartType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MILE_MARKER_START_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_NEGATIVE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,$MTF_NEGATIVE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:variable name="DescriptionThirtyCharRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,30}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$DescriptionThirtyCharRegExPattern]">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minILength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'DescriptionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'NavigationAidDescriptionType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVIGATION_AID_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:variable name="PointDescriptionThirtyEightCharRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,38}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$PointDescriptionThirtyEightCharRegExPattern]">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minILength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'DesiredMeanPointOfImpactDescriptionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DESIRED_MEAN_POINT_OF_IMPACT_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'InitialPointDescriptionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INITIAL_POINT_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:variable name="AircraftLimitationsOrResponseRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,67}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$AircraftLimitationsOrResponseRegExPattern]">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minILength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AircraftLimitationsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_LIMITATIONS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'TypeOfResponseOrReactionType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_RESPONSE_OR_REACTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:variable name="MailAddressRegExPattern"><xsl:text>[\-A-Z0-9\.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,60}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$MailAddressRegExPattern]">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minILength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ElectronicMailAddressType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELECTRONIC_MAIL_ADDRESS_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($minLength,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SecureElectronicMailAddressType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECURE_ELECTRONIC_MAIL_ADDRESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z ]{1,31}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'IntelligenceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTELLIGENCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MentalStateType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MENTAL_STATE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ABS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,29}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'AirForceCodeOrSpecialtyShopCodeRequiredType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIR_FORCE_CODE_OR_SPECIALTY_SHOP_CODE_REQUIRED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,39}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'HostTableRemarksType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HOST_TABLE_REMARKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'RepairCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPAIR_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,41}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'FrequencyCommentType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREQUENCY_COMMENT_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'ImageryReferenceType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IMAGERY_REFERENCE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,43}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MessageTrafficCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_TRAFFIC_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MissionSupportRequirementsCommentsType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_SUPPORT_REQUIREMENTS_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,45}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minILength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'EquipmentNomenclatureType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_NOMENCLATURE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'JammerEquipmentTypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_JAMMER_EQUIPMENT_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_ALPHANUMERICSPECIAL_TYPE,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,46}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:if test="(compare($minLength,'1') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,12}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'FrequencyPlanDesignationType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREQUENCY_PLAN_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,24}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'ContinuityCodeLinkType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTINUITY_CODE_LINK_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'UnitSubtypeType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_SUBTYPE_TYPE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_TWO,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,15}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:if test="(compare($minLength,'3') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,30}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'NonsecureTelephoneNumberInternationalType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NON_SECURE_TELEPHONE_NUMBER_INTERNATIONAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SecureTelephoneNumberInternationalType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SECURE_TELEPHONE_NUMBER_INTERNATIONAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,36}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MapProducerType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAP_PRODUCER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SubmarineGridSystemAreaDesignatorType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBMARINE_GRID_SYSTEM_AREA_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{4,25}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:if test="(compare($minLength,'4') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{6,11}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'TypeFireSupportReportType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_FIRE_SUPPORT_REPORT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_SIX,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_SIX,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{6,15}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'CryptoKeyingMaterialType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CRYPTO_KEYING_MATERIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_SIX,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_SIX,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{6,30}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'EncryptionKeyShortTitleType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENCRYPTION_KEY_SHORT_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'KeyShortTitleType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_KEY_SHORT_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANBS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'HazardousCargoDesignatorType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HAZARDOUS_CARGO_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'PackageIdentificationType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PACKAGE_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{3,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AntennaGainType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANTENNA_GAIN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DECIBEL_MEASURE,concat($MTF_THREE,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SubmarineEngineTypeType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBMARINE_ENGINE_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_THREE,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{4,7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			<xsl:if test="(compare($minLength,'4') = 0)">
				<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_FOUR,concat('To',concat($maxLength,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{6,6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:variable name="length" select="xsd:restriction/xsd:length/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'ReportableItemCodeRicType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REPORTABLE_ITEM_CODE_RIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'SymbolFunctionIdentifierType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SYMBOL_FUNCTION_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_SIX,concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{8,13}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_EIGHT,concat('To',concat($maxLength,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{9,15}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="minLength" select="xsd:restriction/xsd:minLength/@value"/>
			<xsl:variable name="maxLength" select="xsd:restriction/xsd:maxLength/@value"/>
			<xsl:choose>
				<xsl:when test="(compare($fieldName,'SigintElectrigramReportSerialType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SIGINT_ELECTRIGRAM_REPORT_SERIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_NINE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(compare($fieldName,'SigintSpotReportSerialType')=0)">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SIGINT_SPOT_REPORT_SERIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_NINE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NATO_ANS_TYPE_PATTERN,concat($MTF_NINE,concat('To',concat(string($maxLength),concat($MTF_CHAR,$MTF_SIMPLE_TYPE)))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'MmoeSimpleInitialThreatProbabilityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MMOE_SIMPLE_INITIAL_THREAT_PROBABILITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace(replace($min,'\.',''),'\-',$MTF_NEGATIVE),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:when test="(contains(string($fieldName),'MmoeSustainedThreatProbabilityType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MMOE_SUSTAINED_THREAT_PROBABILITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace(replace($min,'\.',''),'\-',$MTF_NEGATIVE),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace(replace($min,'\.',''),'\-',$MTF_NEGATIVE),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value=' {1,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VEHICLE_DEPTH_OR_ALTITUDE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='        {1,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DROP_ZONE_SLOPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='(PP|QQ|RR|SS|TT|UU|VV|WW|XX|YY|ZZ){2,2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STRAIT_OF_JUAN_DE_FUCA_OPERATING_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='0[1-8]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SADL_GATEWAY_KEY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='188-220[A-Z]{0,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NETWORK_PROTOCOL_STANDARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='2045-47001[A-Z]{0,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HEADER_VERSION_AND_SERIES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='9[5-9]{1,1}']">
		<xsl:attribute name="ProposedTypeName">
			<xsl:value-of select="concat($MTF_SADL_AIR_KEY_95_TO_99_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='RS[0-9]{2,2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_READINESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[ ]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BLANK_SPACE_CHARACTER_BASE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-1]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CURRENT_CRYPTO_PERIOD_DESIGNATOR_CCPD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-1]{1}|\.[0-9]{1}|[0]{1}\.[0-9]{1}|\.[0-9]{2}|[0]{1}\.[0-9]{1}|[0]{1}\.[0-9]{2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COVERAGE_FACTOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-4]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PADDING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-6]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_ONE,concat($MTF_CHAR,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9,]{1,26}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEASONAL_TIME_RANGE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9A-F]{2,2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK22_FREQ_PLAN_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9A-F]{3,3}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRODUCER_SERIAL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9A-F]{32,32}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MOTION_IMAGERY_STREAM_ID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9A-F]{6,6}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRODUCT_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9A-F]{8,8}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PRODUCTION_DATE_TIME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HEXADECIMAL_NUMBER,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{0,1}\.[0-9]{2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACTUAL_RADIATION_DECAY_RATE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,12}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6}|\.[0-9]{7}|[0-9]{7}\.[0-9]{1}|[0-9]{6}\.[0-9]{2}|[0-9]{5}\.[0-9]{3}|[0-9]{4}\.[0-9]{4}|[0-9]{3}\.[0-9]{5}|[0-9]{2}\.[0-9]{6}|[0-9]{1}\.[0-9]{7}|\.[0-9]{8}|[0-9]{8}\.[0-9]{1}|[0-9]{7}\.[0-9]{2}|[0-9]{6}\.[0-9]{3}|[0-9]{5}\.[0-9]{4}|[0-9]{4}\.[0-9]{5}|[0-9]{3}\.[0-9]{6}|[0-9]{2}\.[0-9]{7}|[0-9]{1}\.[0-9]{8}|\.[0-9]{9}|[0-9]{9}\.[0-9]{1}|[0-9]{8}\.[0-9]{2}|[0-9]{7}\.[0-9]{3}|[0-9]{6}\.[0-9]{4}|[0-9]{5}\.[0-9]{5}|[0-9]{4}\.[0-9]{6}|[0-9]{3}\.[0-9]{7}|[0-9]{2}\.[0-9]{8}|[0-9]{1}\.[0-9]{9}|\.[0-9]{10}|[0-9]{10}\.[0-9]{1}|[0-9]{9}\.[0-9]{2}|[0-9]{8}\.[0-9]{3}|[0-9]{7}\.[0-9]{4}|[0-9]{6}\.[0-9]{5}|[0-9]{5}\.[0-9]{6}|[0-9]{4}\.[0-9]{7}|[0-9]{3}\.[0-9]{8}|[0-9]{2}\.[0-9]{9}|[0-9]{1}\.[0-9]{10}|\.[0-9]{11}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_ELEVEN,concat($MTF_CHAR,concat('Quantity',$MTF_SIMPLE_TYPE))))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,2}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}']">
		<xsl:attribute name="ProposedTypeName">	<xsl:value-of select="concat($MTF_LITTORAL_CURRENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
		<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_KNOT_MEASURE,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,3}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|\.[0-9]{3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PERCENTAGE_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,3}|\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{3}\.[0-9]{2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_M_UNIT_VALUE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,4}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,4}\.[0-9]{3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_THOUSANDTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,5}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_Q_ROUTE_WIDTH_IN_YARDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,5}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,5}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_FOUR,concat($MTF_CHAR,concat('Quantity',$MTF_SIMPLE_TYPE))))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,6}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALTITUDE_THOUSAND_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,6}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1}|[0-9]{5}\.[0-9]{1}|[0-9]{6}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ONE,concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,7}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_SIX,concat($MTF_CHAR,concat('Quantity',$MTF_SIMPLE_TYPE))))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,8}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_REFERENCE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,8}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_SIX,concat($MTF_DIGIT,concat('Quantity',$MTF_SIMPLE_TYPE))))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1,9}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|\.[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|\.[0-9]{4}|[0-9]{4}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|\.[0-9]{5}|[0-9]{5}\.[0-9]{1}|[0-9]{4}\.[0-9]{2}|[0-9]{3}\.[0-9]{3}|[0-9]{2}\.[0-9]{4}|[0-9]{1}\.[0-9]{5}|\.[0-9]{6}|[0-9]{6}\.[0-9]{1}|[0-9]{5}\.[0-9]{2}|[0-9]{4}\.[0-9]{3}|[0-9]{3}\.[0-9]{4}|[0-9]{2}\.[0-9]{5}|[0-9]{1}\.[0-9]{6}|\.[0-9]{7}|[0-9]{7}\.[0-9]{1}|[0-9]{6}\.[0-9]{2}|[0-9]{5}\.[0-9]{3}|[0-9]{4}\.[0-9]{4}|[0-9]{3}\.[0-9]{5}|[0-9]{2}\.[0-9]{6}|[0-9]{1}\.[0-9]{7}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_SEVEN,concat($MTF_CHAR,concat('Quantity',$MTF_SIMPLE_TYPE))))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{15,15}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IMEI_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{2}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|[0-9]{2}\.[0-9]{3}|[0-9]{1}\.[0-9]{4}|[0-9]{2}\.[0-9]{4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_REPETITION_INTERVAL_STABILITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{2}\.[0-9]{2}|[0-9]{3}\.[0-9]{2}|[0-9]{1}\.[0-9]{3}|[0-9]{2}\.[0-9]{3}|[0-9]{3}\.[0-9]{3}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PULSE_DURATION_IN_MICROSECONDS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MICRO_SECOND_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1}\.[0-9]{3}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELECTRIC_REFLECTIVITY_COEFFICIENT_Q_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1}\.{1}|[0-9]{2}\.{1}|[0-9]{3}\.{1}|[0-9]{4}\.{1}|[0-9]{5}\.{1}|[0-9]{1}\.{2}|[0-9]{2}\.{2}|[0-9]{3}\.{2}|[0-9]{4}\.{2}|[0-9]{5}\.{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TOTAL_TIME_HOURS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HOUR_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{1}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINEFIELD_DENSITY_IN_MINES_PER_METER_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_METER_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2,2}(C|L|R){0,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RUNWAY_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{2}|\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{2}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATIONS_SATELLITE_ANTENNA_ELEVATION_TYPE_PATTERN,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3,4}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}|[0-9]{4}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
		
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WATER_DEPTH_TYPE_PATTERN,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3,6}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPACE_OBJECT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3}\.[0-9]{1,1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AngleTrueInDegreesToTheTenthType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRUE_ANGLE_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3}|[0-9]{1}\.[0-9]{1}|[0-9]{1}\.[0-9]{1}|[0-9]{2}\.[0-9]{1}|[0-9]{3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HORIZONTAL_ORIENTATION_TYPE_PATTERN,concat($MTF_ZERO,concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3}|[0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[0-9]{2}\.[0-9]{1}|[0-9]{1}\.[0-9]{2}|[0-9]{3}\.[0-9]{1}|[0-9]{2}\.[0-9]{2}|[0-9]{3}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AntennaAzimuthTrueNorthReferenceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANTENNA_AZIMUTH_TRUE_NORTH_DESIGNATOR_REFERENCE_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3}|[0-9]{3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{3}|[0-9]{3}\.[0-9]{1}|[0-9]{3}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:choose>
				<xsl:when test="(contains(string($fieldName),'AntennaAzimuthMagneticReferenceType'))">
					<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ANTENNA_AZIMUTH_MAGNETIC_REFERENCE_TYPE_PATTERN,concat(replace($min,'\.',''),concat('To',concat(replace($max,'\.',''),$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DEGREE_MEASURE,concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{4,4}ED[0-9]{1,2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STANAG_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{4,4}[A-Z]{0,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MIL_STD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{4}\.[0-9]{1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPEED_OF_SOUND_IN_WATER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
		<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FEET_PER_SECOND_MEASURE,concat($MTF_DECIMAL,concat($MTF_TENTHS,$MTF_SIMPLE_TYPE)))"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{5,7}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TROOP_PROGRAM_SEQUENCE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0-9]{6,7}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LLOYD_REGISTRY_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0][0-9A-F]{2,2}|[1-2][0-9A-F]{2,2}|[3][E][0-7]|[3][0-9A-D][0-9A-F]']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINK22_NET_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[0]{1}\.[0-9]{1}|[0]{1}\.[0-9]{2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SEARCH_PROBABILITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[1-3]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STANDING_REQUEST_FOR_ARTILLERY_TARGET_INFO_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[1-6]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAMAGE_PURPOSE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[2-6]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RESTRICTED_TRACK_QUALITY_TQ_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[2-9]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_OF_BLADES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[2-9]|1[0-5]{1,2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ROLE_LOSS_TIMEOUT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_MINUTE_MEASURE,concat($min,concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[3-7]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINIMUM_TRACK_QUALITY_TQ_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[5678]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CST_CHANNEL_DATA_SIZE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-D]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_APPENDIX_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-G]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAMAGE_CATEGORY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-HJ-NP-V]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_100K_METER_GRID_NORTH_SOUTH_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-HJ-NP-Z0-9]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SORTS_ORG_ID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-HJ-NP-Z1-9]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNITY_SEQUENCE_NO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-HJ-NP-Z]{1,1}[A-HJ-M]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FIFTEEN_QUADRILATERAL_GEO_REF_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-HJ-NP-Z]{1,1}|(AA|BB|CC|DD|EE|FF|GG|HH|JJ|KK|LL|MM|NN|PP|QQ|RR|SS|TT|UU|VV|WW|XX|YY|ZZ)']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COLUMN_ALPHABETIC_INDICATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-HJ-NPQ]{2,2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ONE_DEGREE_QUADRILATERAL_GEO_REF_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-L]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DAMAGE_CONFIDENCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-M]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALPHABETIC_IDENTIFIER_FREQUENCY_BAND_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-NP-Q]{1,1}[B-H]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUPPORTING_ADDRESS_PREFIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Y]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HAWIIAN_OPERATIONS_AREA_GRID_AXIS_INDICATOR_PREFIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{1,15}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALPHABETIC_IDENTIFIER_SPECIAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{1,19}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COLLECTOR_PROJECT_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{1,7}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTACT_STATUS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{11,28}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NATIONAL_ROE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{2,20}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AEW_SURVEILLANCE_AREA_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{3,12}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BEACH_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{3,26}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_US_ROE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{3,9}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_METHOD_OF_PASSING_TARGET_INFORMATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{4,10}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNEXPLODED_ORDNANCE_INFORMATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{4,14}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMISSION_CONTROL_PLAN_DESIGNATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{4,37}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ACTION_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z ]{7,23}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EMITTER_NICKNAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="TrademarkRegExPattern"><xsl:text>[A-Z0-9 \.,\(\)&amp;\?\-!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,30}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$TrademarkRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRADEMARK_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{1,24}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EQUIPMENT_NAME_COMMON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{1,4}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DROP_SCORE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{3,6}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMINT_NOTATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{4,4}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SQUADRON_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9 ]{5,6}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COURSES_OF_ACTION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="FreeTextBaseTypeRegExPattern"><xsl:text>[A-Z0-9\.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~\|a-z\t\n]|([:A-Z0-9\.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~\|a-z\t\n][/:A-Z0-9 \.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z\t\n]*[A-Z0-9\.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~\|a-z\t\n])</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$FreeTextBaseTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREE_TEXT_BASE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9\.]{9,9}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VERSION_OF_MESSAGE_TEXT_FORMAT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{1,14}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENEMY_MASTER_KEY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{16,16}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMERCIAL_IMAGE_CHIP_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{17,17}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRANSPORTATION_CONTROL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{2,25}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNEXPLODED_ORDNANCE_WEAPON_IDENTIFICATION_OR_TYPE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{2,9}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IFF_SIF_CODE_OR_CONDITION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,10}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_NICKNAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{3,30}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATING_SYSTEM_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{4,6}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLATFORM_TYPE_SYMBOL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{40,64}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IMAGE_CHIP_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{5,10}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WORK_UNIT_CODE_STANDARD_REFERENCE_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{5,8}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATIONS_CIRCUIT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z0-9]{7,8}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UNIT_LINE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,15}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_IDENTIFICATION_PROCEDURES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,1}|[A-D]{1,1}[A-Z]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_END_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,1}|[A-Z]{1,1}[A-Z]{1,1}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BROADCAST_GEOGRAPHICAL_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,20}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_APPROACH_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,4}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_PENNANT_PREFIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{1,6}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{2,10}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIFIC_AREA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{2,3}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TACAN_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]{3,12}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VISUAL_CHARACTERISTIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[A-Z]|[A-D][A-Z]{1,2}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_START_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[CFGKM]{1,11}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_UPRIGHT_SEQUENCE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\- \.,\(\)\?A-Z0-9]{1,60}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMBAT_NET_RADIO_INITIALIZATION_DATA_LOAD_ID_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,22}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HARMONIC_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,3}|\.[0-9]{1}|[\-0-9]{1}\.[0-9]{1}|[\-0-9]{2}\.[0-9]{1}|[\-0-9]{3}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace(replace($min,'-',$MTF_NEGATIVE),'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_TENTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,5}|\.[0-9]{1}|[\-0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[\-0-9]{2}\.[0-9]{1}|[\-0-9]{1}\.[0-9]{2}|[\-0-9]{3}\.[0-9]{1}|[\-0-9]{2}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,5}|\.[0-9]{1}|[\-0-9]{1}\.[0-9]{1}|\.[0-9]{2}|[\-0-9]{2}\.[0-9]{1}|[\-0-9]{1}\.[0-9]{2}|[\-0-9]{3}\.[0-9]{1}|[\-0-9]{2}\.[0-9]{2}|[\-0-9]{4}\.[0-9]{1}|[\-0-9]{3}\.[0-9]{2}|[\-0-9]{5}\.[0-9]{1}|[\-0-9]{4}\.[0-9]{2}|[\-0-9]{5}\.[0-9]{2}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMERIC_TYPE_PATTERN,concat(replace(replace($min,'-',$MTF_NEGATIVE),'\.',''),concat('To',concat(replace($max,'\.',''),concat($MTF_DECIMAL,concat($MTF_HUNDREDTHS,concat('Quantity',$MTF_SIMPLE_TYPE)))))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{1,7}\.[0-9]{1}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_OFFSET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_YARD_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{3,4}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
			
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAXIMUM_SOUND_PRESSURE_IN_DECIBES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_DECIBEL_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-0-9]{3,5}']">
		<xsl:for-each select="ancestor::xsd:restriction/ancestor::xsd:simpleType">
			<xsl:variable name="fieldName" select="@name"/>
			<xsl:variable name="min" select="xsd:restriction/xsd:minInclusive/@value"/>
			<xsl:variable name="max" select="xsd:restriction/xsd:maxInclusive/@value"/>
		
			<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DEVIATION_VALUE_INFORMATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_FOOT_MEASURE,concat(replace($min,'-',$MTF_NEGATIVE),concat('To',concat($max,$MTF_SIMPLE_TYPE))))"/></xsl:attribute>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-:A-Fa-f0-9]{2,45}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INTERNET_PROTOCOL_ADDRESS_IPV6_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
		<xsl:attribute name="ProposedExtensionType"><xsl:value-of select="concat($MTF_HEXADECIMAL_NUMBER,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="FreeTextFieldTypeRegExPattern"><xsl:text>[\-:A-Z0-9 \.,\(\)\?!@#$%\^&amp;\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z\t\n]([:A-Z0-9 \.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z\t\n]|/[:A-Z0-9 \.,\(\)\?\-!@#$%\^&amp;\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z\t\n]|://)*</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$FreeTextFieldTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FREE_TEXT_FIELD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-;\.,\(\)\?A-Z0-9 ]{1,20}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TMD_SENSOR_ASSET_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-;\.,\(\)\?A-Z0-9 ]{1,30}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMBAT_NET_RADIO_OPERATING_AREA_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-A-Z ]{1,32}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CODEWORD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="FilingNumberTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|]{1,10}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$FilingNumberTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FILING_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="ReferenceSerialNumberTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|]{1,30}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$ReferenceSerialNumberTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REFERENCE_SERIAL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="MessageSerialNumberTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|]{1,7}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$MessageSerialNumberTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_SERIAL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="TimeAmplificationCommentTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,11}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$TimeAmplificationCommentTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TIME_AMPLIFICATION_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="RemarksTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,12}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$RemarksTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REMARKS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="OthersSarUnitCommentsRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,14}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$OthersSarUnitCommentsRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OTHER_SAR_UNIT_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="MissionDesignatorCommentsRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,15}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$MissionDesignatorCommentsRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_DESIGNATOR_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="IdentifyingInformationRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,35}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$IdentifyingInformationRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_IDENTIFYING_INFORMATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="SpecialTrackNumberDescriptionTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,40}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$SpecialTrackNumberDescriptionTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIAL_TRACK_NUMBER_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="MissionObjectiveTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,43}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$MissionObjectiveTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_OBJECTIVE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="MissionLocationCommentTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,4}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$MissionLocationCommentTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_LOCATION_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="InstructionsForAcknowledgingTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,50}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$InstructionsForAcknowledgingTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INSTRUCTIONS_FOR_ACKNOWLEDGING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="EventDescriptionTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,54}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$EventDescriptionTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EVENT_DESCRIPTION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="HeadingInformationTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,61}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$HeadingInformationTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HEADING_INFORMATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="RoeContraintsTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,62}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$RoeContraintsTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ROE_CONSTRAINTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="ElectronicDataTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)\?!@#$%\^&amp;\*=_\+\[\]\{\}\\&#34;'; ~`\|]{1,60}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$ElectronicDataTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ELECTRONIC_DATA_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="MajorEquipmentTypeRegExPattern"><xsl:text>[\-A-Z0-9 \.,\(\)\?!@#$%\^&amp;\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|]{1,13}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$MajorEquipmentTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MAJOR_EQUIPMENT_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-A-Z0-9 ]{1,15}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CODEWORD_CONTRACTED_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-A-Z0-9 ]{1,20}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CODE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-A-Z0-9 ]{1,32}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CODEWORD_MEANING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-A-Z0-9\(\)]{20,20}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STANDARD_OF_MESSAGE_TEXT_FORMAT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-A-Z0-9a-z]{1,20}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NATIONAL_GRID_SYSTEM_COORDINATES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="WebsiteNameOrTitleTypeRegExPattern"><xsl:text>[\-A-Za-z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,40}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$WebsiteNameOrTitleTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEBSITE_NAME_OR_TITLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:variable name="WebsiteAddressTypeRegExPattern"><xsl:text>[\-A-Za-z0-9 \.,\(\)&amp;\?!@#$%\^\*=_\+\[\]\{\}\\&#34;';&gt;&lt;~`\|a-z]{1,45}</xsl:text></xsl:variable>
	<xsl:template match="xsd:pattern[@value=$WebsiteAddressTypeRegExPattern]">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEBSITE_ADDRESS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?0-9 ]{2,13}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TASK_ORGANIZATION_NUMERICAL_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?0-9]{16,16}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NATIONAL_STOCK_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?0-9]{4,4}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ETEPP_VERSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?0-9]{6,6}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIAL_OPERATIONAL_ELINT_REQUIREMENT_SPOER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?0-9]{9,9}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LINEAL_PRECEDENCE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z ]{1,10}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BUILD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z ]{1,17}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_PERSON_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z ]{1,35}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAME_OF_INDIVIDUAL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z ]{3,20}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SURNAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z ]{4,25}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIAL_CAVEATS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,22}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ENGAGEMENT_AUTHORITY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,34}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXCESS_AIRCRAFT_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,37}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SHIP_TARGET_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,47}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_GUIDANCE_COMMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,49}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SCHEDULE_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,56}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_EXERCISE_NICKNAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,62}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SPECIAL_INTEREST_CARGO_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,63}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CREW_COMMENTS_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,64}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MESSAGE_SUBJECT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{1,69}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OPERATIONAL_TASKING_MESSAGE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{12,12}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STANDARDS_REQUIREMENT_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{13,47}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NUMBER_AND_TYPE_OF_ORDER_OF_BATTLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,15}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_AMPLIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,17}']">
		<xsl:attribute name="ProposedTypeName">
			<xsl:value-of select="concat($MTF_POINT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,25}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_HAZARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,30}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FILE_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,32}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DOCUMENT_OR_PUBLICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{2,8}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTROL_POINT_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,13}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_WEAPON_SYSTEM_SHORT_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,29}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,3}']">
		<xsl:attribute name="ProposedTypeName">
			<xsl:value-of select="concat($MTF_EXPANSION_ITEM_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,50}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_THREAT_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{3,7}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CARGO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{4,12}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMPONENT_ID_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{4,14}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TYPE_OF_CODING_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{4,35}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRANSMISSION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{5,15}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TARGET_MATERIAL_REFERENCE_IDENTIFICATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{5,40}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FILE_NAMING_POLICY_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{6,20}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MINE_DANGER_AREA_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{6,6}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REQUIREMENT_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{7,12}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DISCREPANCY_JOB_CONTROL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{8,10}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COURSES_OF_ACTION_PLAN_IDENTIFICATION_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{8,12}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_KEYMAT_AND_CODES_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{9,14}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CASE_NOTATION_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9 ]{9,9}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_STANDARD_NETWORK_SETTINGS_SNS_TABLE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,11}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COMMUNICATION_EQUIPMENT_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,13}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_PLAN_MAJOR_EQUIPMENT_TYPE_CODE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,18}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TRACK_UNIQUE_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,3}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_RECIEVERS_PACKAAGE_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,4}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_INDEX_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,8}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_AIRCRAFT_STARTING_UNIT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{1,9}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ORIGINATING_UNIT_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{10,10}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_COURSE_ID_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{11,11}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_ALLOWANCE_EQUIPAGE_LIST_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{16,16}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_CONTRACT_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{2,11}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LAND_MINE_OTHER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{2,12}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_IDENTIFICATION_WILDCARD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{2,15}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_LAYING_REFERENCE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{2,2}']">
		<xsl:attribute name="ProposedTypeName">
			<xsl:value-of select="concat($MTF_RECORD_ORIGINATOR_BE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{3,18}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NATIONAL_SIGINT_REQUIREMENTS_LIST_NSR1_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{3,3}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_T1AM_AIMPOINT_SUFFIX_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{4,5}']">
		<xsl:attribute name="ProposedTypeName">
			<xsl:value-of select="concat($MTF_ETEPP_SERIAL_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{5,10}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_TELEX_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{5,5}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSILE_ASSIGNMENT_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{5,6}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_OIL_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{7,8}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_REVISION_CYCLE_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z0-9]{9,12}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NETWORK_IDENTIFIER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z]{1,7}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_SUBMARINE_CLASS_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z]{1,8}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_VOLUME_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z]{3,16}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_FILE_EXTENSION_NAME_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.,\(\)\?A-Z]{5,5}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_MISSION_RELATIONSHIP_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\-\.0-9A-F]{1,21}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_DATA_LINK_LAYER_ADDRESS_DLAD_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\.0-9]{1,12}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVAL_ORGANIZATION_NUMERICAL_DESIGNATOR_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[\.0-9]{2,11}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_NAVAL_TASK_ORGANIZATION_ECHELON_NUMBER_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='[a-zA-Z]{1,1}[0-9]{1,2}']">
		<xsl:attribute name="ProposedTypeName">
			<xsl:value-of select="concat($MTF_EXTENDED_OPERATIONAL_PARAM_SETTING_EOPS_NO_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/>
		</xsl:attribute>
	</xsl:template>
	<xsl:template match="xsd:pattern[@value='\.[0-9]{3}|\.[0-9]{4}|\.[0-9]{5}']">
		<xsl:attribute name="ProposedTypeName"><xsl:value-of select="concat($MTF_BIT_ERROR_RATE_TYPE_PATTERN,$MTF_SIMPLE_TYPE)"/></xsl:attribute>
	</xsl:template>
	<xsl:function name="cust:addSimpleTypeName">
		<xsl:param name="fieldName"/>
		<xsl:choose>
			<xsl:when test="(contains(string($fieldName),'TypeType'))">
				<xsl:attribute name="ProposedTypeName"><xsl:value-of select="replace($fieldName,'TypeType',$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			</xsl:when>
			<xsl:when test="(contains(string($fieldName),'Percentage'))">
				<xsl:variable name="PercentName">
					<xsl:value-of select="replace($fieldName,'Percentage','Percent')"/>
				</xsl:variable>
				<xsl:attribute name="ProposedTypeName"><xsl:value-of select="replace($PercentName,'Type',$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			</xsl:when>
			<xsl:when test="(contains(string($fieldName),'_'))">
				<xsl:attribute name="ProposedTypeName"><xsl:value-of select="replace(replace($fieldName,'_',''),'Type',$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			</xsl:when>
			<xsl:otherwise>
				<xsl:attribute name="ProposedTypeName"><xsl:value-of select="replace($fieldName,'Type',$MTF_SIMPLE_TYPE)"/></xsl:attribute>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
</xsl:stylesheet>